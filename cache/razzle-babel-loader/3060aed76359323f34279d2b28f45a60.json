{"ast":null,"code":"import _defineProperty from \"/Users/ognjen/Desktop/spooky-live-ssr/ui/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/ognjen/Desktop/spooky-live-ssr/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _createReducer;\n\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as eventTypes from './eventTypes';\nvar initialState = {\n  id: undefined,\n  error: undefined,\n  errorDescription: undefined,\n  isSubmitting: false\n};\nvar passwordReducer = createReducer(initialState, (_createReducer = {}, _defineProperty(_createReducer, eventTypes.USERSECURITY_PASSWORD_CHANGE_REQUESTED, function (state) {\n  return _objectSpread(_objectSpread({}, initialState), {}, {\n    isSubmitting: true\n  });\n}), _defineProperty(_createReducer, eventTypes.USERSECURITY_PASSWORD_CHANGE_RECEIVED, function (state, action) {\n  var payload = action.payload;\n  return _objectSpread(_objectSpread({}, payload), {}, {\n    isSubmitting: false\n  });\n}), _defineProperty(_createReducer, eventTypes.USERSECURITY_PASSWORD_CHANGE_ERRORED, function (state, action) {\n  var payload = action.payload;\n  return _objectSpread(_objectSpread({}, payload), {}, {\n    isSubmitting: false\n  });\n}), _createReducer));\nexport default passwordReducer;","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky-live-ssr/ui/src/services/userSecurity/password/passwordReducer.ts"],"names":["createReducer","eventTypes","initialState","id","undefined","error","errorDescription","isSubmitting","passwordReducer","USERSECURITY_PASSWORD_CHANGE_REQUESTED","state","USERSECURITY_PASSWORD_CHANGE_RECEIVED","action","payload","USERSECURITY_PASSWORD_CHANGE_ERRORED"],"mappings":";;;;;AAAA,SAASA,aAAT,QAAsD,kBAAtD;AAGA,OAAO,KAAKC,UAAZ,MAA4B,cAA5B;AAEA,IAAMC,YAA2B,GAAG;AAClCC,EAAAA,EAAE,EAAEC,SAD8B;AAElCC,EAAAA,KAAK,EAAED,SAF2B;AAGlCE,EAAAA,gBAAgB,EAAEF,SAHgB;AAIlCG,EAAAA,YAAY,EAAE;AAJoB,CAApC;AAOA,IAAMC,eAAuC,GAAGR,aAAa,CAACE,YAAD,wDAC1DD,UAAU,CAACQ,sCAD+C,EACN,UAACC,KAAD,EAAW;AAC9D,yCAAYR,YAAZ;AAA0BK,IAAAA,YAAY,EAAE;AAAxC;AACD,CAH0D,mCAI1DN,UAAU,CAACU,qCAJ+C,EAIP,UAACD,KAAD,EAAQE,MAAR,EAAyD;AAC3G,MAAMC,OAAO,GAAGD,MAAM,CAACC,OAAvB;AACA,yCAAYA,OAAZ;AAAqBN,IAAAA,YAAY,EAAE;AAAnC;AACD,CAP0D,mCAQ1DN,UAAU,CAACa,oCAR+C,EAQR,UAACJ,KAAD,EAAQE,MAAR,EAAyD;AAC1G,MAAMC,OAAO,GAAGD,MAAM,CAACC,OAAvB;AACA,yCAAYA,OAAZ;AAAqBN,IAAAA,YAAY,EAAE;AAAnC;AACD,CAX0D,mBAA7D;AAcA,eAAeC,eAAf","sourcesContent":["import { createReducer, PayloadAction, Reducer } from '@reduxjs/toolkit'\nimport { PasswordState, PasswordResetResponse } from './models'\n\nimport * as eventTypes from './eventTypes'\n\nconst initialState: PasswordState = {\n  id: undefined,\n  error: undefined,\n  errorDescription: undefined,\n  isSubmitting: false\n}\n\nconst passwordReducer: Reducer<PasswordState> = createReducer(initialState, {\n  [eventTypes.USERSECURITY_PASSWORD_CHANGE_REQUESTED]: (state) => {\n    return { ...initialState, isSubmitting: true }\n  },\n  [eventTypes.USERSECURITY_PASSWORD_CHANGE_RECEIVED]: (state, action: PayloadAction<PasswordResetResponse>) => {\n    const payload = action.payload\n    return { ...payload, isSubmitting: false }\n  },\n  [eventTypes.USERSECURITY_PASSWORD_CHANGE_ERRORED]: (state, action: PayloadAction<PasswordResetResponse>) => {\n    const payload = action.payload\n    return { ...payload, isSubmitting: false }\n  },\n})\n\nexport default passwordReducer"]},"metadata":{},"sourceType":"module"}