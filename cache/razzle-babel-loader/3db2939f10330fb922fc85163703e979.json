{"ast":null,"code":"import { from, of } from 'rxjs';\nimport { exhaustMap, filter, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { savedStreamsReceived, tagsStreamsErroredEvent } from '../events';\nimport { getSavedStreams } from '../api/getSavedStreams';\nimport Notifications from 'react-notification-system-redux';\nimport * as tokenEventTypes from '../../../userSecurity/token/eventTypes';\nimport * as tagsEventTypes from '../../../content/tags/eventTypes';\nimport { selectIsLoggedIn } from '../../../userSecurity/token/selectors';\n\nvar getErrorNotification = function getErrorNotification() {\n  return Notifications.error({\n    title: 'Error',\n    message: \"An error occurred. Saved streams not found.\",\n    position: 'tc',\n    autoDismiss: 10,\n    action: {\n      label: 'Close',\n      callback: function callback() {\n        return console.log('Notification closed');\n      }\n    }\n  });\n};\n\nvar savedStreamsRequestedEpic = function savedStreamsRequestedEpic(action$, state$) {\n  return action$.pipe(ofType(tokenEventTypes.USERSECURITY_TOKEN_RECEIVED, tagsEventTypes.CONTENT_TAGS_RECEIVED), filter(function () {\n    return selectIsLoggedIn(state$.value.userSecurity.token);\n  }), exhaustMap(function (event) {\n    return from(getSavedStreams()).pipe(exhaustMap(function (apiResponse) {\n      return of(apiResponse.is_success ? savedStreamsReceived(apiResponse.data) : getErrorNotification());\n    }), catchError(function () {\n      return of(tagsStreamsErroredEvent({\n        streams: undefined,\n        error: 'Network error',\n        errorDescription: 'Check your network connection'\n      }));\n    }));\n  }));\n};\n\nexport default [savedStreamsRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/services/content/tags/epics/savedStreamsRequestedEpic.ts"],"names":["from","of","exhaustMap","filter","catchError","ofType","savedStreamsReceived","tagsStreamsErroredEvent","getSavedStreams","Notifications","tokenEventTypes","tagsEventTypes","selectIsLoggedIn","getErrorNotification","error","title","message","position","autoDismiss","action","label","callback","console","log","savedStreamsRequestedEpic","action$","state$","pipe","USERSECURITY_TOKEN_RECEIVED","CONTENT_TAGS_RECEIVED","value","userSecurity","token","event","apiResponse","is_success","data","streams","undefined","errorDescription"],"mappings":"AACA,SAASA,IAAT,EAAeC,EAAf,QAAyB,MAAzB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,UAA7B,QAA+C,gBAA/C;AACA,SAASC,MAAT,QAAuB,kBAAvB;AAEA,SAA6BC,oBAA7B,EAAmDC,uBAAnD,QAAkF,WAAlF;AAEA,SAASC,eAAT,QAAgC,wBAAhC;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AAEA,OAAO,KAAKC,eAAZ,MAAiC,wCAAjC;AACA,OAAO,KAAKC,cAAZ,MAAgC,kCAAhC;AACA,SAASC,gBAAT,QAAiC,uCAAjC;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjC,SAAOJ,aAAa,CAACK,KAAd,CACL;AACEC,IAAAA,KAAK,EAAE,OADT;AAEEC,IAAAA,OAAO,+CAFT;AAGEC,IAAAA,QAAQ,EAAE,IAHZ;AAIEC,IAAAA,WAAW,EAAE,EAJf;AAKEC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,OADD;AAENC,MAAAA,QAAQ,EAAE;AAAA,eAAMC,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAAN;AAAA;AAFJ;AALV,GADK,CAAP;AAYD,CAbD;;AAeA,IAAMC,yBAAoD,GAAG,SAAvDA,yBAAuD,CAACC,OAAD,EAAUC,MAAV;AAAA,SAC3DD,OAAO,CAACE,IAAR,CACEtB,MAAM,CAACK,eAAe,CAACkB,2BAAjB,EAA8CjB,cAAc,CAACkB,qBAA7D,CADR,EAEE1B,MAAM,CAAC;AAAA,WAAMS,gBAAgB,CAACc,MAAM,CAACI,KAAP,CAAaC,YAAb,CAA0BC,KAA3B,CAAtB;AAAA,GAAD,CAFR,EAGE9B,UAAU,CAAC,UAAA+B,KAAK;AAAA,WACdjC,IAAI,CAACQ,eAAe,EAAhB,CAAJ,CAAwBmB,IAAxB,CACEzB,UAAU,CAAC,UAAAgC,WAAW;AAAA,aACpBjC,EAAE,CAACiC,WAAW,CAACC,UAAZ,GAAyB7B,oBAAoB,CAAC4B,WAAW,CAACE,IAAb,CAA7C,GAAkEvB,oBAAoB,EAAvF,CADkB;AAAA,KAAZ,CADZ,EAIET,UAAU,CAAC;AAAA,aAAMH,EAAE,CAACM,uBAAuB,CAAC;AAC1C8B,QAAAA,OAAO,EAAEC,SADiC;AAE1CxB,QAAAA,KAAK,EAAE,eAFmC;AAG1CyB,QAAAA,gBAAgB,EAAE;AAHwB,OAAD,CAAxB,CAAR;AAAA,KAAD,CAJZ,CADc;AAAA,GAAN,CAHZ,CAD2D;AAAA,CAA7D;;AAkBA,eAAe,CAACf,yBAAD,CAAf","sourcesContent":["import { Epic } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, filter, catchError } from 'rxjs/operators'\nimport { ofType } from 'redux-observable'\nimport { isActionOf } from 'typesafe-actions'\nimport { tagsRequestedEvent, savedStreamsReceived, tagsStreamsErroredEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport { getSavedStreams } from '../api/getSavedStreams'\nimport Notifications from 'react-notification-system-redux'\nimport * as eventTypes from '../eventTypes'\nimport * as tokenEventTypes from '../../../userSecurity/token/eventTypes'\nimport * as tagsEventTypes from '../../../content/tags/eventTypes'\nimport { selectIsLoggedIn } from '../../../userSecurity/token/selectors'\n\nconst getErrorNotification = () => {\n  return Notifications.error(\n    {\n      title: 'Error',\n      message: `An error occurred. Saved streams not found.`,\n      position: 'tc',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    }\n  )\n}\n\nconst savedStreamsRequestedEpic: Epic<any, any, RootState> = (action$, state$) =>\n  action$.pipe(\n    ofType(tokenEventTypes.USERSECURITY_TOKEN_RECEIVED, tagsEventTypes.CONTENT_TAGS_RECEIVED),\n    filter(() => selectIsLoggedIn(state$.value.userSecurity.token)),\n    exhaustMap(event =>\n      from(getSavedStreams()).pipe(\n        exhaustMap(apiResponse =>\n          of(apiResponse.is_success ? savedStreamsReceived(apiResponse.data) : getErrorNotification())\n        ),\n        catchError(() => of(tagsStreamsErroredEvent({\n          streams: undefined,\n          error: 'Network error',\n          errorDescription: 'Check your network connection'\n        })))\n      )\n    )\n  )\n\nexport default [savedStreamsRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}