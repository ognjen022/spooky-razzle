{"ast":null,"code":"import { from, of } from 'rxjs';\nimport { exhaustMap, filter, catchError } from 'rxjs/operators';\nimport { isActionOf } from 'typesafe-actions';\nimport { tagsRequestedEvent, tagsStreamsReceivedEvent, tagsStreamsErroredEvent } from '../events';\nimport { getStreams } from '../api/getStreams';\n\nconst tagsStreamsRequestedEpic = (action$, store) => action$.pipe(filter(isActionOf(tagsRequestedEvent)), exhaustMap(event => from(getStreams()).pipe(exhaustMap(apiResponse => of(apiResponse.statusCode === 200 ? tagsStreamsReceivedEvent(apiResponse.data) : tagsStreamsErroredEvent(apiResponse.data))), catchError(() => of(tagsStreamsErroredEvent({\n  streams: undefined,\n  error: 'Network error',\n  errorDescription: 'Check your network connection'\n}))))));\n\nexport default [tagsStreamsRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky.live-ssr/src/services/content/tags/epics/tagsStreamsRequestedEpic.ts"],"names":["from","of","exhaustMap","filter","catchError","isActionOf","tagsRequestedEvent","tagsStreamsReceivedEvent","tagsStreamsErroredEvent","getStreams","tagsStreamsRequestedEpic","action$","store","pipe","event","apiResponse","statusCode","data","streams","undefined","error","errorDescription"],"mappings":"AACA,SAASA,IAAT,EAAeC,EAAf,QAAyB,MAAzB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,UAA7B,QAA+C,gBAA/C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAAyBC,kBAAzB,EAA6CC,wBAA7C,EAAuEC,uBAAvE,QAAsG,WAAtG;AAEA,SAASC,UAAT,QAA2B,mBAA3B;;AAEA,MAAMC,wBAAyE,GAAG,CAACC,OAAD,EAAUC,KAAV,KAChFD,OAAO,CAACE,IAAR,CACEV,MAAM,CAACE,UAAU,CAACC,kBAAD,CAAX,CADR,EAEEJ,UAAU,CAACY,KAAK,IACdd,IAAI,CAACS,UAAU,EAAX,CAAJ,CAAmBI,IAAnB,CACEX,UAAU,CAACa,WAAW,IACpBd,EAAE,CAACc,WAAW,CAACC,UAAZ,KAA2B,GAA3B,GAAiCT,wBAAwB,CAACQ,WAAW,CAACE,IAAb,CAAzD,GAA8ET,uBAAuB,CAACO,WAAW,CAACE,IAAb,CAAtG,CADM,CADZ,EAIEb,UAAU,CAAC,MAAMH,EAAE,CAACO,uBAAuB,CAAC;AAC1CU,EAAAA,OAAO,EAAEC,SADiC;AAE1CC,EAAAA,KAAK,EAAE,eAFmC;AAG1CC,EAAAA,gBAAgB,EAAE;AAHwB,CAAD,CAAxB,CAAT,CAJZ,CADQ,CAFZ,CADF;;AAiBA,eAAe,CAACX,wBAAD,CAAf","sourcesContent":["import { Epic } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, filter, catchError } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { TagsEventTypes, tagsRequestedEvent, tagsStreamsReceivedEvent, tagsStreamsErroredEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport { getStreams } from '../api/getStreams'\n\nconst tagsStreamsRequestedEpic: Epic<TagsEventTypes, TagsEventTypes, RootState> = (action$, store) =>\n  action$.pipe(\n    filter(isActionOf(tagsRequestedEvent)),\n    exhaustMap(event =>\n      from(getStreams()).pipe(\n        exhaustMap(apiResponse => \n          of(apiResponse.statusCode === 200 ? tagsStreamsReceivedEvent(apiResponse.data) : tagsStreamsErroredEvent(apiResponse.data))\n        ),\n        catchError(() => of(tagsStreamsErroredEvent({\n          streams: undefined,\n          error: 'Network error',\n          errorDescription: 'Check your network connection'\n        })))\n      )\n    )\n  )\n\nexport default [tagsStreamsRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}