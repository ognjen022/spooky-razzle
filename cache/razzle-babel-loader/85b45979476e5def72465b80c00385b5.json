{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { USERSECURITY_TOKEN_REFRESH_REQUESTED } from './../eventTypes';\nimport { ofType } from 'redux-observable';\nimport { from, of } from 'rxjs';\nimport { exhaustMap, catchError } from 'rxjs/operators';\nimport { tokenReceivedEvent, tokenErroredEvent } from '../events';\nimport { postUpdateToken } from '../api/postUpdateToken';\nimport { getRefreshToken } from '../../../shared/tokenLocalStorage';\n\nconst refreshTokenRequestedEpic = action$ => action$.pipe(ofType(USERSECURITY_TOKEN_REFRESH_REQUESTED), exhaustMap(event => from(postUpdateToken(getRefreshToken())).pipe(exhaustMap(apiResponse => {\n  var _event$payload;\n\n  // console.log('refreshTokenRequestedEpic apiResponse', apiResponse)\n  return of(apiResponse.statusCode === 200 ? tokenReceivedEvent(_objectSpread(_objectSpread({}, apiResponse.data), {}, {\n    redirectTo: event === null || event === void 0 ? void 0 : (_event$payload = event.payload) === null || _event$payload === void 0 ? void 0 : _event$payload.value\n  })) : tokenErroredEvent(apiResponse.data));\n}), catchError(() => of(tokenErroredEvent({\n  accessToken: undefined,\n  expiresIn: 0,\n  expiry: undefined,\n  idToken: undefined,\n  scope: undefined,\n  tokenType: undefined,\n  error: 'Network error',\n  errorDescription: 'Check your internet connection',\n  refreshToken: undefined,\n  redirectTo: undefined\n}))))));\n\nexport default [refreshTokenRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky-live-ssr/ui/src/services/userSecurity/token/epics/refreshTokenRequestedEpic.ts"],"names":["USERSECURITY_TOKEN_REFRESH_REQUESTED","ofType","from","of","exhaustMap","catchError","tokenReceivedEvent","tokenErroredEvent","postUpdateToken","getRefreshToken","refreshTokenRequestedEpic","action$","pipe","event","apiResponse","statusCode","data","redirectTo","payload","value","accessToken","undefined","expiresIn","expiry","idToken","scope","tokenType","error","errorDescription","refreshToken"],"mappings":";;;;;;AAAA,SAASA,oCAAT,QAAqD,iBAArD;AACA,SAAeC,MAAf,QAA6B,kBAA7B;AACA,SAASC,IAAT,EAAeC,EAAf,QAAyB,MAAzB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,gBAAvC;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,WAAtD;AAEA,SAASC,eAAT,QAAgC,wBAAhC;AAEA,SAASC,eAAT,QAAgC,mCAAhC;;AAGA,MAAMC,yBAAoD,GAAIC,OAAD,IAC3DA,OAAO,CAACC,IAAR,CACEX,MAAM,CAACD,oCAAD,CADR,EAEEI,UAAU,CAAES,KAAD,IACTX,IAAI,CAACM,eAAe,CAACC,eAAe,EAAhB,CAAhB,CAAJ,CAAyCG,IAAzC,CACER,UAAU,CAACU,WAAW,IAAI;AAAA;;AACxB;AACA,SAAOX,EAAE,CAACW,WAAW,CAACC,UAAZ,KAA2B,GAA3B,GAAiCT,kBAAkB,iCAAMQ,WAAW,CAACE,IAAlB;AAAwBC,IAAAA,UAAU,EAAEJ,KAAF,aAAEA,KAAF,yCAAEA,KAAK,CAAEK,OAAT,mDAAE,eAAgBC;AAApD,KAAnD,GAAkHZ,iBAAiB,CAACO,WAAW,CAACE,IAAb,CAApI,CAAT;AACD,CAHS,CADZ,EAKEX,UAAU,CAAC,MAAMF,EAAE,CAACI,iBAAiB,CAAC;AACpCa,EAAAA,WAAW,EAAEC,SADuB;AAEpCC,EAAAA,SAAS,EAAE,CAFyB;AAGpCC,EAAAA,MAAM,EAAEF,SAH4B;AAIpCG,EAAAA,OAAO,EAAEH,SAJ2B;AAKpCI,EAAAA,KAAK,EAAEJ,SAL6B;AAMpCK,EAAAA,SAAS,EAAEL,SANyB;AAOpCM,EAAAA,KAAK,EAAE,eAP6B;AAQpCC,EAAAA,gBAAgB,EAAE,gCARkB;AASpCC,EAAAA,YAAY,EAAER,SATsB;AAUpCJ,EAAAA,UAAU,EAAEI;AAVwB,CAAD,CAAlB,CAAT,CALZ,CADQ,CAFZ,CADF;;AAyBA,eAAe,CAACX,yBAAD,CAAf","sourcesContent":["import { USERSECURITY_TOKEN_REFRESH_REQUESTED } from './../eventTypes';\nimport { Epic, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, catchError } from 'rxjs/operators'\nimport { tokenReceivedEvent, tokenErroredEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport { postUpdateToken } from '../api/postUpdateToken'\nimport * as purchaseEventTypes from '../../../payments/purchase/eventTypes'\nimport { getRefreshToken } from '../../../shared/tokenLocalStorage'\nimport { Event } from '../../../eventGroups'\n\nconst refreshTokenRequestedEpic: Epic<any, any, RootState> = (action$) =>\n  action$.pipe(\n    ofType(USERSECURITY_TOKEN_REFRESH_REQUESTED),\n    exhaustMap((event: Event<string>) =>\n      from(postUpdateToken(getRefreshToken())).pipe(\n        exhaustMap(apiResponse => {\n          // console.log('refreshTokenRequestedEpic apiResponse', apiResponse)\n          return of(apiResponse.statusCode === 200 ? tokenReceivedEvent({ ...apiResponse.data, redirectTo: event?.payload?.value }) : tokenErroredEvent(apiResponse.data))\n        }),\n        catchError(() => of(tokenErroredEvent({\n          accessToken: undefined,\n          expiresIn: 0,\n          expiry: undefined,\n          idToken: undefined,\n          scope: undefined,\n          tokenType: undefined,\n          error: 'Network error',\n          errorDescription: 'Check your internet connection',\n          refreshToken: undefined,\n          redirectTo: undefined\n        })))\n      )\n    )\n  )\n\nexport default [refreshTokenRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}