{"ast":null,"code":"import { applyMiddleware, compose, createStore } from \"redux\";\nimport { createEpicMiddleware } from \"redux-observable\";\nimport { createBrowserHistory, createMemoryHistory } from \"history\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\n\nimport epics from \"../services/rootEpic\";\nimport rootReducer from \"../services/rootReducer\";\nimport { hash } from \"../services/shared/hash\";\nimport { cleanoutOldVersions } from \"../services/shared/tokenLocalStorage\";\ncleanoutOldVersions();\nconst persistConfig = {\n  key: `root:${hash()}`,\n  storage,\n  blacklist: [\"router\", \"notifications\"]\n};\nexport const isServer = !(false && window.document && window.document.createElement);\nexport const history = isServer ? createMemoryHistory({\n  initialEntries: [\"/\"]\n}) : createBrowserHistory({\n  basename: \"\"\n});\nconst epicMiddleware = createEpicMiddleware();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // Create store\n\nfunction configureStore(initialState) {\n  // configure middlewares\n  const middlewares = [routerMiddleware(history), epicMiddleware]; // compose enhancers\n\n  const enhancer = composeEnhancers(applyMiddleware(...middlewares)); // create store\n\n  const persistedReducer = persistReducer(persistConfig, rootReducer(history));\n  return createStore(persistedReducer, initialState, enhancer);\n}\n\nconst store = configureStore();\nconst persistor = persistStore(store);\nepicMiddleware.run(epics);\nexport { store, persistor };","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/app/store.ts"],"names":["applyMiddleware","compose","createStore","createEpicMiddleware","createBrowserHistory","createMemoryHistory","routerMiddleware","persistStore","persistReducer","storage","epics","rootReducer","hash","cleanoutOldVersions","persistConfig","key","blacklist","isServer","window","document","createElement","history","initialEntries","basename","epicMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","configureStore","initialState","middlewares","enhancer","persistedReducer","store","persistor","run"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,oBAAT,EAA+BC,mBAA/B,QAA0D,SAA1D;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAAiD;;AAGjD,OAAOC,KAAP,MAAkB,sBAAlB;AAEA,OAAOC,WAAP,MAAwB,yBAAxB;AAEA,SAASC,IAAT,QAAqB,yBAArB;AACA,SAASC,mBAAT,QAAoC,sCAApC;AAQAA,mBAAmB;AAEnB,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAG,QAAOH,IAAI,EAAG,EADA;AAEpBH,EAAAA,OAFoB;AAGpBO,EAAAA,SAAS,EAAE,CAAC,QAAD,EAAW,eAAX;AAHS,CAAtB;AAMA,OAAO,MAAMC,QAAQ,GAAG,EACtB,SACAC,MAAM,CAACC,QADP,IAEAD,MAAM,CAACC,QAAP,CAAgBC,aAHM,CAAjB;AAMP,OAAO,MAAMC,OAAO,GAAGJ,QAAQ,GAC3BZ,mBAAmB,CAAC;AAClBiB,EAAAA,cAAc,EAAE,CAAC,GAAD;AADE,CAAD,CADQ,GAI3BlB,oBAAoB,CAAC;AAAEmB,EAAAA,QAAQ,EAAE;AAAZ,CAAD,CAJjB;AAMP,MAAMC,cAAc,GAAGrB,oBAAoB,EAA3C;AAKA,MAAMsB,gBAAgB,GAAGP,MAAM,CAACQ,oCAAP,IAA+CzB,OAAxE,C,CAEA;;AACA,SAAS0B,cAAT,CAAwBC,YAAxB,EAAkD;AAChD;AACA,QAAMC,WAAW,GAAG,CAACvB,gBAAgB,CAACe,OAAD,CAAjB,EAA4BG,cAA5B,CAApB,CAFgD,CAGhD;;AACA,QAAMM,QAAQ,GAAGL,gBAAgB,CAACzB,eAAe,CAAC,GAAG6B,WAAJ,CAAhB,CAAjC,CAJgD,CAKhD;;AAEA,QAAME,gBAAgB,GAAGvB,cAAc,CAACM,aAAD,EAAgBH,WAAW,CAACU,OAAD,CAA3B,CAAvC;AAEA,SAAOnB,WAAW,CAAC6B,gBAAD,EAAmBH,YAAnB,EAAiCE,QAAjC,CAAlB;AACD;;AAED,MAAME,KAAK,GAAGL,cAAc,EAA5B;AACA,MAAMM,SAAS,GAAG1B,YAAY,CAACyB,KAAD,CAA9B;AAEAR,cAAc,CAACU,GAAf,CAAmBxB,KAAnB;AAEA,SAASsB,KAAT,EAAgBC,SAAhB","sourcesContent":["import { applyMiddleware, compose, createStore } from \"redux\";\nimport { createEpicMiddleware } from \"redux-observable\";\nimport { createBrowserHistory, createMemoryHistory } from \"history\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\n\nimport { RootEventTypes } from \"../services/RootEventTypes\";\nimport epics from \"../services/rootEpic\";\n\nimport rootReducer from \"../services/rootReducer\";\nimport { RootState } from \"../services/RootState\";\nimport { hash } from \"../services/shared/hash\";\nimport { cleanoutOldVersions } from \"../services/shared/tokenLocalStorage\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: Function;\n  }\n}\n\ncleanoutOldVersions();\n\nconst persistConfig = {\n  key: `root:${hash()}`,\n  storage,\n  blacklist: [\"router\", \"notifications\"],\n};\n\nexport const isServer = !(\n  typeof window !== \"undefined\" &&\n  window.document &&\n  window.document.createElement\n);\n\nexport const history = isServer\n  ? createMemoryHistory({\n      initialEntries: [\"/\"],\n    })\n  : createBrowserHistory({ basename: \"\" });\n\nconst epicMiddleware = createEpicMiddleware<\n  RootEventTypes,\n  RootEventTypes,\n  RootState\n>();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// Create store\nfunction configureStore(initialState?: RootState) {\n  // configure middlewares\n  const middlewares = [routerMiddleware(history), epicMiddleware];\n  // compose enhancers\n  const enhancer = composeEnhancers(applyMiddleware(...middlewares));\n  // create store\n\n  const persistedReducer = persistReducer(persistConfig, rootReducer(history));\n\n  return createStore(persistedReducer, initialState, enhancer);\n}\n\nconst store = configureStore();\nconst persistor = persistStore(store);\n\nepicMiddleware.run(epics);\n\nexport { store, persistor };\n"]},"metadata":{},"sourceType":"module"}