{"ast":null,"code":"import { ofType } from 'redux-observable';\nimport { from, of } from 'rxjs';\nimport { exhaustMap, catchError } from 'rxjs/operators';\nimport * as contentTagsEventTypes from '../../../content/tags/eventTypes';\nimport { paymentsProductsReceivedEvent, paymentsProductsErroredEvent } from '../events';\nimport { getProductsList } from '../api/getProductsList';\n\nconst productsRequestedEpic = (action$, store) => action$.pipe(ofType(contentTagsEventTypes.CONTENT_TAGS_REQUESTED), exhaustMap(() => from(getProductsList()).pipe(exhaustMap(apiResponse => {\n  return of(paymentsProductsReceivedEvent(apiResponse));\n}), catchError(() => of(paymentsProductsErroredEvent({\n  data: [],\n  is_success: false,\n  statusCode: 500,\n  success: false\n}))))));\n\nexport default [productsRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky.live-ssr/src/services/payments/products/epics/productsRequestedEpic.ts"],"names":["ofType","from","of","exhaustMap","catchError","contentTagsEventTypes","paymentsProductsReceivedEvent","paymentsProductsErroredEvent","getProductsList","productsRequestedEpic","action$","store","pipe","CONTENT_TAGS_REQUESTED","apiResponse","data","is_success","statusCode","success"],"mappings":"AAAA,SAAeA,MAAf,QAA6B,kBAA7B;AACA,SAASC,IAAT,EAAeC,EAAf,QAAyB,MAAzB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,gBAAvC;AACA,OAAO,KAAKC,qBAAZ,MAAuC,kCAAvC;AAEA,SAASC,6BAAT,EAAwCC,4BAAxC,QAA4E,WAA5E;AAIA,SAASC,eAAT,QAAgC,wBAAhC;;AAEA,MAAMC,qBAAgD,GAAG,CAACC,OAAD,EAAUC,KAAV,KACvDD,OAAO,CAACE,IAAR,CACEZ,MAAM,CAACK,qBAAqB,CAACQ,sBAAvB,CADR,EAEEV,UAAU,CAAC,MACTF,IAAI,CAACO,eAAe,EAAhB,CAAJ,CAAwBI,IAAxB,CACET,UAAU,CAAEW,WAAD,IAAyC;AAClD,SAAOZ,EAAE,CAACI,6BAA6B,CAACQ,WAAD,CAA9B,CAAT;AACD,CAFS,CADZ,EAIEV,UAAU,CAAC,MAAMF,EAAE,CAACK,4BAA4B,CAAC;AAC/CQ,EAAAA,IAAI,EAAE,EADyC;AAE/CC,EAAAA,UAAU,EAAE,KAFmC;AAG/CC,EAAAA,UAAU,EAAE,GAHmC;AAI/CC,EAAAA,OAAO,EAAE;AAJsC,CAAD,CAA7B,CAAT,CAJZ,CADQ,CAFZ,CADF;;AAkBA,eAAe,CAACT,qBAAD,CAAf","sourcesContent":["import { Epic, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, catchError } from 'rxjs/operators'\nimport * as contentTagsEventTypes from '../../../content/tags/eventTypes'\n\nimport { paymentsProductsReceivedEvent, paymentsProductsErroredEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport { ApiResponse } from '../../../shared/ApiResponse'\nimport { Product } from '../models'\nimport { getProductsList } from '../api/getProductsList'\n\nconst productsRequestedEpic: Epic<any, any, RootState> = (action$, store) =>\n  action$.pipe(\n    ofType(contentTagsEventTypes.CONTENT_TAGS_REQUESTED),\n    exhaustMap(() =>\n      from(getProductsList()).pipe(\n        exhaustMap((apiResponse: ApiResponse<Product[]>) => {\n          return of(paymentsProductsReceivedEvent(apiResponse))\n        }),\n        catchError(() => of(paymentsProductsErroredEvent({\n          data: [],\n          is_success: false,\n          statusCode: 500,\n          success: false\n        })))\n      )\n    )\n  )\n\nexport default [productsRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}