{"ast":null,"code":"import { postUnsubscribe } from '../api/postUnsubscribe';\nimport { from, of } from 'rxjs';\nimport { exhaustMap, filter, catchError } from 'rxjs/operators';\nimport { isActionOf } from 'typesafe-actions';\nimport { subscriptionDetailsRequestedEvent, unsubscribeReceivedEvent, unsubscribeErroredEvent, unsubscribeRequestedEvent } from '../events';\nimport Notifications from 'react-notification-system-redux';\n\nconst unsubscribeReceivedEpic = (action$, store) => action$.pipe(filter(isActionOf(unsubscribeRequestedEvent)), exhaustMap(() => from(postUnsubscribe()).pipe(exhaustMap(apiResponse => {\n  if (apiResponse.is_success) {\n    Notifications.success({\n      title: 'Subscription',\n      message: apiResponse.data,\n      position: 'tc',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    });\n    return of(unsubscribeReceivedEvent(), subscriptionDetailsRequestedEvent());\n  } else {\n    Notifications.error({\n      title: 'Subscription',\n      message: apiResponse.data,\n      position: 'tc',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    });\n    return of(unsubscribeReceivedEvent());\n  }\n}), catchError(() => of(unsubscribeErroredEvent({\n  id: undefined,\n  error: 'Network error',\n  errorDescription: 'Check your internet connection'\n}))))));\n\nexport default [unsubscribeReceivedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky-live-ssr/ui/src/services/payments/subscriptions/epics/unsubscribeReceivedEpic.ts"],"names":["postUnsubscribe","from","of","exhaustMap","filter","catchError","isActionOf","subscriptionDetailsRequestedEvent","unsubscribeReceivedEvent","unsubscribeErroredEvent","unsubscribeRequestedEvent","Notifications","unsubscribeReceivedEpic","action$","store","pipe","apiResponse","is_success","success","title","message","data","position","autoDismiss","action","label","callback","console","log","error","id","undefined","errorDescription"],"mappings":"AAAA,SAASA,eAAT,QAAgC,wBAAhC;AAEA,SAASC,IAAT,EAAeC,EAAf,QAAyB,MAAzB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,UAA7B,QAA+C,gBAA/C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAAwCC,iCAAxC,EAA2EC,wBAA3E,EAAqGC,uBAArG,EAA8HC,yBAA9H,QAAgK,WAAhK;AAEA,OAAOC,aAAP,MAA0B,iCAA1B;;AAGA,MAAMC,uBAAsG,GAAG,CAACC,OAAD,EAAUC,KAAV,KAC7GD,OAAO,CAACE,IAAR,CACEX,MAAM,CAACE,UAAU,CAACI,yBAAD,CAAX,CADR,EAEEP,UAAU,CAAC,MACTF,IAAI,CAACD,eAAe,EAAhB,CAAJ,CAAwBe,IAAxB,CACEZ,UAAU,CAACa,WAAW,IAAI;AACtB,MAAIA,WAAW,CAACC,UAAhB,EAA4B;AACxBN,IAAAA,aAAa,CAACO,OAAd,CACI;AACEC,MAAAA,KAAK,EAAE,cADT;AAEEC,MAAAA,OAAO,EAAEJ,WAAW,CAACK,IAFvB;AAGEC,MAAAA,QAAQ,EAAE,IAHZ;AAIEC,MAAAA,WAAW,EAAE,EAJf;AAKEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,OADD;AAENC,QAAAA,QAAQ,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAFV;AALV,KADJ;AAYA,WAAO1B,EAAE,CAAEM,wBAAwB,EAA1B,EAA8BD,iCAAiC,EAA/D,CAAT;AACH,GAdD,MAeK;AACDI,IAAAA,aAAa,CAACkB,KAAd,CACI;AACEV,MAAAA,KAAK,EAAE,cADT;AAEEC,MAAAA,OAAO,EAAEJ,WAAW,CAACK,IAFvB;AAGEC,MAAAA,QAAQ,EAAE,IAHZ;AAIEC,MAAAA,WAAW,EAAE,EAJf;AAKEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,OADD;AAENC,QAAAA,QAAQ,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAFV;AALV,KADJ;AAaE,WAAO1B,EAAE,CAACM,wBAAwB,EAAzB,CAAT;AACL;AACJ,CAhCS,CADZ,EAkCEH,UAAU,CAAC,MAAMH,EAAE,CAACO,uBAAuB,CAAC;AAC1CqB,EAAAA,EAAE,EAAEC,SADsC;AAE1CF,EAAAA,KAAK,EAAE,eAFmC;AAG1CG,EAAAA,gBAAgB,EAAE;AAHwB,CAAD,CAAxB,CAAT,CAlCZ,CADQ,CAFZ,CADF;;AA+CA,eAAe,CAACpB,uBAAD,CAAf","sourcesContent":["import { postUnsubscribe } from '../api/postUnsubscribe';\nimport { Epic } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, filter, catchError } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { SubscriptionDetailsEventTypes, subscriptionDetailsRequestedEvent, unsubscribeReceivedEvent, unsubscribeErroredEvent, unsubscribeRequestedEvent  } from '../events'\nimport { RootState } from '../../../RootState'\nimport Notifications from 'react-notification-system-redux'\n\n\nconst unsubscribeReceivedEpic: Epic<SubscriptionDetailsEventTypes, SubscriptionDetailsEventTypes, RootState> = (action$, store) =>\n  action$.pipe(\n    filter(isActionOf(unsubscribeRequestedEvent)),\n    exhaustMap(() =>\n      from(postUnsubscribe()).pipe(\n        exhaustMap(apiResponse => {\n            if (apiResponse.is_success) {\n                Notifications.success(\n                    {\n                      title: 'Subscription',\n                      message: apiResponse.data,\n                      position: 'tc',\n                      autoDismiss: 10,\n                      action: {\n                        label: 'Close',\n                        callback: () => console.log('Notification closed')\n                      }\n                    }\n                  )\n                return of (unsubscribeReceivedEvent(), subscriptionDetailsRequestedEvent());\n            }\n            else {\n                Notifications.error(\n                    {\n                      title: 'Subscription',\n                      message: apiResponse.data,\n                      position: 'tc',\n                      autoDismiss: 10,\n                      action: {\n                        label: 'Close',\n                        callback: () => console.log('Notification closed')\n                      }\n                    }\n                  );\n\n                  return of(unsubscribeReceivedEvent())\n            }\n        }),\n        catchError(() => of(unsubscribeErroredEvent({\n          id: undefined,\n          error: 'Network error',\n          errorDescription: 'Check your internet connection'\n        })))\n      )\n    )\n  )\n\nexport default [unsubscribeReceivedEpic]\n"]},"metadata":{},"sourceType":"module"}