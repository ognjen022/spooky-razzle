{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { videoPlayerStreamRequested } from '../../services/content/videoPlayer/events';\nimport { selectVideoPlayerStream, selectVideoPlayerToken } from '../../services/content/videoPlayer/selectors';\n\nvar VideoPlayerDefault = function VideoPlayerDefault(props, context) {\n  var videoPlayer = /*#__PURE__*/React.createRef();\n\n  var _useState = useState(undefined),\n      player = _useState[0],\n      setPlayer = _useState[1];\n\n  var token = useSelector(function (state) {\n    return selectVideoPlayerToken(state.content.videoPlayer);\n  });\n  var stream = useSelector(function (state) {\n    return selectVideoPlayerStream(state.content.videoPlayer);\n  });\n  var dispatch = useDispatch();\n  useEffect(function () {\n    setPlayer(new window.THEOplayer.Player(videoPlayer.current, {\n      libraryLocation: \"https://cdn.myth.theoplayer.com/8cc4421d-4ada-4a2c-8477-341e25036483/\"\n    }));\n  }, []);\n  useEffect(function () {\n    if (player !== null && player) {\n      var _videoPlayer$current, _videoPlayer$current2, _videoPlayer$current3, _videoPlayer$current4, _videoPlayer$current5, _videoPlayer$current6, _videoPlayer$current7, _videoPlayer$current8, _videoPlayer$current9, _videoPlayer$current10;\n\n      dispatch(videoPlayerStreamRequested(props.eventId, props.videoId, props.isLive));\n      player.addEventListener('timeupdate', function (ev) {\n        var elapsed = player.duration === 'Infinity' ? ev.currentTime : player.duration - ev.currentTime;\n\n        if (props.onTimeUpdate) {\n          props.onTimeUpdate(elapsed);\n        }\n      });\n      var bigPlay = (_videoPlayer$current = videoPlayer.current) === null || _videoPlayer$current === void 0 ? void 0 : _videoPlayer$current.querySelector('#bigPlay svg');\n      var theoPlay = (_videoPlayer$current2 = videoPlayer.current) === null || _videoPlayer$current2 === void 0 ? void 0 : _videoPlayer$current2.querySelector('.theo-big-play-button-svg-container > svg');\n      var spookySpinner = (_videoPlayer$current3 = videoPlayer.current) === null || _videoPlayer$current3 === void 0 ? void 0 : _videoPlayer$current3.querySelector('#spookySpinner svg');\n      var theoSpinner = (_videoPlayer$current4 = videoPlayer.current) === null || _videoPlayer$current4 === void 0 ? void 0 : _videoPlayer$current4.querySelector('.theo-loading-spinner-rotator');\n      (_videoPlayer$current5 = videoPlayer.current) === null || _videoPlayer$current5 === void 0 ? void 0 : (_videoPlayer$current6 = _videoPlayer$current5.querySelector('.theo-big-play-button-svg-container')) === null || _videoPlayer$current6 === void 0 ? void 0 : _videoPlayer$current6.replaceChild(bigPlay, theoPlay); // videoPlayer.current?.querySelector('.theo-secondary-color.vjs-loading-spinner ')\n      // ?.replaceChild(spookySpinner, theoSpinner);\n\n      (_videoPlayer$current7 = videoPlayer.current) === null || _videoPlayer$current7 === void 0 ? void 0 : (_videoPlayer$current8 = _videoPlayer$current7.querySelector('.theo-cast-button.theo-chromecast-button.theo-controlbar-button.vjs-control.vjs-button')) === null || _videoPlayer$current8 === void 0 ? void 0 : _videoPlayer$current8.remove();\n      (_videoPlayer$current9 = videoPlayer.current) === null || _videoPlayer$current9 === void 0 ? void 0 : (_videoPlayer$current10 = _videoPlayer$current9.querySelector('.theo-cast-button.theo-airplay-button.theo-controlbar-button.vjs-control.vjs-button')) === null || _videoPlayer$current10 === void 0 ? void 0 : _videoPlayer$current10.remove();\n    }\n  }, [player]);\n  useEffect(function () {\n    if (token && stream && player !== null && player) {\n      var _props$position;\n\n      var source = {\n        src: undefined,\n        type: 'application/x-mpegurl' // sets type to HLS\n\n      };\n      var param = \"?timestamp=\".concat(token.timestamp, \"&token=\").concat(token.token, \"&clientId=\").concat(token.client_id);\n\n      if (stream.vods.data.length > 0) {\n        source.src = \"\".concat(stream.vods.data[0].data.m3u8).concat(param);\n      } else if (stream.live !== null) {\n        source.src = \"\".concat(stream.live.m3u8).concat(param);\n      }\n\n      player.source = {\n        sources: [source]\n      };\n\n      if ((_props$position = props.position) !== null && _props$position !== void 0 ? _props$position : 0 !== 0) {\n        player.currentTime = props.position;\n      }\n\n      player.play();\n    }\n  }, [stream, token]);\n  var hide = {\n    display: 'none'\n  };\n  return __jsx(\"div\", {\n    ref: videoPlayer,\n    className: 'spooky-player theoplayer-container video-js theoplayer-skin vjs-16-9 THEOplayer'\n  }, __jsx(\"span\", {\n    id: \"bigPlay\",\n    style: hide\n  }, __jsx(\"svg\", {\n    className: 'big-play',\n    role: \"presentation\"\n  }, __jsx(\"use\", {\n    xlinkHref: \"#icon-play\"\n  }))), __jsx(\"span\", {\n    id: \"spookySpinner\",\n    style: hide\n  }, __jsx(\"svg\", {\n    className: 'spooky-spinner',\n    role: \"presentation\"\n  }, __jsx(\"use\", {\n    xlinkHref: \"#icon-spinner\"\n  }))));\n};\n\nexport default VideoPlayerDefault;","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky.live-ssr/src/components/VideoPlayer/VideoPlayerDefault.tsx"],"names":["React","useEffect","useState","useDispatch","useSelector","videoPlayerStreamRequested","selectVideoPlayerStream","selectVideoPlayerToken","VideoPlayerDefault","props","context","videoPlayer","createRef","undefined","player","setPlayer","token","state","content","stream","dispatch","window","THEOplayer","Player","current","libraryLocation","eventId","videoId","isLive","addEventListener","ev","elapsed","duration","currentTime","onTimeUpdate","bigPlay","querySelector","theoPlay","spookySpinner","theoSpinner","replaceChild","remove","source","src","type","param","timestamp","client_id","vods","data","length","m3u8","live","sources","position","play","hide","display"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { videoPlayerStreamRequested } from '../../services/content/videoPlayer/events';\nimport { IVideoStreamResponse, IVideoTokenResponse } from '../../services/content/videoPlayer/models';\nimport { selectVideoPlayerStream, selectVideoPlayerToken } from '../../services/content/videoPlayer/selectors';\nimport { RootState } from '../../services/RootState';\n\nimport { IVideoPlayerProps } from './VideoPlayer';\n\nconst VideoPlayerDefault: React.FC<IVideoPlayerProps> = (props: IVideoPlayerProps, context: any) => {\n\n    const videoPlayer = React.createRef<HTMLDivElement>();\n\n    const [player, setPlayer] = useState<any>(undefined);\n\n    const token = useSelector<RootState, IVideoTokenResponse | undefined>(state => selectVideoPlayerToken(state.content.videoPlayer))\n    const stream = useSelector<RootState, IVideoStreamResponse | undefined>(state => selectVideoPlayerStream(state.content.videoPlayer))\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        setPlayer(new (window as any).THEOplayer.Player(videoPlayer.current, {\n            libraryLocation: \"https://cdn.myth.theoplayer.com/8cc4421d-4ada-4a2c-8477-341e25036483/\"\n        }));\n    }, [])\n\n    useEffect(() => {\n        if (player !== null && player) {\n            dispatch(videoPlayerStreamRequested(\n                props.eventId,\n                props.videoId,\n                props.isLive\n            ));\n            (player as any).addEventListener('timeupdate', ev => {\n                const elapsed = (player as any).duration === 'Infinity' ? ev.currentTime : (player as any).duration - ev.currentTime;\n                if (props.onTimeUpdate) {\n                    props.onTimeUpdate(elapsed)\n                }\n            });\n            const bigPlay = videoPlayer.current?.querySelector('#bigPlay svg') as any;\n            const theoPlay = videoPlayer.current?.querySelector('.theo-big-play-button-svg-container > svg') as any;\n\n            const spookySpinner = videoPlayer.current?.querySelector('#spookySpinner svg') as any;\n            const theoSpinner = videoPlayer.current?.querySelector('.theo-loading-spinner-rotator') as any;\n\n            videoPlayer.current?.querySelector('.theo-big-play-button-svg-container')\n                ?.replaceChild(bigPlay, theoPlay);\n\n                // videoPlayer.current?.querySelector('.theo-secondary-color.vjs-loading-spinner ')\n                // ?.replaceChild(spookySpinner, theoSpinner);\n\n            videoPlayer.current?.querySelector('.theo-cast-button.theo-chromecast-button.theo-controlbar-button.vjs-control.vjs-button')\n                ?.remove();\n            videoPlayer.current?.querySelector('.theo-cast-button.theo-airplay-button.theo-controlbar-button.vjs-control.vjs-button')\n                ?.remove();\n            \n        }\n    }, [player])\n    useEffect(() => {\n        if (token && stream && (player !== null && player)) {\n            let source: { src: string | undefined, type: string } = {\n                src: undefined,\n                type: 'application/x-mpegurl' // sets type to HLS\n            }\n            let param = `?timestamp=${token.timestamp}&token=${token.token}&clientId=${token.client_id}`;\n            if (stream.vods.data.length > 0) {\n                source.src = `${stream.vods.data[0].data.m3u8}${param}`;\n            } else if (stream.live !== null) {\n                source.src = `${stream.live.m3u8}${param}`;\n            }\n\n            player.source = {\n                sources: [source]\n            };\n            \n            if (props.position ?? 0 !== 0) {\n                player.currentTime = props.position;\n            }\n            player.play();\n        }\n    }, [stream, token])\n\n    const hide = {\n        display: 'none'\n    }\n\n    return (<div\n        ref={videoPlayer}\n        className={'spooky-player theoplayer-container video-js theoplayer-skin vjs-16-9 THEOplayer'}\n    >\n        <span id=\"bigPlay\" style={hide}>\n            <svg className={'big-play'} role=\"presentation\">\n                <use xlinkHref=\"#icon-play\"></use>\n            </svg>\n        </span>\n\n        <span id=\"spookySpinner\" style={hide}>\n            \n            <svg className={'spooky-spinner'} role=\"presentation\">\n                <use xlinkHref=\"#icon-spinner\"></use>\n            </svg>\n        </span>\n\n    </div>)\n}\n\nexport default VideoPlayerDefault;"]},"metadata":{},"sourceType":"module"}