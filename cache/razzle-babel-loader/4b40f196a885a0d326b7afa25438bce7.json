{"ast":null,"code":"import { from, of } from 'rxjs';\nimport { exhaustMap, filter, catchError } from 'rxjs/operators';\nimport { isActionOf } from 'typesafe-actions';\nimport { newsRequestedEvent, newsReceivedEvent, newsErroredEvent } from '../events';\nimport { getNews } from '../api/getNews';\n\nconst newsRequestedEpic = (action$, store) => action$.pipe(filter(isActionOf(newsRequestedEvent)), exhaustMap(event => from(getNews()).pipe(exhaustMap(apiResponse => of(apiResponse.statusCode === 200 ? newsReceivedEvent(apiResponse.data) : newsErroredEvent(apiResponse.data))), catchError(() => of(newsErroredEvent({\n  newsMetaData: [],\n  error: 'Network error',\n  errorDescription: 'Check your network connection'\n}))))));\n\nexport default [newsRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/services/content/news/epics/newsRequestedEpic.ts"],"names":["from","of","exhaustMap","filter","catchError","isActionOf","newsRequestedEvent","newsReceivedEvent","newsErroredEvent","getNews","newsRequestedEpic","action$","store","pipe","event","apiResponse","statusCode","data","newsMetaData","error","errorDescription"],"mappings":"AACA,SAASA,IAAT,EAAeC,EAAf,QAAyB,MAAzB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,UAA7B,QAA+C,gBAA/C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAAyBC,kBAAzB,EAA6CC,iBAA7C,EAAgEC,gBAAhE,QAAwF,WAAxF;AAEA,SAASC,OAAT,QAAwB,gBAAxB;;AAEA,MAAMC,iBAAkE,GAAG,CAACC,OAAD,EAAUC,KAAV,KACzED,OAAO,CAACE,IAAR,CACEV,MAAM,CAACE,UAAU,CAACC,kBAAD,CAAX,CADR,EAEEJ,UAAU,CAACY,KAAK,IACdd,IAAI,CAACS,OAAO,EAAR,CAAJ,CAAgBI,IAAhB,CACEX,UAAU,CAACa,WAAW,IACpBd,EAAE,CAACc,WAAW,CAACC,UAAZ,KAA2B,GAA3B,GAAiCT,iBAAiB,CAACQ,WAAW,CAACE,IAAb,CAAlD,GAAuET,gBAAgB,CAACO,WAAW,CAACE,IAAb,CAAxF,CADM,CADZ,EAIEb,UAAU,CAAC,MAAMH,EAAE,CAACO,gBAAgB,CAAC;AACnCU,EAAAA,YAAY,EAAE,EADqB;AAEnCC,EAAAA,KAAK,EAAE,eAF4B;AAGnCC,EAAAA,gBAAgB,EAAE;AAHiB,CAAD,CAAjB,CAAT,CAJZ,CADQ,CAFZ,CADF;;AAiBA,eAAe,CAACV,iBAAD,CAAf","sourcesContent":["import { Epic } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, filter, catchError } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { NewsEventTypes, newsRequestedEvent, newsReceivedEvent, newsErroredEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport { getNews } from '../api/getNews'\n\nconst newsRequestedEpic: Epic<NewsEventTypes, NewsEventTypes, RootState> = (action$, store) =>\n  action$.pipe(\n    filter(isActionOf(newsRequestedEvent)),\n    exhaustMap(event =>\n      from(getNews()).pipe(\n        exhaustMap(apiResponse => \n          of(apiResponse.statusCode === 200 ? newsReceivedEvent(apiResponse.data) : newsErroredEvent(apiResponse.data))\n        ),\n        catchError(() => of(newsErroredEvent({\n          newsMetaData: [],\n          error: 'Network error',\n          errorDescription: 'Check your network connection'\n        })))\n      )\n    )\n  )\n\nexport default [newsRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}