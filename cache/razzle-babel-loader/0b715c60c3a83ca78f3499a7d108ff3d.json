{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as eventTypes from './eventTypes';\nconst initialState = {\n  isLoading: true,\n  stream: undefined,\n  token: undefined\n};\nconst videoPlayerReducer = createReducer(initialState, {\n  [eventTypes.CONTENT_VIDEO_PLAYER_STREAM_REQUESTED]: () => _objectSpread(_objectSpread({}, initialState), {}, {\n    isLoading: true\n  }),\n  [eventTypes.CONTENT_VIDEO_PLAYER_STREAM_RECEIVED]: (state, action) => {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      stream: action.payload,\n      isLoading: false\n    });\n  },\n  [eventTypes.CONTENT_VIDEO_PLAYER_STREAM_ERRORED]: state => {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      stream: undefined,\n      isLoading: false\n    });\n  },\n  [eventTypes.CONTENT_VIDEO_PLAYER_TOKEN_REQUESTED]: state => {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      isLoading: true\n    });\n  },\n  [eventTypes.CONTENT_VIDEO_PLAYER_TOKEN_RECEIVED]: (state, action) => {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      token: action.payload,\n      isLoading: false\n    });\n  },\n  [eventTypes.CONTENT_VIDEO_PLAYER_TOKEN_ERRORED]: state => {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      isLoading: true\n    });\n  }\n});\nexport default videoPlayerReducer;","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/services/content/videoPlayer/videoPlayerReducer.ts"],"names":["createReducer","eventTypes","initialState","isLoading","stream","undefined","token","videoPlayerReducer","CONTENT_VIDEO_PLAYER_STREAM_REQUESTED","CONTENT_VIDEO_PLAYER_STREAM_RECEIVED","state","action","payload","CONTENT_VIDEO_PLAYER_STREAM_ERRORED","CONTENT_VIDEO_PLAYER_TOKEN_REQUESTED","CONTENT_VIDEO_PLAYER_TOKEN_RECEIVED","CONTENT_VIDEO_PLAYER_TOKEN_ERRORED"],"mappings":";;;;;;AAAA,SAAkBA,aAAlB,QAAsD,kBAAtD;AAIA,OAAO,KAAKC,UAAZ,MAA4B,cAA5B;AAEA,MAAMC,YAA+B,GAAG;AACpCC,EAAAA,SAAS,EAAE,IADyB;AAEpCC,EAAAA,MAAM,EAAEC,SAF4B;AAGpCC,EAAAA,KAAK,EAAED;AAH6B,CAAxC;AAOA,MAAME,kBAA8C,GAAGP,aAAa,CAACE,YAAD,EAAe;AAC/E,GAACD,UAAU,CAACO,qCAAZ,GAAoD,sCAAYN,YAAZ;AAA0BC,IAAAA,SAAS,EAAE;AAArC,IAD2B;AAE/E,GAACF,UAAU,CAACQ,oCAAZ,GAAmD,CAACC,KAAD,EAAQC,MAAR,KAAwD;AACvG,2CAAYD,KAAZ;AAAmBN,MAAAA,MAAM,EAAEO,MAAM,CAACC,OAAlC;AAA2CT,MAAAA,SAAS,EAAE;AAAtD;AACH,GAJ8E;AAK/E,GAACF,UAAU,CAACY,mCAAZ,GAAmDH,KAAD,IAAW;AACzD,2CAAYA,KAAZ;AAAmBN,MAAAA,MAAM,EAAEC,SAA3B;AAAsCF,MAAAA,SAAS,EAAE;AAAjD;AACH,GAP8E;AAQ/E,GAACF,UAAU,CAACa,oCAAZ,GAAoDJ,KAAD,IAAW;AAC1D,2CAAYA,KAAZ;AAAmBP,MAAAA,SAAS,EAAE;AAA9B;AACH,GAV8E;AAW/E,GAACF,UAAU,CAACc,mCAAZ,GAAkD,CAACL,KAAD,EAAQC,MAAR,KAAuD;AACrG,2CAAYD,KAAZ;AAAmBJ,MAAAA,KAAK,EAAEK,MAAM,CAACC,OAAjC;AAA0CT,MAAAA,SAAS,EAAE;AAArD;AACH,GAb8E;AAc/E,GAACF,UAAU,CAACe,kCAAZ,GAAkDN,KAAD,IAAW;AACxD,2CAAYA,KAAZ;AAAmBP,MAAAA,SAAS,EAAE;AAA9B;AACH;AAhB8E,CAAf,CAApE;AAmBA,eAAeI,kBAAf","sourcesContent":["import { Reducer, createReducer, PayloadAction } from '@reduxjs/toolkit';\nimport { IVideoStreamResponse, IVideoPlayerState, IVideoTokenResponse } from './models';\n\nimport { Event } from '../../eventGroups'\nimport * as eventTypes from './eventTypes'\n\nconst initialState: IVideoPlayerState = {\n    isLoading: true,\n    stream: undefined,\n    token: undefined\n}\n\n\nconst videoPlayerReducer: Reducer<IVideoPlayerState> = createReducer(initialState, {\n    [eventTypes.CONTENT_VIDEO_PLAYER_STREAM_REQUESTED]: () => ({ ...initialState, isLoading: true }),\n    [eventTypes.CONTENT_VIDEO_PLAYER_STREAM_RECEIVED]: (state, action: PayloadAction<IVideoStreamResponse>) => {\n        return { ...state, stream: action.payload, isLoading: false }\n    },\n    [eventTypes.CONTENT_VIDEO_PLAYER_STREAM_ERRORED]: (state) => {\n        return { ...state, stream: undefined, isLoading: false }\n    },\n    [eventTypes.CONTENT_VIDEO_PLAYER_TOKEN_REQUESTED]: (state) => {\n        return { ...state, isLoading: true }\n    }, \n    [eventTypes.CONTENT_VIDEO_PLAYER_TOKEN_RECEIVED]: (state, action: PayloadAction<IVideoTokenResponse>) => {\n        return { ...state, token: action.payload, isLoading: false }\n    },\n    [eventTypes.CONTENT_VIDEO_PLAYER_TOKEN_ERRORED]: (state) => {\n        return { ...state, isLoading: true }\n    }\n});\n\nexport default videoPlayerReducer\n"]},"metadata":{},"sourceType":"module"}