{"ast":null,"code":"import { baseUrl } from '../../../shared/baseUrl';\nimport { getHeaders } from '../../../shared/getHeaders';\nexport const getVideoPlayerStream = (eventId, videoId) => {\n  return fetch(`${baseUrl}/v1/videostream/videos/${eventId}${videoId === null || videoId === undefined ? '' : '/' + videoId}`, {\n    method: 'GET',\n    headers: getHeaders()\n  }).then(async response => {\n    let json = await response.json();\n    const data = json.data;\n    return {\n      success: json.success,\n      statusCode: json.statusCode,\n      data,\n      is_success: json.success\n    };\n  });\n};","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/services/content/videoPlayer/api/getVideoPlayerStream.ts"],"names":["baseUrl","getHeaders","getVideoPlayerStream","eventId","videoId","fetch","undefined","method","headers","then","response","json","data","success","statusCode","is_success"],"mappings":"AAAA,SAASA,OAAT,QAAwB,yBAAxB;AACA,SAASC,UAAT,QAA2B,4BAA3B;AAIA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,OAAD,EAA2BC,OAA3B,KAAsG;AACxI,SAAOC,KAAK,CACT,GAAEL,OAAQ,0BAAyBG,OAAQ,GAAGC,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAKE,SAAhC,GAA4C,EAA5C,GAAiD,MAAMF,OAAS,EADrG,EACwG;AAClHG,IAAAA,MAAM,EAAE,KAD0G;AAElHC,IAAAA,OAAO,EAAEP,UAAU;AAF+F,GADxG,CAAL,CAKLQ,IALK,CAKA,MAAOC,QAAP,IAAoB;AACzB,QAAIC,IAAI,GAAG,MAAMD,QAAQ,CAACC,IAAT,EAAjB;AACA,UAAMC,IAAyB,GAAGD,IAAI,CAACC,IAAvC;AACA,WAAO;AAAEC,MAAAA,OAAO,EAAEF,IAAI,CAACE,OAAhB;AAAyBC,MAAAA,UAAU,EAAEH,IAAI,CAACG,UAA1C;AAAsDF,MAAAA,IAAtD;AAA4DG,MAAAA,UAAU,EAAEJ,IAAI,CAACE;AAA7E,KAAP;AACD,GATM,CAAP;AAUD,CAXM","sourcesContent":["import { baseUrl } from '../../../shared/baseUrl'\nimport { getHeaders } from '../../../shared/getHeaders'\nimport { ApiResponse } from '../../../shared/ApiResponse'\nimport { IVideoTokenResponse } from '../models'\n\nexport const getVideoPlayerStream = (eventId: number | string, videoId: number | undefined): Promise<ApiResponse<IVideoTokenResponse>> => {\n  return fetch(\n    `${baseUrl}/v1/videostream/videos/${eventId}${(videoId === null || videoId === undefined ? '' : '/' + videoId)}`, {\n    method: 'GET',\n    headers: getHeaders(),\n  }\n  ).then(async (response) => {\n    let json = await response.json()\n    const data: IVideoTokenResponse = json.data\n    return { success: json.success, statusCode: json.statusCode, data, is_success: json.success }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}