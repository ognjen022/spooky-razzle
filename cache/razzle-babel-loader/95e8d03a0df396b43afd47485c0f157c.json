{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as eventTypes from './eventTypes';\nconst initialState = {\n  id: undefined,\n  error: undefined,\n  errorDescription: undefined,\n  isSubmitting: false\n};\nconst passwordReducer = createReducer(initialState, {\n  [eventTypes.USERSECURITY_PASSWORD_CHANGE_REQUESTED]: state => {\n    return _objectSpread(_objectSpread({}, initialState), {}, {\n      isSubmitting: true\n    });\n  },\n  [eventTypes.USERSECURITY_PASSWORD_CHANGE_RECEIVED]: (state, action) => {\n    const payload = action.payload;\n    return _objectSpread(_objectSpread({}, payload), {}, {\n      isSubmitting: false\n    });\n  },\n  [eventTypes.USERSECURITY_PASSWORD_CHANGE_ERRORED]: (state, action) => {\n    const payload = action.payload;\n    return _objectSpread(_objectSpread({}, payload), {}, {\n      isSubmitting: false\n    });\n  }\n});\nexport default passwordReducer;","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky-live-ssr/ui/src/services/userSecurity/password/passwordReducer.ts"],"names":["createReducer","eventTypes","initialState","id","undefined","error","errorDescription","isSubmitting","passwordReducer","USERSECURITY_PASSWORD_CHANGE_REQUESTED","state","USERSECURITY_PASSWORD_CHANGE_RECEIVED","action","payload","USERSECURITY_PASSWORD_CHANGE_ERRORED"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAAsD,kBAAtD;AAGA,OAAO,KAAKC,UAAZ,MAA4B,cAA5B;AAEA,MAAMC,YAA2B,GAAG;AAClCC,EAAAA,EAAE,EAAEC,SAD8B;AAElCC,EAAAA,KAAK,EAAED,SAF2B;AAGlCE,EAAAA,gBAAgB,EAAEF,SAHgB;AAIlCG,EAAAA,YAAY,EAAE;AAJoB,CAApC;AAOA,MAAMC,eAAuC,GAAGR,aAAa,CAACE,YAAD,EAAe;AAC1E,GAACD,UAAU,CAACQ,sCAAZ,GAAsDC,KAAD,IAAW;AAC9D,2CAAYR,YAAZ;AAA0BK,MAAAA,YAAY,EAAE;AAAxC;AACD,GAHyE;AAI1E,GAACN,UAAU,CAACU,qCAAZ,GAAoD,CAACD,KAAD,EAAQE,MAAR,KAAyD;AAC3G,UAAMC,OAAO,GAAGD,MAAM,CAACC,OAAvB;AACA,2CAAYA,OAAZ;AAAqBN,MAAAA,YAAY,EAAE;AAAnC;AACD,GAPyE;AAQ1E,GAACN,UAAU,CAACa,oCAAZ,GAAmD,CAACJ,KAAD,EAAQE,MAAR,KAAyD;AAC1G,UAAMC,OAAO,GAAGD,MAAM,CAACC,OAAvB;AACA,2CAAYA,OAAZ;AAAqBN,MAAAA,YAAY,EAAE;AAAnC;AACD;AAXyE,CAAf,CAA7D;AAcA,eAAeC,eAAf","sourcesContent":["import { createReducer, PayloadAction, Reducer } from '@reduxjs/toolkit'\nimport { PasswordState, PasswordResetResponse } from './models'\n\nimport * as eventTypes from './eventTypes'\n\nconst initialState: PasswordState = {\n  id: undefined,\n  error: undefined,\n  errorDescription: undefined,\n  isSubmitting: false\n}\n\nconst passwordReducer: Reducer<PasswordState> = createReducer(initialState, {\n  [eventTypes.USERSECURITY_PASSWORD_CHANGE_REQUESTED]: (state) => {\n    return { ...initialState, isSubmitting: true }\n  },\n  [eventTypes.USERSECURITY_PASSWORD_CHANGE_RECEIVED]: (state, action: PayloadAction<PasswordResetResponse>) => {\n    const payload = action.payload\n    return { ...payload, isSubmitting: false }\n  },\n  [eventTypes.USERSECURITY_PASSWORD_CHANGE_ERRORED]: (state, action: PayloadAction<PasswordResetResponse>) => {\n    const payload = action.payload\n    return { ...payload, isSubmitting: false }\n  },\n})\n\nexport default passwordReducer"]},"metadata":{},"sourceType":"module"}