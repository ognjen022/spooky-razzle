{"ast":null,"code":"import { from, of } from 'rxjs';\nimport { exhaustMap, filter, catchError } from 'rxjs/operators';\nimport { isActionOf } from 'typesafe-actions';\nimport { signupRequestedEvent, signupReceivedEvent, signupErroredEvent } from '../events';\nimport { postUserSecuritySignup } from '../api/postUserSecuritySignup';\nimport { tokenRequestedEvent } from '../../token/events';\n\nvar signupRequestedEpic = function signupRequestedEpic(action$, store) {\n  return action$.pipe(filter(isActionOf(signupRequestedEvent)), exhaustMap(function (event) {\n    return from(postUserSecuritySignup(event.payload.firstname, event.payload.lastname, event.payload.email, event.payload.password, event.payload.join)).pipe(exhaustMap(function (apiResponse) {\n      if (apiResponse.statusCode === 200) {\n        return of(signupReceivedEvent(apiResponse.data), tokenRequestedEvent({\n          username: event.payload.email,\n          password: event.payload.password,\n          redirectTo: ''\n        }));\n      }\n\n      return of(signupErroredEvent(apiResponse.data));\n    }), catchError(function () {\n      return of(signupErroredEvent({\n        id: undefined,\n        error: 'Network error',\n        errorDescription: 'Check your network connection'\n      }));\n    }));\n  }));\n};\n\nexport default [signupRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky.live-ssr/src/services/userSecurity/signup/epics/signupRequestedEpic.ts"],"names":["from","of","exhaustMap","filter","catchError","isActionOf","signupRequestedEvent","signupReceivedEvent","signupErroredEvent","postUserSecuritySignup","tokenRequestedEvent","signupRequestedEpic","action$","store","pipe","event","payload","firstname","lastname","email","password","join","apiResponse","statusCode","data","username","redirectTo","id","undefined","error","errorDescription"],"mappings":"AACA,SAASA,IAAT,EAAeC,EAAf,QAAyB,MAAzB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,UAA7B,QAA+C,gBAA/C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAA2BC,oBAA3B,EAAiDC,mBAAjD,EAAsEC,kBAAtE,QAAgG,WAAhG;AAEA,SAASC,sBAAT,QAAuC,+BAAvC;AACA,SAASC,mBAAT,QAAoC,oBAApC;;AAEA,IAAMC,mBAA8C,GAAG,SAAjDA,mBAAiD,CAACC,OAAD,EAAUC,KAAV;AAAA,SACrDD,OAAO,CAACE,IAAR,CACEX,MAAM,CAACE,UAAU,CAACC,oBAAD,CAAX,CADR,EAEEJ,UAAU,CAAC,UAACa,KAAD;AAAA,WACTf,IAAI,CAACS,sBAAsB,CAACM,KAAK,CAACC,OAAN,CAAcC,SAAf,EAA0BF,KAAK,CAACC,OAAN,CAAcE,QAAxC,EAAkDH,KAAK,CAACC,OAAN,CAAcG,KAAhE,EAAuEJ,KAAK,CAACC,OAAN,CAAcI,QAArF,EAA+FL,KAAK,CAACC,OAAN,CAAcK,IAA7G,CAAvB,CAAJ,CAA+IP,IAA/I,CACEZ,UAAU,CAAC,UAAAoB,WAAW,EAAI;AACxB,UAAIA,WAAW,CAACC,UAAZ,KAA2B,GAA/B,EAAoC;AAClC,eAAOtB,EAAE,CACPM,mBAAmB,CAACe,WAAW,CAACE,IAAb,CADZ,EAEPd,mBAAmB,CAAC;AAClBe,UAAAA,QAAQ,EAAEV,KAAK,CAACC,OAAN,CAAcG,KADN;AAElBC,UAAAA,QAAQ,EAAEL,KAAK,CAACC,OAAN,CAAcI,QAFN;AAGlBM,UAAAA,UAAU,EAAE;AAHM,SAAD,CAFZ,CAAT;AAQD;;AACD,aAAOzB,EAAE,CAACO,kBAAkB,CAACc,WAAW,CAACE,IAAb,CAAnB,CAAT;AACD,KAZS,CADZ,EAcEpB,UAAU,CAAC;AAAA,aAAMH,EAAE,CAACO,kBAAkB,CAAC;AACrCmB,QAAAA,EAAE,EAAEC,SADiC;AAErCC,QAAAA,KAAK,EAAE,eAF8B;AAGrCC,QAAAA,gBAAgB,EAAE;AAHmB,OAAD,CAAnB,CAAR;AAAA,KAAD,CAdZ,CADS;AAAA,GAAD,CAFZ,CADqD;AAAA,CAAvD;;AA2BA,eAAe,CAACnB,mBAAD,CAAf","sourcesContent":["import { Epic } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, filter, catchError } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { SignupEventTypes, signupRequestedEvent, signupReceivedEvent, signupErroredEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport { postUserSecuritySignup } from '../api/postUserSecuritySignup'\nimport { tokenRequestedEvent } from '../../token/events'\n\nconst signupRequestedEpic: Epic<any, any, RootState> = (action$, store) =>\n  action$.pipe(\n    filter(isActionOf(signupRequestedEvent)),\n    exhaustMap((event) =>\n      from(postUserSecuritySignup(event.payload.firstname, event.payload.lastname, event.payload.email, event.payload.password, event.payload.join)).pipe(\n        exhaustMap(apiResponse => {\n          if (apiResponse.statusCode === 200) {\n            return of(\n              signupReceivedEvent(apiResponse.data),\n              tokenRequestedEvent({\n                username: event.payload.email,\n                password: event.payload.password,\n                redirectTo: ''\n              })\n            )\n          }\n          return of(signupErroredEvent(apiResponse.data))\n        }),\n        catchError(() => of(signupErroredEvent({\n          id: undefined,\n          error: 'Network error',\n          errorDescription: 'Check your network connection'\n        })))\n      )\n    )\n  )\n\nexport default [signupRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}