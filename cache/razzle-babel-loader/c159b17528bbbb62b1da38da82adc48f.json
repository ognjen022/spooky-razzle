{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducer } from '@reduxjs/toolkit';\nimport moment from 'moment';\nimport * as eventTypes from './eventTypes';\nimport { deleteTokens } from '../../shared/tokenLocalStorage';\nconst initialState = {\n  signIn: {\n    accessToken: undefined,\n    expiresIn: 0,\n    expiry: undefined,\n    idToken: undefined,\n    scope: undefined,\n    tokenType: undefined,\n    error: undefined,\n    errorDescription: undefined,\n    isSubmitting: false\n  },\n  forgotPassword: {\n    email: undefined,\n    error: undefined,\n    errorDescription: undefined,\n    isSubmitting: false\n  }\n};\nconst tokenReducer = createReducer(initialState, {\n  // Reset Password Event Handlers\n  [eventTypes.USERSECURITY_TOKEN_FORGOT_PASSWORD_REQUESTED]: () => {\n    let signIn = initialState.signIn;\n    let forgotPassword = initialState.forgotPassword;\n    let result = {\n      signIn: _objectSpread({}, signIn),\n      forgotPassword: _objectSpread(_objectSpread({}, forgotPassword), {}, {\n        isSubmitting: true\n      })\n    };\n    return result;\n  },\n  [eventTypes.USERSECURITY_TOKEN_FORGOT_PASSWORD_RECEIVED]: (state, event) => {\n    let signIn = initialState.signIn;\n    let result = {\n      signIn: _objectSpread({}, signIn),\n      forgotPassword: _objectSpread(_objectSpread({}, event.payload), {}, {\n        error: 'Email sent.',\n        isSubmitting: false,\n        email: state.forgotPassword.email\n      })\n    };\n    return result;\n  },\n  [eventTypes.USERSECURITY_TOKEN_FORGOT_PASSWORD_ERRORED]: (state, event) => {\n    let signIn = initialState.signIn;\n    let result = {\n      signIn: _objectSpread({}, signIn),\n      forgotPassword: _objectSpread(_objectSpread({}, event.payload), {}, {\n        isSubmitting: false,\n        email: state.forgotPassword.email\n      })\n    };\n    return result;\n  },\n  // SignIn Event Handlers\n  [eventTypes.USERSECURITY_TOKEN_REQUESTED]: () => {\n    let signIn = initialState.signIn;\n    let forgotPassword = initialState.forgotPassword;\n    let result = {\n      signIn: _objectSpread(_objectSpread({}, signIn), {}, {\n        isSubmitting: true\n      }),\n      forgotPassword: _objectSpread({}, forgotPassword)\n    };\n    return result;\n  },\n  [eventTypes.USERSECURITY_TOKEN_RECEIVED]: (state, event) => {\n    const expiry = moment().add(event.payload['expires_in'], 's').toDate();\n    let forgotPassword = initialState.forgotPassword;\n    const result = {\n      signIn: _objectSpread(_objectSpread({}, event.payload), {}, {\n        expiry,\n        isSubmitting: false\n      }),\n      forgotPassword: _objectSpread({}, forgotPassword)\n    };\n    return result;\n  },\n  [eventTypes.USERSECURITY_TOKEN_ERRORED]: (state, event) => {\n    let forgotPassword = initialState.forgotPassword; // console.log('USERSECURITY_TOKEN_ERRORED event', event)\n\n    const result = {\n      signIn: _objectSpread(_objectSpread({}, event.payload), {}, {\n        expiry: undefined,\n        isSubmitting: false\n      }),\n      forgotPassword: _objectSpread({}, forgotPassword)\n    };\n    return result;\n  },\n  [eventTypes.USERSECURITY_TOKEN_REFRESH_REQUESTED]: () => {\n    let signIn = initialState.signIn;\n    let forgotPassword = initialState.forgotPassword;\n    let result = {\n      signIn: _objectSpread({}, signIn),\n      forgotPassword: _objectSpread({}, forgotPassword)\n    };\n    return result;\n  },\n  // SignOut Event Handlers \n  [eventTypes.USERSECURITY_TOKEN_REMOVED]: () => {\n    // TODO: move to epic\n    deleteTokens();\n\n    let result = _objectSpread({}, initialState);\n\n    return result;\n  },\n  ['TOKEN_PERSIST']: state => _objectSpread({}, state)\n});\nexport default tokenReducer;","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky-live-ssr/ui/src/services/userSecurity/token/tokenReducer.ts"],"names":["createReducer","moment","eventTypes","deleteTokens","initialState","signIn","accessToken","undefined","expiresIn","expiry","idToken","scope","tokenType","error","errorDescription","isSubmitting","forgotPassword","email","tokenReducer","USERSECURITY_TOKEN_FORGOT_PASSWORD_REQUESTED","result","USERSECURITY_TOKEN_FORGOT_PASSWORD_RECEIVED","state","event","payload","USERSECURITY_TOKEN_FORGOT_PASSWORD_ERRORED","USERSECURITY_TOKEN_REQUESTED","USERSECURITY_TOKEN_RECEIVED","add","toDate","USERSECURITY_TOKEN_ERRORED","USERSECURITY_TOKEN_REFRESH_REQUESTED","USERSECURITY_TOKEN_REMOVED"],"mappings":"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","sourcesContent":["import { createReducer, Reducer, PayloadAction } from '@reduxjs/toolkit'\nimport { TokenState, TokenResponse, TokenPasswordResetResponse } from './models'\nimport moment from 'moment'\n\nimport * as eventTypes from './eventTypes'\nimport { deleteTokens } from '../../shared/tokenLocalStorage'\n\nconst initialState: TokenState = {\n  signIn: {\n    accessToken: undefined,\n    expiresIn: 0,\n    expiry: undefined,\n    idToken: undefined,\n    scope: undefined,\n    tokenType: undefined,\n    error: undefined,\n    errorDescription: undefined,\n    isSubmitting: false\n  },\n  forgotPassword: {\n    email: undefined,\n    error: undefined,\n    errorDescription: undefined,\n    isSubmitting: false\n  }\n}\n\nconst tokenReducer: Reducer<TokenState> = createReducer(initialState, {\n  // Reset Password Event Handlers\n  [eventTypes.USERSECURITY_TOKEN_FORGOT_PASSWORD_REQUESTED]: () => {\n    let signIn = initialState.signIn\n    let forgotPassword = initialState.forgotPassword\n    let result = {\n      signIn: { ...signIn },\n      forgotPassword: { ...forgotPassword, isSubmitting: true }\n    }\n    return result\n  },\n  [eventTypes.USERSECURITY_TOKEN_FORGOT_PASSWORD_RECEIVED]: (state, event: PayloadAction<TokenPasswordResetResponse>) => {\n    let signIn = initialState.signIn\n    let result = {\n      signIn: { ...signIn },\n      forgotPassword: {\n        ...event.payload,\n        error: 'Email sent.',\n        isSubmitting: false,\n        email: state.forgotPassword.email\n      }\n    }\n    return result\n  },\n  [eventTypes.USERSECURITY_TOKEN_FORGOT_PASSWORD_ERRORED]: (state, event: PayloadAction<any>) => {\n    let signIn = initialState.signIn\n    let result = {\n      signIn: { ...signIn },\n      forgotPassword: {\n        ...event.payload,\n        isSubmitting: false,\n        email: state.forgotPassword.email\n      }\n    }\n    return result\n\n  },\n\n  // SignIn Event Handlers\n  [eventTypes.USERSECURITY_TOKEN_REQUESTED]: () => {\n    let signIn = initialState.signIn\n    let forgotPassword = initialState.forgotPassword\n    let result = {\n      signIn: { ...signIn, isSubmitting: true },\n      forgotPassword: { ...forgotPassword }\n    }\n    return result\n  },\n  [eventTypes.USERSECURITY_TOKEN_RECEIVED]: (state, event: PayloadAction<TokenResponse>) => {\n    const expiry: Date = moment().add(event.payload['expires_in'], 's').toDate()\n    \n    let forgotPassword = initialState.forgotPassword\n    const result = {\n      signIn: {\n        ...event.payload,\n        expiry,\n        isSubmitting: false\n      },\n      forgotPassword: { ...forgotPassword }\n    }\n    return result\n  },\n  [eventTypes.USERSECURITY_TOKEN_ERRORED]: (state, event: PayloadAction<TokenResponse>) => {\n    let forgotPassword = initialState.forgotPassword\n    // console.log('USERSECURITY_TOKEN_ERRORED event', event)\n    const result = {\n      signIn: {\n        ...event.payload,\n        expiry: undefined,\n        isSubmitting: false\n      },\n      forgotPassword: { ...forgotPassword }\n    }\n    return result\n  },\n  [eventTypes.USERSECURITY_TOKEN_REFRESH_REQUESTED]: () => {\n    let signIn = initialState.signIn\n    let forgotPassword = initialState.forgotPassword\n    let result = {\n      signIn: { ...signIn },\n      forgotPassword: { ...forgotPassword }\n    }\n    return result\n  },\n  // SignOut Event Handlers \n  [eventTypes.USERSECURITY_TOKEN_REMOVED]: () => {\n\n    // TODO: move to epic\n    deleteTokens()\n\n    let result = { ...initialState }\n    return result\n  },\n  ['TOKEN_PERSIST']: (state) => ({...state})\n})\n\nexport default tokenReducer\n"]},"metadata":{},"sourceType":"module"}