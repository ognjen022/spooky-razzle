{"ast":null,"code":"import { accountToggleLoginEvent, executeCallbackEvent, accountToggleSignupEvent, accountToggleWelcomeEvent } from './../../accountDetails/events';\nimport { of } from 'rxjs';\nimport { filter, mergeMap, tap } from 'rxjs/operators';\nimport { isActionOf } from 'typesafe-actions';\nimport { tokenReceivedEvent } from '../events';\nimport { profileRequestedEvent } from '../../profile/events';\nimport { setAccessToken, setRefreshToken } from '../../../shared/tokenLocalStorage';\nimport { subscriptionDetailsRequestedEvent } from '../../../payments/subscriptions/events';\nimport _ from 'lodash';\n\nconst saveTokenToLocalStorage = token => {\n  // normal login returns token.access_token\n  // google login returns token.accessToken\n  const accessToken = token.accessToken || token['access_token'] || '';\n  const refreshToken = token.refreshToken || token['refresh_token'] || '';\n\n  if (accessToken) {\n    setAccessToken(accessToken);\n  }\n\n  if (refreshToken) {\n    setRefreshToken(refreshToken);\n  }\n};\n\nconst isPurchaseModalFreeToWatch = (state, streams) => {\n  if (state.showModal && state.eventId) {\n    const stream = _.find(streams, item => {\n      return item.eventId === state.eventId;\n    });\n\n    if (stream && stream.isFreeToWatch) return true;\n  } //if (eventId)\n\n\n  return false;\n};\n\nconst tokenReceivedEpic = (action$, state$) => action$.pipe(filter(isActionOf(tokenReceivedEvent)), tap(action => saveTokenToLocalStorage(action.payload)), mergeMap(action => {\n  // sign up should show welcome page\n  if (state$.value.userSecurity.accountDetails.showSignup) {\n    return of(profileRequestedEvent(), subscriptionDetailsRequestedEvent(), accountToggleSignupEvent(), accountToggleWelcomeEvent() // executeCallbackEvent()\n    );\n  }\n\n  return of(profileRequestedEvent(), subscriptionDetailsRequestedEvent(), accountToggleLoginEvent(), executeCallbackEvent());\n}));\n\nexport default [tokenReceivedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/services/userSecurity/token/epics/tokenReceivedEpic.ts"],"names":["accountToggleLoginEvent","executeCallbackEvent","accountToggleSignupEvent","accountToggleWelcomeEvent","of","filter","mergeMap","tap","isActionOf","tokenReceivedEvent","profileRequestedEvent","setAccessToken","setRefreshToken","subscriptionDetailsRequestedEvent","_","saveTokenToLocalStorage","token","accessToken","refreshToken","isPurchaseModalFreeToWatch","state","streams","showModal","eventId","stream","find","item","isFreeToWatch","tokenReceivedEpic","action$","state$","pipe","action","payload","value","userSecurity","accountDetails","showSignup"],"mappings":"AAAA,SAASA,uBAAT,EAAkCC,oBAAlC,EAAwDC,wBAAxD,EAAkFC,yBAAlF,QAAmH,+BAAnH;AAEA,SAASC,EAAT,QAAmB,MAAnB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,GAA3B,QAAsC,gBAAtC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,SAASC,kBAAT,QAAmC,WAAnC;AAGA,SAASC,qBAAT,QAAsC,sBAAtC;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,mCAAhD;AACA,SAASC,iCAAT,QAAkD,wCAAlD;AAIA,OAAOC,CAAP,MAAc,QAAd;;AAEA,MAAMC,uBAAuB,GAAIC,KAAD,IAA0B;AAExD;AACA;AACA,QAAMC,WAAW,GAAGD,KAAK,CAACC,WAAN,IAAqBD,KAAK,CAAC,cAAD,CAA1B,IAA8C,EAAlE;AACA,QAAME,YAAY,GAAGF,KAAK,CAACE,YAAN,IAAsBF,KAAK,CAAC,eAAD,CAA3B,IAAgD,EAArE;;AAEA,MAAIC,WAAJ,EAAiB;AACfN,IAAAA,cAAc,CAACM,WAAD,CAAd;AACD;;AAED,MAAIC,YAAJ,EAAkB;AAChBN,IAAAA,eAAe,CAACM,YAAD,CAAf;AACD;AACF,CAdD;;AAgBA,MAAMC,0BAA0B,GAAG,CAACC,KAAD,EAAuBC,OAAvB,KAAuD;AACxF,MAAID,KAAK,CAACE,SAAN,IAAmBF,KAAK,CAACG,OAA7B,EAAsC;AACpC,UAAMC,MAA2B,GAAGV,CAAC,CAACW,IAAF,CAAOJ,OAAP,EAAiBK,IAAD,IAAmB;AACrE,aAAOA,IAAI,CAACH,OAAL,KAAiBH,KAAK,CAACG,OAA9B;AACD,KAFmC,CAApC;;AAGA,QAAIC,MAAM,IAAIA,MAAM,CAACG,aAArB,EAAoC,OAAO,IAAP;AACrC,GANuF,CAOxF;;;AACA,SAAO,KAAP;AACD,CATD;;AAYA,MAAMC,iBAA4C,GAAG,CAACC,OAAD,EAAUC,MAAV,KACnDD,OAAO,CAACE,IAAR,CACE1B,MAAM,CAACG,UAAU,CAACC,kBAAD,CAAX,CADR,EAEEF,GAAG,CAACyB,MAAM,IAAIjB,uBAAuB,CAACiB,MAAM,CAACC,OAAR,CAAlC,CAFL,EAGE3B,QAAQ,CAAC0B,MAAM,IAAI;AAEjB;AACA,MAAIF,MAAM,CAACI,KAAP,CAAaC,YAAb,CAA0BC,cAA1B,CAAyCC,UAA7C,EAAyD;AAEvD,WAAOjC,EAAE,CACPM,qBAAqB,EADd,EAEPG,iCAAiC,EAF1B,EAGPX,wBAAwB,EAHjB,EAIPC,yBAAyB,EAJlB,CAKP;AALO,KAAT;AAOD;;AAED,SAAOC,EAAE,CACPM,qBAAqB,EADd,EAEPG,iCAAiC,EAF1B,EAGPb,uBAAuB,EAHhB,EAIPC,oBAAoB,EAJb,CAAT;AAQD,CAtBO,CAHV,CADF;;AA6BA,eAAe,CAAC2B,iBAAD,CAAf","sourcesContent":["import { accountToggleLoginEvent, executeCallbackEvent, accountToggleSignupEvent, accountToggleWelcomeEvent } from './../../accountDetails/events';\nimport { Epic } from 'redux-observable'\nimport { of } from 'rxjs'\nimport { filter, mergeMap, tap } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { goBack, push } from 'connected-react-router'\nimport { tokenReceivedEvent } from '../events'\nimport { TokenResponse } from '../models'\nimport { RootState } from '../../../RootState'\nimport { profileRequestedEvent } from '../../profile/events'\nimport { setAccessToken, setRefreshToken } from '../../../shared/tokenLocalStorage'\nimport { subscriptionDetailsRequestedEvent } from '../../../payments/subscriptions/events'\nimport { showPurchaseModalToggledEvent } from '../../../payments/purchase/events'\nimport { PurchaseState } from '../../../payments/purchase/models'\nimport { IStream } from '../../../content/tags/models'\nimport _ from 'lodash'\n\nconst saveTokenToLocalStorage = (token: TokenResponse) => {\n\n  // normal login returns token.access_token\n  // google login returns token.accessToken\n  const accessToken = token.accessToken || token['access_token'] || ''\n  const refreshToken = token.refreshToken || token['refresh_token'] || ''\n\n  if (accessToken) {\n    setAccessToken(accessToken)\n  }\n\n  if (refreshToken) {\n    setRefreshToken(refreshToken)\n  }\n}\n\nconst isPurchaseModalFreeToWatch = (state: PurchaseState, streams: IStream[]): boolean => {\n  if (state.showModal && state.eventId) {\n    const stream: IStream | undefined = _.find(streams, (item: IStream) => {\n      return item.eventId === state.eventId\n    })\n    if (stream && stream.isFreeToWatch) return true\n  }\n  //if (eventId)\n  return false\n}\n\n\nconst tokenReceivedEpic: Epic<any, any, RootState> = (action$, state$) =>\n  action$.pipe(\n    filter(isActionOf(tokenReceivedEvent)),\n    tap(action => saveTokenToLocalStorage(action.payload)),\n    mergeMap(action => {\n\n      // sign up should show welcome page\n      if (state$.value.userSecurity.accountDetails.showSignup) {\n\n        return of(\n          profileRequestedEvent(),\n          subscriptionDetailsRequestedEvent(),\n          accountToggleSignupEvent(),\n          accountToggleWelcomeEvent(),\n          // executeCallbackEvent()\n        )\n      }\n      \n      return of(\n        profileRequestedEvent(),\n        subscriptionDetailsRequestedEvent(),\n        accountToggleLoginEvent(),\n        executeCallbackEvent()\n      )\n\n      \n    })\n  )\n\nexport default [tokenReceivedEpic]\n"]},"metadata":{},"sourceType":"module"}