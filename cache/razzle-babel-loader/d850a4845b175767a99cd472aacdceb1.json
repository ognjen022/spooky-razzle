{"ast":null,"code":"import { getConfiguration } from './../api/getConfiguration';\nimport { from, of } from 'rxjs';\nimport { exhaustMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { configReceivedEvent, configErroredEvent } from '../events';\nimport * as configurationEventTypes from '../eventTypes';\n\nconst getConfiugratioRequestedEpic = action$ => action$.pipe(ofType(configurationEventTypes.CONFIG_REQUESTED), exhaustMap(event => from(getConfiguration()).pipe(exhaustMap(apiResponse => of(apiResponse.is_success ? configReceivedEvent(apiResponse.data) : configErroredEvent(apiResponse.data))), catchError(() => of(configErroredEvent({\n  streams: undefined,\n  error: 'Network error',\n  errorDescription: 'Check your network connection'\n}))))));\n\nexport default [getConfiugratioRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky.live-ssr/src/services/config/epic/getConfiugratioRequestedEpic.ts"],"names":["getConfiguration","from","of","exhaustMap","catchError","ofType","configReceivedEvent","configErroredEvent","configurationEventTypes","getConfiugratioRequestedEpic","action$","pipe","CONFIG_REQUESTED","event","apiResponse","is_success","data","streams","undefined","error","errorDescription"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,2BAAjC;AAEA,SAASC,IAAT,EAAeC,EAAf,QAAyB,MAAzB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,gBAAvC;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,mBAAT,EAA8BC,kBAA9B,QAAwD,WAAxD;AAEA,OAAO,KAAKC,uBAAZ,MAAyC,eAAzC;;AAEA,MAAMC,4BAAuD,GAAIC,OAAD,IAC9DA,OAAO,CAACC,IAAR,CACEN,MAAM,CAACG,uBAAuB,CAACI,gBAAzB,CADR,EAEET,UAAU,CAACU,KAAK,IACdZ,IAAI,CAACD,gBAAgB,EAAjB,CAAJ,CAAyBW,IAAzB,CACER,UAAU,CAACW,WAAW,IAClBZ,EAAE,CAACY,WAAW,CAACC,UAAZ,GAAyBT,mBAAmB,CAACQ,WAAW,CAACE,IAAb,CAA5C,GAAiET,kBAAkB,CAACO,WAAW,CAACE,IAAb,CAApF,CADI,CADZ,EAKEZ,UAAU,CAAC,MAAMF,EAAE,CAACK,kBAAkB,CAAC;AACrCU,EAAAA,OAAO,EAAEC,SAD4B;AAErCC,EAAAA,KAAK,EAAE,eAF8B;AAGrCC,EAAAA,gBAAgB,EAAE;AAHmB,CAAD,CAAnB,CAAT,CALZ,CADQ,CAFZ,CADF;;AAkBA,eAAe,CAACX,4BAAD,CAAf","sourcesContent":["import { getConfiguration } from './../api/getConfiguration';\nimport { Epic } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, catchError } from 'rxjs/operators'\nimport { ofType } from 'redux-observable'\nimport { configReceivedEvent, configErroredEvent } from '../events'\nimport { RootState } from '../../RootState'\nimport * as configurationEventTypes from '../eventTypes'\n\nconst getConfiugratioRequestedEpic: Epic<any, any, RootState> = (action$) =>\n  action$.pipe(\n    ofType(configurationEventTypes.CONFIG_REQUESTED),\n    exhaustMap(event =>\n      from(getConfiguration()).pipe(\n        exhaustMap(apiResponse => \n            of(apiResponse.is_success ? configReceivedEvent(apiResponse.data) : configErroredEvent(apiResponse.data))\n        \n        ),\n        catchError(() => of(configErroredEvent({\n          streams: undefined,\n          error: 'Network error',\n          errorDescription: 'Check your network connection'\n        })))\n      )\n    )\n  )\n\nexport default [getConfiugratioRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}