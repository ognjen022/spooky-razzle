{"ast":null,"code":"import { selectGamePassPriceFormatted } from './../../products/selectors';\nimport { ofType } from 'redux-observable';\nimport { from, of } from 'rxjs';\nimport { exhaustMap, catchError } from 'rxjs/operators';\nimport { purchaseTagErroredEvent, purchaseTagReceivedEvent } from '../events';\nimport { postPurchaseEvent } from '../api/postPurchaseEvent';\nimport * as eventTypes from '../eventTypes';\nimport Notifications from 'react-notification-system-redux';\nimport { tagsSaveStreamEvent } from '../../../content/tags/events';\nimport { selectTag } from '../../../content/tags/selectors';\nimport * as _ from 'lodash';\nimport { tokenRefreshTokenRequestedEvent } from '../../../userSecurity/token/events';\n\nconst getSuccessNotification = () => {\n  return Notifications.success({\n    title: 'Payment succeeded',\n    message: 'Enjoy your purchase',\n    position: 'tc',\n    autoDismiss: 10,\n    action: {\n      label: 'Close',\n      callback: () => console.log('Notification closed')\n    }\n  });\n};\n\nconst getErrorNotification = error => {\n  return Notifications.error({\n    title: 'Payment failed',\n    message: `An error occurred ${error}`,\n    position: 'tc',\n    autoDismiss: 10,\n    action: {\n      label: 'Close',\n      callback: () => console.log('Notification closed')\n    }\n  });\n};\n\nconst lookupLivestreamEventId = (streams, eventId) => {\n  const match = _.find(streams, stream => stream.eventId === eventId);\n\n  if (match && match.videoStreams && match.videoStreams.length > 0) {\n    return match.videoStreams[0].liveStreamEventId;\n  }\n\n  return '';\n};\n\nconst purchaseEventRequestedEpic = (action$, state$) => action$.pipe(ofType(eventTypes.PAYMENTS_PURCHASE_GAMEPASS_REQUESTED), exhaustMap(() => from(postPurchaseEvent(lookupLivestreamEventId(state$.value.content.tags.streams || [], state$.value.payments.purchase.eventId), {\n  _id: 1,\n  token: state$.value.payments.paymentDetails.token.id,\n  brand: state$.value.payments.paymentDetails.token.card.brand,\n  last4: state$.value.payments.paymentDetails.token.card.last4,\n  expiry_year: state$.value.payments.paymentDetails.token.card.exp_year,\n  expiry_month: state$.value.payments.paymentDetails.token.card.exp_month\n})).pipe(exhaustMap(apiResponse => {\n  if (apiResponse.is_success) {\n    var _state$$value$payment;\n\n    const tagId = state$.value.payments.purchase.tagId;\n    const tag = selectTag(state$.value, tagId);\n    let livestreamEventId = lookupLivestreamEventId(state$.value.content.tags.streams || [], state$.value.payments.purchase.eventId);\n    const gamePassPriceFormatted = selectGamePassPriceFormatted((_state$$value$payment = state$.value.payments) === null || _state$$value$payment === void 0 ? void 0 : _state$$value$payment.products, state$.value.configuration);\n\n    try {\n      let data = {\n        'event': 'transaction',\n        'ecommerce': {\n          'purchase': {\n            'actionField': {\n              'id': livestreamEventId,\n              'affiliation': 'Game Pass',\n              'revenue': gamePassPriceFormatted,\n              'tax': '$0.00',\n              'shipping': '$0.00',\n              'coupon': ''\n            },\n            'products': [{\n              'name': `GAME PASS - ${livestreamEventId}`,\n              'id': livestreamEventId,\n              'price': gamePassPriceFormatted,\n              'brand': '',\n              'category': '',\n              'variant': '',\n              'quantity': 1,\n              'coupon': ''\n            }]\n          }\n        }\n      };\n      window.dataLayer.push(data);\n    } catch (err) {\n      console.log('purchaseEventRequestedEpic dataLayer push error', err);\n    }\n\n    return of(tokenRefreshTokenRequestedEvent(), purchaseTagReceivedEvent((tag === null || tag === void 0 ? void 0 : tag.path) || ''), getSuccessNotification(), tagsSaveStreamEvent(state$.value.payments.purchase.eventId || 0)); // todo: saved already this will unsave\n  } else {\n    return of(purchaseTagErroredEvent(apiResponse.data), getErrorNotification(apiResponse.data));\n  }\n}), catchError(() => of(purchaseTagErroredEvent({\n  id: undefined,\n  error: 'Network error',\n  errorDescription: 'Check your internet connection'\n}))))));\n\nexport default [purchaseEventRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/services/payments/purchase/epics/purchaseEventRequestedEpic.ts"],"names":["selectGamePassPriceFormatted","ofType","from","of","exhaustMap","catchError","purchaseTagErroredEvent","purchaseTagReceivedEvent","postPurchaseEvent","eventTypes","Notifications","tagsSaveStreamEvent","selectTag","_","tokenRefreshTokenRequestedEvent","getSuccessNotification","success","title","message","position","autoDismiss","action","label","callback","console","log","getErrorNotification","error","lookupLivestreamEventId","streams","eventId","match","find","stream","videoStreams","length","liveStreamEventId","purchaseEventRequestedEpic","action$","state$","pipe","PAYMENTS_PURCHASE_GAMEPASS_REQUESTED","value","content","tags","payments","purchase","_id","token","paymentDetails","id","brand","card","last4","expiry_year","exp_year","expiry_month","exp_month","apiResponse","is_success","tagId","tag","livestreamEventId","gamePassPriceFormatted","products","configuration","data","window","dataLayer","push","err","path","undefined","errorDescription"],"mappings":"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","sourcesContent":["import { selectGamePassPriceFormatted } from './../../products/selectors';\nimport { Epic, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, catchError } from 'rxjs/operators'\nimport { purchaseTagErroredEvent, purchaseTagReceivedEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport { postPurchaseEvent } from '../api/postPurchaseEvent'\nimport * as eventTypes from '../eventTypes'\nimport Notifications from 'react-notification-system-redux'\nimport { tagsSaveStreamEvent } from '../../../content/tags/events'\nimport { selectTag } from '../../../content/tags/selectors'\nimport { IStream } from '../../../content/tags/models'\nimport * as _ from 'lodash'\nimport { tokenRefreshTokenRequestedEvent } from '../../../userSecurity/token/events'\n\nconst getSuccessNotification = () => {\n  return Notifications.success(\n    {\n      title: 'Payment succeeded',\n      message: 'Enjoy your purchase',\n      position: 'tc',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    }\n  )\n}\n\nconst getErrorNotification = (error: any) => {\n  return Notifications.error(\n    {\n      title: 'Payment failed',\n      message: `An error occurred ${error}`,\n      position: 'tc',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    }\n  )\n}\n\nconst lookupLivestreamEventId = (streams: IStream[], eventId: number | undefined): string => {\n  const match: IStream = _.find(streams, (stream: IStream) => stream.eventId === eventId)\n\n  if (match && match.videoStreams && match.videoStreams.length > 0) {\n    return match.videoStreams[0].liveStreamEventId\n  }\n\n  return ''\n}\n\nconst purchaseEventRequestedEpic: Epic<any, any, RootState> = (action$, state$) =>\n  action$.pipe(\n    ofType(eventTypes.PAYMENTS_PURCHASE_GAMEPASS_REQUESTED),\n    exhaustMap(() =>\n      from(postPurchaseEvent(lookupLivestreamEventId(state$.value.content.tags.streams || [], state$.value.payments.purchase.eventId), {\n        _id: 1,\n        token: state$.value.payments.paymentDetails.token.id,\n        brand: state$.value.payments.paymentDetails.token.card.brand,\n        last4: state$.value.payments.paymentDetails.token.card.last4,\n        expiry_year: state$.value.payments.paymentDetails.token.card.exp_year,\n        expiry_month: state$.value.payments.paymentDetails.token.card.exp_month\n      })).pipe(\n        exhaustMap(apiResponse => {\n          if (apiResponse.is_success) {\n            const tagId = state$.value.payments.purchase.tagId\n            const tag = selectTag(state$.value, tagId)\n            let livestreamEventId = lookupLivestreamEventId(state$.value.content.tags.streams || [], state$.value.payments.purchase.eventId)\n\n            const gamePassPriceFormatted = selectGamePassPriceFormatted(state$.value.payments?.products, state$.value.configuration);\n            try {\n              let data = {\n                'event': 'transaction',\n                'ecommerce': {\n                  'purchase': {\n                    'actionField': {\n                      'id': livestreamEventId,\n                      'affiliation': 'Game Pass',\n                      'revenue': gamePassPriceFormatted,\n                      'tax': '$0.00',\n                      'shipping': '$0.00',\n                      'coupon': ''\n                    },\n                    'products': [{\n                      'name': `GAME PASS - ${livestreamEventId}`,\n                      'id': livestreamEventId,\n                      'price': gamePassPriceFormatted,\n                      'brand': '',\n                      'category': '',\n                      'variant': '',\n                      'quantity': 1,\n                      'coupon': ''\n                    }]\n                  }\n                }\n              };\n              (window as any).dataLayer.push(data);\n            } catch (err) {\n              console.log('purchaseEventRequestedEpic dataLayer push error', err)\n            }\n            \n            return of(tokenRefreshTokenRequestedEvent(), purchaseTagReceivedEvent(tag?.path || ''), getSuccessNotification(), tagsSaveStreamEvent(state$.value.payments.purchase.eventId || 0)) // todo: saved already this will unsave\n          } else {\n            return of(purchaseTagErroredEvent(apiResponse.data), getErrorNotification(apiResponse.data))\n          }\n        }),\n        catchError(() => of(purchaseTagErroredEvent({\n          id: undefined,\n          error: 'Network error',\n          errorDescription: 'Check your internet connection'\n        })))\n      )\n    )\n  )\n\nexport default [purchaseEventRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}