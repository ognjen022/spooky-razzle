{"ast":null,"code":"import { selectGamePassPriceFormatted } from './../../products/selectors';\nimport { ofType } from 'redux-observable';\nimport { from, of } from 'rxjs';\nimport { exhaustMap, catchError } from 'rxjs/operators';\nimport { purchaseTagErroredEvent, purchaseTagReceivedEvent } from '../events';\nimport { postPurchaseEvent } from '../api/postPurchaseEvent';\nimport * as eventTypes from '../eventTypes';\nimport Notifications from 'react-notification-system-redux';\nimport { tagsSaveStreamEvent } from '../../../content/tags/events';\nimport { selectTag } from '../../../content/tags/selectors';\nimport * as _ from 'lodash';\nimport { tokenRefreshTokenRequestedEvent } from '../../../userSecurity/token/events';\n\nvar getSuccessNotification = function getSuccessNotification() {\n  return Notifications.success({\n    title: 'Payment succeeded',\n    message: 'Enjoy your purchase',\n    position: 'tc',\n    autoDismiss: 10,\n    action: {\n      label: 'Close',\n      callback: function callback() {\n        return console.log('Notification closed');\n      }\n    }\n  });\n};\n\nvar getErrorNotification = function getErrorNotification(error) {\n  return Notifications.error({\n    title: 'Payment failed',\n    message: \"An error occurred \".concat(error),\n    position: 'tc',\n    autoDismiss: 10,\n    action: {\n      label: 'Close',\n      callback: function callback() {\n        return console.log('Notification closed');\n      }\n    }\n  });\n};\n\nvar lookupLivestreamEventId = function lookupLivestreamEventId(streams, eventId) {\n  var match = _.find(streams, function (stream) {\n    return stream.eventId === eventId;\n  });\n\n  if (match && match.videoStreams && match.videoStreams.length > 0) {\n    return match.videoStreams[0].liveStreamEventId;\n  }\n\n  return '';\n};\n\nvar purchaseEventRequestedEpic = function purchaseEventRequestedEpic(action$, state$) {\n  return action$.pipe(ofType(eventTypes.PAYMENTS_PURCHASE_GAMEPASS_REQUESTED), exhaustMap(function () {\n    return from(postPurchaseEvent(lookupLivestreamEventId(state$.value.content.tags.streams || [], state$.value.payments.purchase.eventId), {\n      _id: 1,\n      token: state$.value.payments.paymentDetails.token.id,\n      brand: state$.value.payments.paymentDetails.token.card.brand,\n      last4: state$.value.payments.paymentDetails.token.card.last4,\n      expiry_year: state$.value.payments.paymentDetails.token.card.exp_year,\n      expiry_month: state$.value.payments.paymentDetails.token.card.exp_month\n    })).pipe(exhaustMap(function (apiResponse) {\n      if (apiResponse.is_success) {\n        var _state$$value$payment;\n\n        var tagId = state$.value.payments.purchase.tagId;\n        var tag = selectTag(state$.value, tagId);\n        var livestreamEventId = lookupLivestreamEventId(state$.value.content.tags.streams || [], state$.value.payments.purchase.eventId);\n        var gamePassPriceFormatted = selectGamePassPriceFormatted((_state$$value$payment = state$.value.payments) === null || _state$$value$payment === void 0 ? void 0 : _state$$value$payment.products, state$.value.configuration);\n\n        try {\n          var data = {\n            'event': 'transaction',\n            'ecommerce': {\n              'purchase': {\n                'actionField': {\n                  'id': livestreamEventId,\n                  'affiliation': 'Game Pass',\n                  'revenue': gamePassPriceFormatted,\n                  'tax': '$0.00',\n                  'shipping': '$0.00',\n                  'coupon': ''\n                },\n                'products': [{\n                  'name': \"GAME PASS - \".concat(livestreamEventId),\n                  'id': livestreamEventId,\n                  'price': gamePassPriceFormatted,\n                  'brand': '',\n                  'category': '',\n                  'variant': '',\n                  'quantity': 1,\n                  'coupon': ''\n                }]\n              }\n            }\n          };\n          window.dataLayer.push(data);\n        } catch (err) {\n          console.log('purchaseEventRequestedEpic dataLayer push error', err);\n        }\n\n        return of(tokenRefreshTokenRequestedEvent(), purchaseTagReceivedEvent((tag === null || tag === void 0 ? void 0 : tag.path) || ''), getSuccessNotification(), tagsSaveStreamEvent(state$.value.payments.purchase.eventId || 0)); // todo: saved already this will unsave\n      } else {\n        return of(purchaseTagErroredEvent(apiResponse.data), getErrorNotification(apiResponse.data));\n      }\n    }), catchError(function () {\n      return of(purchaseTagErroredEvent({\n        id: undefined,\n        error: 'Network error',\n        errorDescription: 'Check your internet connection'\n      }));\n    }));\n  }));\n};\n\nexport default [purchaseEventRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/services/payments/purchase/epics/purchaseEventRequestedEpic.ts"],"names":["selectGamePassPriceFormatted","ofType","from","of","exhaustMap","catchError","purchaseTagErroredEvent","purchaseTagReceivedEvent","postPurchaseEvent","eventTypes","Notifications","tagsSaveStreamEvent","selectTag","_","tokenRefreshTokenRequestedEvent","getSuccessNotification","success","title","message","position","autoDismiss","action","label","callback","console","log","getErrorNotification","error","lookupLivestreamEventId","streams","eventId","match","find","stream","videoStreams","length","liveStreamEventId","purchaseEventRequestedEpic","action$","state$","pipe","PAYMENTS_PURCHASE_GAMEPASS_REQUESTED","value","content","tags","payments","purchase","_id","token","paymentDetails","id","brand","card","last4","expiry_year","exp_year","expiry_month","exp_month","apiResponse","is_success","tagId","tag","livestreamEventId","gamePassPriceFormatted","products","configuration","data","window","dataLayer","push","err","path","undefined","errorDescription"],"mappings":"AAAA,SAASA,4BAAT,QAA6C,4BAA7C;AACA,SAAeC,MAAf,QAA6B,kBAA7B;AACA,SAASC,IAAT,EAAeC,EAAf,QAAyB,MAAzB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,gBAAvC;AACA,SAASC,uBAAT,EAAkCC,wBAAlC,QAAkE,WAAlE;AAEA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,OAAO,KAAKC,UAAZ,MAA4B,eAA5B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,SAAT,QAA0B,iCAA1B;AAEA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB;AACA,SAASC,+BAAT,QAAgD,oCAAhD;;AAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACnC,SAAOL,aAAa,CAACM,OAAd,CACL;AACEC,IAAAA,KAAK,EAAE,mBADT;AAEEC,IAAAA,OAAO,EAAE,qBAFX;AAGEC,IAAAA,QAAQ,EAAE,IAHZ;AAIEC,IAAAA,WAAW,EAAE,EAJf;AAKEC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,OADD;AAENC,MAAAA,QAAQ,EAAE;AAAA,eAAMC,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAAN;AAAA;AAFJ;AALV,GADK,CAAP;AAYD,CAbD;;AAeA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAgB;AAC3C,SAAOjB,aAAa,CAACiB,KAAd,CACL;AACEV,IAAAA,KAAK,EAAE,gBADT;AAEEC,IAAAA,OAAO,8BAAuBS,KAAvB,CAFT;AAGER,IAAAA,QAAQ,EAAE,IAHZ;AAIEC,IAAAA,WAAW,EAAE,EAJf;AAKEC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,OADD;AAENC,MAAAA,QAAQ,EAAE;AAAA,eAAMC,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAAN;AAAA;AAFJ;AALV,GADK,CAAP;AAYD,CAbD;;AAeA,IAAMG,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,OAAD,EAAqBC,OAArB,EAA6D;AAC3F,MAAMC,KAAc,GAAGlB,CAAC,CAACmB,IAAF,CAAOH,OAAP,EAAgB,UAACI,MAAD;AAAA,WAAqBA,MAAM,CAACH,OAAP,KAAmBA,OAAxC;AAAA,GAAhB,CAAvB;;AAEA,MAAIC,KAAK,IAAIA,KAAK,CAACG,YAAf,IAA+BH,KAAK,CAACG,YAAN,CAAmBC,MAAnB,GAA4B,CAA/D,EAAkE;AAChE,WAAOJ,KAAK,CAACG,YAAN,CAAmB,CAAnB,EAAsBE,iBAA7B;AACD;;AAED,SAAO,EAAP;AACD,CARD;;AAUA,IAAMC,0BAAqD,GAAG,SAAxDA,0BAAwD,CAACC,OAAD,EAAUC,MAAV;AAAA,SAC5DD,OAAO,CAACE,IAAR,CACEvC,MAAM,CAACQ,UAAU,CAACgC,oCAAZ,CADR,EAEErC,UAAU,CAAC;AAAA,WACTF,IAAI,CAACM,iBAAiB,CAACoB,uBAAuB,CAACW,MAAM,CAACG,KAAP,CAAaC,OAAb,CAAqBC,IAArB,CAA0Bf,OAA1B,IAAqC,EAAtC,EAA0CU,MAAM,CAACG,KAAP,CAAaG,QAAb,CAAsBC,QAAtB,CAA+BhB,OAAzE,CAAxB,EAA2G;AAC/HiB,MAAAA,GAAG,EAAE,CAD0H;AAE/HC,MAAAA,KAAK,EAAET,MAAM,CAACG,KAAP,CAAaG,QAAb,CAAsBI,cAAtB,CAAqCD,KAArC,CAA2CE,EAF6E;AAG/HC,MAAAA,KAAK,EAAEZ,MAAM,CAACG,KAAP,CAAaG,QAAb,CAAsBI,cAAtB,CAAqCD,KAArC,CAA2CI,IAA3C,CAAgDD,KAHwE;AAI/HE,MAAAA,KAAK,EAAEd,MAAM,CAACG,KAAP,CAAaG,QAAb,CAAsBI,cAAtB,CAAqCD,KAArC,CAA2CI,IAA3C,CAAgDC,KAJwE;AAK/HC,MAAAA,WAAW,EAAEf,MAAM,CAACG,KAAP,CAAaG,QAAb,CAAsBI,cAAtB,CAAqCD,KAArC,CAA2CI,IAA3C,CAAgDG,QALkE;AAM/HC,MAAAA,YAAY,EAAEjB,MAAM,CAACG,KAAP,CAAaG,QAAb,CAAsBI,cAAtB,CAAqCD,KAArC,CAA2CI,IAA3C,CAAgDK;AANiE,KAA3G,CAAlB,CAAJ,CAOIjB,IAPJ,CAQEpC,UAAU,CAAC,UAAAsD,WAAW,EAAI;AACxB,UAAIA,WAAW,CAACC,UAAhB,EAA4B;AAAA;;AAC1B,YAAMC,KAAK,GAAGrB,MAAM,CAACG,KAAP,CAAaG,QAAb,CAAsBC,QAAtB,CAA+Bc,KAA7C;AACA,YAAMC,GAAG,GAAGjD,SAAS,CAAC2B,MAAM,CAACG,KAAR,EAAekB,KAAf,CAArB;AACA,YAAIE,iBAAiB,GAAGlC,uBAAuB,CAACW,MAAM,CAACG,KAAP,CAAaC,OAAb,CAAqBC,IAArB,CAA0Bf,OAA1B,IAAqC,EAAtC,EAA0CU,MAAM,CAACG,KAAP,CAAaG,QAAb,CAAsBC,QAAtB,CAA+BhB,OAAzE,CAA/C;AAEA,YAAMiC,sBAAsB,GAAG/D,4BAA4B,0BAACuC,MAAM,CAACG,KAAP,CAAaG,QAAd,0DAAC,sBAAuBmB,QAAxB,EAAkCzB,MAAM,CAACG,KAAP,CAAauB,aAA/C,CAA3D;;AACA,YAAI;AACF,cAAIC,IAAI,GAAG;AACT,qBAAS,aADA;AAET,yBAAa;AACX,0BAAY;AACV,+BAAe;AACb,wBAAMJ,iBADO;AAEb,iCAAe,WAFF;AAGb,6BAAWC,sBAHE;AAIb,yBAAO,OAJM;AAKb,8BAAY,OALC;AAMb,4BAAU;AANG,iBADL;AASV,4BAAY,CAAC;AACX,gDAAuBD,iBAAvB,CADW;AAEX,wBAAMA,iBAFK;AAGX,2BAASC,sBAHE;AAIX,2BAAS,EAJE;AAKX,8BAAY,EALD;AAMX,6BAAW,EANA;AAOX,8BAAY,CAPD;AAQX,4BAAU;AARC,iBAAD;AATF;AADD;AAFJ,WAAX;AAyBCI,UAAAA,MAAD,CAAgBC,SAAhB,CAA0BC,IAA1B,CAA+BH,IAA/B;AACD,SA3BD,CA2BE,OAAOI,GAAP,EAAY;AACZ9C,UAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ,EAA+D6C,GAA/D;AACD;;AAED,eAAOnE,EAAE,CAACW,+BAA+B,EAAhC,EAAoCP,wBAAwB,CAAC,CAAAsD,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEU,IAAL,KAAa,EAAd,CAA5D,EAA+ExD,sBAAsB,EAArG,EAAyGJ,mBAAmB,CAAC4B,MAAM,CAACG,KAAP,CAAaG,QAAb,CAAsBC,QAAtB,CAA+BhB,OAA/B,IAA0C,CAA3C,CAA5H,CAAT,CArC0B,CAqC0J;AACrL,OAtCD,MAsCO;AACL,eAAO3B,EAAE,CAACG,uBAAuB,CAACoD,WAAW,CAACQ,IAAb,CAAxB,EAA4CxC,oBAAoB,CAACgC,WAAW,CAACQ,IAAb,CAAhE,CAAT;AACD;AACF,KA1CS,CARZ,EAmDE7D,UAAU,CAAC;AAAA,aAAMF,EAAE,CAACG,uBAAuB,CAAC;AAC1C4C,QAAAA,EAAE,EAAEsB,SADsC;AAE1C7C,QAAAA,KAAK,EAAE,eAFmC;AAG1C8C,QAAAA,gBAAgB,EAAE;AAHwB,OAAD,CAAxB,CAAR;AAAA,KAAD,CAnDZ,CADS;AAAA,GAAD,CAFZ,CAD4D;AAAA,CAA9D;;AAgEA,eAAe,CAACpC,0BAAD,CAAf","sourcesContent":["import { selectGamePassPriceFormatted } from './../../products/selectors';\nimport { Epic, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, catchError } from 'rxjs/operators'\nimport { purchaseTagErroredEvent, purchaseTagReceivedEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport { postPurchaseEvent } from '../api/postPurchaseEvent'\nimport * as eventTypes from '../eventTypes'\nimport Notifications from 'react-notification-system-redux'\nimport { tagsSaveStreamEvent } from '../../../content/tags/events'\nimport { selectTag } from '../../../content/tags/selectors'\nimport { IStream } from '../../../content/tags/models'\nimport * as _ from 'lodash'\nimport { tokenRefreshTokenRequestedEvent } from '../../../userSecurity/token/events'\n\nconst getSuccessNotification = () => {\n  return Notifications.success(\n    {\n      title: 'Payment succeeded',\n      message: 'Enjoy your purchase',\n      position: 'tc',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    }\n  )\n}\n\nconst getErrorNotification = (error: any) => {\n  return Notifications.error(\n    {\n      title: 'Payment failed',\n      message: `An error occurred ${error}`,\n      position: 'tc',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    }\n  )\n}\n\nconst lookupLivestreamEventId = (streams: IStream[], eventId: number | undefined): string => {\n  const match: IStream = _.find(streams, (stream: IStream) => stream.eventId === eventId)\n\n  if (match && match.videoStreams && match.videoStreams.length > 0) {\n    return match.videoStreams[0].liveStreamEventId\n  }\n\n  return ''\n}\n\nconst purchaseEventRequestedEpic: Epic<any, any, RootState> = (action$, state$) =>\n  action$.pipe(\n    ofType(eventTypes.PAYMENTS_PURCHASE_GAMEPASS_REQUESTED),\n    exhaustMap(() =>\n      from(postPurchaseEvent(lookupLivestreamEventId(state$.value.content.tags.streams || [], state$.value.payments.purchase.eventId), {\n        _id: 1,\n        token: state$.value.payments.paymentDetails.token.id,\n        brand: state$.value.payments.paymentDetails.token.card.brand,\n        last4: state$.value.payments.paymentDetails.token.card.last4,\n        expiry_year: state$.value.payments.paymentDetails.token.card.exp_year,\n        expiry_month: state$.value.payments.paymentDetails.token.card.exp_month\n      })).pipe(\n        exhaustMap(apiResponse => {\n          if (apiResponse.is_success) {\n            const tagId = state$.value.payments.purchase.tagId\n            const tag = selectTag(state$.value, tagId)\n            let livestreamEventId = lookupLivestreamEventId(state$.value.content.tags.streams || [], state$.value.payments.purchase.eventId)\n\n            const gamePassPriceFormatted = selectGamePassPriceFormatted(state$.value.payments?.products, state$.value.configuration);\n            try {\n              let data = {\n                'event': 'transaction',\n                'ecommerce': {\n                  'purchase': {\n                    'actionField': {\n                      'id': livestreamEventId,\n                      'affiliation': 'Game Pass',\n                      'revenue': gamePassPriceFormatted,\n                      'tax': '$0.00',\n                      'shipping': '$0.00',\n                      'coupon': ''\n                    },\n                    'products': [{\n                      'name': `GAME PASS - ${livestreamEventId}`,\n                      'id': livestreamEventId,\n                      'price': gamePassPriceFormatted,\n                      'brand': '',\n                      'category': '',\n                      'variant': '',\n                      'quantity': 1,\n                      'coupon': ''\n                    }]\n                  }\n                }\n              };\n              (window as any).dataLayer.push(data);\n            } catch (err) {\n              console.log('purchaseEventRequestedEpic dataLayer push error', err)\n            }\n            \n            return of(tokenRefreshTokenRequestedEvent(), purchaseTagReceivedEvent(tag?.path || ''), getSuccessNotification(), tagsSaveStreamEvent(state$.value.payments.purchase.eventId || 0)) // todo: saved already this will unsave\n          } else {\n            return of(purchaseTagErroredEvent(apiResponse.data), getErrorNotification(apiResponse.data))\n          }\n        }),\n        catchError(() => of(purchaseTagErroredEvent({\n          id: undefined,\n          error: 'Network error',\n          errorDescription: 'Check your internet connection'\n        })))\n      )\n    )\n  )\n\nexport default [purchaseEventRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}