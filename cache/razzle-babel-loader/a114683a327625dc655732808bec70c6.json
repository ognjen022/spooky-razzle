{"ast":null,"code":"import { selectProducts } from './../../../config/selectors';\nimport { tokenRefreshTokenRequestedEvent } from './../../../userSecurity/token/events';\nimport { ofType } from 'redux-observable';\nimport { from, of } from 'rxjs';\nimport { exhaustMap, catchError } from 'rxjs/operators';\nimport { purchaseTagErroredEvent, purchaseTagReceivedEvent } from '../events';\nimport { postPurchaseProduct } from '../api/postPurchaseProduct';\nimport * as eventTypes from '../eventTypes';\nimport Notifications from 'react-notification-system-redux';\nimport { selectTag } from '../../../content/tags/selectors';\nimport { push } from 'connected-react-router';\nimport { subscriptionDetailsRequestedEvent } from '../../subscriptions/events';\nimport { selectWatchItAllPriceFormatted } from '../../products/selectors';\n\nconst getSuccessNotification = message => {\n  return Notifications.success({\n    title: 'Payment succeeded',\n    message: message ? message : 'Enjoy your purchase',\n    position: 'tc',\n    autoDismiss: 10,\n    action: {\n      label: 'Close',\n      callback: () => console.log('Notification closed')\n    }\n  });\n};\n\nconst getErrorNotification = error => {\n  return Notifications.error({\n    title: 'Payment failed',\n    message: `An error occurred ${error}`,\n    position: 'tc',\n    autoDismiss: 10,\n    action: {\n      label: 'Close',\n      callback: () => console.log('Notification closed')\n    }\n  });\n};\n\nconst purchaseWatchItAllRequestedEpic = (action$, state$) => action$.pipe(ofType(eventTypes.PAYMENTS_PURCHASE_WATCHITALL_REQUESTED), exhaustMap(() => {\n  var _selectProducts$watch;\n\n  return from(postPurchaseProduct((_selectProducts$watch = selectProducts(state$.value.configuration).watch_it_all) !== null && _selectProducts$watch !== void 0 ? _selectProducts$watch : '', state$.value.payments.purchase.promoCode, {\n    _id: 1,\n    token: state$.value.payments.paymentDetails.token.id,\n    brand: state$.value.payments.paymentDetails.token.card.brand,\n    last4: state$.value.payments.paymentDetails.token.card.last4,\n    expiry_year: state$.value.payments.paymentDetails.token.card.exp_year,\n    expiry_month: state$.value.payments.paymentDetails.token.card.exp_month\n  })).pipe(exhaustMap(apiResponse => {\n    if (apiResponse.is_success) {\n      var _state$$value$router, _state$$value$router$;\n\n      const tagId = state$.value.payments.purchase.tagId;\n      const tag = selectTag(state$.value, tagId);\n      const watchItAllPriceFormatted = selectWatchItAllPriceFormatted(state$.value.payments.products, state$.value.configuration);\n\n      try {\n        let data = {\n          'event': 'transaction',\n          'ecommerce': {\n            'purchase': {\n              'actionField': {\n                'id': selectProducts(state$.value.configuration).watch_it_all,\n                'affiliation': 'WatchItAll',\n                'revenue': watchItAllPriceFormatted,\n                'tax': '$0.00',\n                'shipping': '$0.00',\n                'coupon': ''\n              },\n              'products': [{\n                'name': 'WATCH IT ALL',\n                'id': selectProducts(state$.value.configuration).watch_it_all,\n                'price': `${watchItAllPriceFormatted}`,\n                'brand': '',\n                'category': '',\n                'variant': '',\n                'quantity': 1,\n                'coupon': state$.value.payments.purchase.promoCode\n              }]\n            }\n          }\n        };\n        window.dataLayer.push(data);\n      } catch (err) {\n        console.log('purchaseWatchItAllRequestedEpic dataLayer.push error', err);\n      }\n\n      const routePathname = (_state$$value$router = state$.value.router) === null || _state$$value$router === void 0 ? void 0 : (_state$$value$router$ = _state$$value$router.location) === null || _state$$value$router$ === void 0 ? void 0 : _state$$value$router$.pathname;\n\n      if (routePathname === '/subscribe-now') {\n        return of(tokenRefreshTokenRequestedEvent(), purchaseTagReceivedEvent((tag === null || tag === void 0 ? void 0 : tag.path) || ''), getSuccessNotification(apiResponse.message), push('/browse'), subscriptionDetailsRequestedEvent());\n      } else {\n        return of(purchaseTagReceivedEvent((tag === null || tag === void 0 ? void 0 : tag.path) || ''), getSuccessNotification(apiResponse.message), subscriptionDetailsRequestedEvent());\n      }\n    } else {\n      return of(purchaseTagErroredEvent(apiResponse.data | apiResponse.message), getErrorNotification(apiResponse.message));\n    }\n  }), catchError(() => of(purchaseTagErroredEvent({\n    id: undefined,\n    error: 'Network error',\n    errorDescription: 'Check your internet connection'\n  }))));\n}));\n\nexport default [purchaseWatchItAllRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky.live-ssr/src/services/payments/purchase/epics/purchaseWatchItAllRequestedEpic.ts"],"names":["selectProducts","tokenRefreshTokenRequestedEvent","ofType","from","of","exhaustMap","catchError","purchaseTagErroredEvent","purchaseTagReceivedEvent","postPurchaseProduct","eventTypes","Notifications","selectTag","push","subscriptionDetailsRequestedEvent","selectWatchItAllPriceFormatted","getSuccessNotification","message","success","title","position","autoDismiss","action","label","callback","console","log","getErrorNotification","error","purchaseWatchItAllRequestedEpic","action$","state$","pipe","PAYMENTS_PURCHASE_WATCHITALL_REQUESTED","value","configuration","watch_it_all","payments","purchase","promoCode","_id","token","paymentDetails","id","brand","card","last4","expiry_year","exp_year","expiry_month","exp_month","apiResponse","is_success","tagId","tag","watchItAllPriceFormatted","products","data","window","dataLayer","err","routePathname","router","location","pathname","path","undefined","errorDescription"],"mappings":"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","sourcesContent":["import { selectProducts } from './../../../config/selectors';\nimport { tokenRefreshTokenRequestedEvent } from './../../../userSecurity/token/events';\nimport { Epic, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, catchError } from 'rxjs/operators'\nimport { purchaseTagErroredEvent, purchaseTagReceivedEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport { postPurchaseProduct } from '../api/postPurchaseProduct'\nimport * as eventTypes from '../eventTypes'\nimport Notifications from 'react-notification-system-redux'\nimport { selectTag } from '../../../content/tags/selectors'\nimport { push } from 'connected-react-router'\nimport { subscriptionDetailsRequestedEvent } from '../../subscriptions/events'\nimport { selectWatchItAllPriceFormatted } from '../../products/selectors';\n\nconst getSuccessNotification = (message: string | undefined) => {\n  return Notifications.success(\n    {\n      title: 'Payment succeeded',\n      message: message ? message : 'Enjoy your purchase',\n      position: 'tc',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    }\n  )\n}\n\nconst getErrorNotification = (error: any) => {\n  return Notifications.error(\n    {\n      title: 'Payment failed',\n      message: `An error occurred ${error}`,\n      position: 'tc',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    }\n  )\n}\n\nconst purchaseWatchItAllRequestedEpic: Epic<any, any, RootState> = (action$, state$) =>\n  action$.pipe(\n    ofType(eventTypes.PAYMENTS_PURCHASE_WATCHITALL_REQUESTED),\n    exhaustMap(() =>\n      from(postPurchaseProduct(selectProducts(state$.value.configuration).watch_it_all ?? '', state$.value.payments.purchase.promoCode, {\n        _id: 1,\n        token: state$.value.payments.paymentDetails.token.id,\n        brand: state$.value.payments.paymentDetails.token.card.brand,\n        last4: state$.value.payments.paymentDetails.token.card.last4,\n        expiry_year: state$.value.payments.paymentDetails.token.card.exp_year,\n        expiry_month: state$.value.payments.paymentDetails.token.card.exp_month\n      })).pipe(\n        exhaustMap(apiResponse => {\n          if (apiResponse.is_success) {\n            const tagId = state$.value.payments.purchase.tagId\n            const tag = selectTag(state$.value, tagId)\n\n            const watchItAllPriceFormatted = selectWatchItAllPriceFormatted(state$.value.payments.products, state$.value.configuration);\n            try {\n              let data = {\n                'event': 'transaction',\n                'ecommerce': {\n                  'purchase': {\n                    'actionField': {\n                      'id': selectProducts(state$.value.configuration).watch_it_all,\n                      'affiliation': 'WatchItAll',\n                      'revenue': watchItAllPriceFormatted,\n                      'tax': '$0.00',\n                      'shipping': '$0.00',\n                      'coupon': ''\n                    },\n                    'products': [{\n                      'name': 'WATCH IT ALL',\n                      'id': selectProducts(state$.value.configuration).watch_it_all,\n                      'price': `${watchItAllPriceFormatted}`,\n                      'brand': '',\n                      'category': '',\n                      'variant': '',\n                      'quantity': 1,\n                      'coupon': state$.value.payments.purchase.promoCode\n                    }]\n                  }\n                }\n              };\n              (window as any).dataLayer.push(data);\n            } catch (err) {\n              console.log('purchaseWatchItAllRequestedEpic dataLayer.push error', err)\n            }\n\n            const routePathname = state$.value.router?.location?.pathname\n            if (routePathname === '/subscribe-now') {\n              return of(tokenRefreshTokenRequestedEvent(),\n                purchaseTagReceivedEvent(tag?.path || ''),\n                getSuccessNotification(apiResponse.message),\n                push('/browse'),\n                subscriptionDetailsRequestedEvent()\n              )\n            } else {\n              return of(\n                purchaseTagReceivedEvent(tag?.path || ''),\n                getSuccessNotification(apiResponse.message),\n                subscriptionDetailsRequestedEvent()\n              )\n            }\n\n          } else {\n            return of(purchaseTagErroredEvent(apiResponse.data | apiResponse.message as any), getErrorNotification(apiResponse.message as any))\n          }\n        }),\n        catchError(() => of(purchaseTagErroredEvent({\n          id: undefined,\n          error: 'Network error',\n          errorDescription: 'Check your internet connection'\n        })))\n      )\n    )\n  )\n\nexport default [purchaseWatchItAllRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}