{"ast":null,"code":"var _jsxFileName = \"/Users/ognjen/Desktop/spooky-live-ssr/ui/src/scenes/ForgotPassword/ForgotPassword.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm, useField } from 'react-final-form-hooks';\nimport styles from '../SignUp/SignUp.module.scss';\nimport Input from '../../components/Input/Input';\nimport Button from '../../components/Button/Button';\nimport { regexEmail } from '../../utils/utils';\nimport { tokenPasswordResetRequestedEvent } from '../../services/userSecurity/token/events';\nimport { selectForgotPasswordError, selectForgotPasswordIsSubmitting } from '../../services/userSecurity/token/selectors';\nimport { accountToggleForgotPasswordEvent } from '../../services/userSecurity/accountDetails/events';\nexport const validate = values => {\n  const errors = {\n    email: undefined\n  }; // Email validations\n\n  if (!values.email) {\n    errors.email = 'Enter your email';\n  } else if (!regexEmail.test(values.email)) {\n    errors.email = 'Enter a valid email';\n  }\n\n  return errors;\n};\n\nconst ForgotPassword = () => {\n  let dispatch = useDispatch();\n  let errorText = useSelector(state => selectForgotPasswordError(state.userSecurity.token));\n  let isSubmitting = useSelector(state => selectForgotPasswordIsSubmitting(state.userSecurity.token));\n  let {\n    0: submitted,\n    1: setSubmitted\n  } = useState(false); // Submit form\n\n  const onSubmit = async payload => {\n    dispatch(tokenPasswordResetRequestedEvent({\n      email: payload.email\n    }));\n    setSubmitted(true);\n  }; // Initial values form\n\n\n  const initialValues = {\n    email: undefined\n  }; // Create form\n\n  const {\n    form,\n    handleSubmit,\n    dirtyFieldsSinceLastSubmit\n  } = useForm({\n    onSubmit,\n    validate,\n    initialValues\n  }); // Create form fields\n\n  const email = useField('email', form);\n  useEffect(() => {// setSubmitted(false)\n  }, [dirtyFieldsSinceLastSubmit]);\n  return __jsx(\"div\", {\n    className: styles['signup-new'],\n    onMouseDown: e => e.stopPropagation(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles['signup-new__content'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: styles['signup-new__form-header'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Forgotten Password\")), __jsx(\"form\", {\n    className: styles['signup-new__form-container'],\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: styles['signup-new__form'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, __jsx(Input, {\n    placeholder: 'Email address',\n    data: email,\n    \"aria-label\": \"Email address\",\n    label: \"email\",\n    type: \"email\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  })), __jsx(\"div\", {\n    className: styles['signup-new__action'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, \"Still having trouble? \", __jsx(Link, {\n    to: '/contact',\n    onClick: () => dispatch(accountToggleForgotPasswordEvent()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 39\n    }\n  }, \"Contact us\")), __jsx(\"div\", {\n    className: styles['signup-new__action'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    variant: 'secondary',\n    color: !submitted ? \"success\" : \"ghost-green\",\n    label: !submitted ? \"Send Reset Link\" : \"Link Sent. Re Send?\",\n    type: \"submit\",\n    isLoading: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 19\n    }\n  }), errorText && errorText.length > 0 && errorText !== 'Email sent.' && __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }, errorText))))))));\n};\n\nexport default ForgotPassword;","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky-live-ssr/ui/src/scenes/ForgotPassword/ForgotPassword.tsx"],"names":["React","useState","useEffect","Link","useDispatch","useSelector","useForm","useField","styles","Input","Button","regexEmail","tokenPasswordResetRequestedEvent","selectForgotPasswordError","selectForgotPasswordIsSubmitting","accountToggleForgotPasswordEvent","validate","values","errors","email","undefined","test","ForgotPassword","dispatch","errorText","state","userSecurity","token","isSubmitting","submitted","setSubmitted","onSubmit","payload","initialValues","form","handleSubmit","dirtyFieldsSinceLastSubmit","e","stopPropagation","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useForm, useField } from 'react-final-form-hooks'\nimport { push } from 'connected-react-router'\n\nimport styles from '../SignUp/SignUp.module.scss'\n\nimport LayoutDefault from '../../layouts/LayoutDefault/LayoutDefault'\nimport Input from '../../components/Input/Input'\nimport Button from '../../components/Button/Button'\nimport { RootState } from '../../services/RootState'\n\nimport { regexEmail } from '../../utils/utils'\nimport { tokenPasswordResetRequestedEvent } from '../../services/userSecurity/token/events'\nimport { selectForgotPasswordError, selectForgotPasswordIsSubmitting } from '../../services/userSecurity/token/selectors'\nimport { accountToggleForgotPasswordEvent } from '../../services/userSecurity/accountDetails/events'\n\n\ninterface IForgotPasswordFormValues {\n  email: string | undefined\n}\n\nexport const validate = (values: IForgotPasswordFormValues) => {\n  const errors: IForgotPasswordFormValues = {\n    email: undefined\n  }\n\n  // Email validations\n  if (!values.email) {\n    errors.email = 'Enter your email'\n  } else if (!regexEmail.test(values.email)) {\n    errors.email = 'Enter a valid email'\n  }\n\n  return errors\n}\n\n\nconst ForgotPassword = () => {\n  let dispatch = useDispatch()\n\n  let errorText = useSelector<RootState, string>(state => selectForgotPasswordError(state.userSecurity.token))\n  let isSubmitting = useSelector<RootState, boolean>(state => selectForgotPasswordIsSubmitting(state.userSecurity.token))\n  let [submitted, setSubmitted] = useState(false)\n\n  // Submit form\n  const onSubmit = async (payload: any) => {\n    dispatch(tokenPasswordResetRequestedEvent({ email: payload.email }))\n    setSubmitted(true)\n  }\n\n  // Initial values form\n  const initialValues: Partial<IForgotPasswordFormValues> = {\n    email: undefined\n  }\n\n  // Create form\n  const { form, handleSubmit, dirtyFieldsSinceLastSubmit } = useForm({ onSubmit, validate, initialValues })\n\n  // Create form fields\n  const email = useField('email', form)\n\n  useEffect(() => {\n    // setSubmitted(false)\n  }, [dirtyFieldsSinceLastSubmit])\n\n  return (\n    <div className={styles['signup-new']} onMouseDown={e => e.stopPropagation()}>\n            \n      <div className={styles['signup-new__content']}>\n        <div className={styles['signup-new__form-header']}>\n          <h2>Forgotten Password</h2>\n        </div>\n        \n        <form className={styles['signup-new__form-container']} onSubmit={handleSubmit}>\n          <div className={styles['signup-new__form']}>\n            <p >\n              <Input placeholder={'Email address'} data={email} aria-label=\"Email address\" label=\"email\" type=\"email\" required />\n            </p>\n           \n            <div className={styles['signup-new__action']}>\n              <p>\n                Still having trouble? <Link to={'/contact'} onClick={() => dispatch(accountToggleForgotPasswordEvent())}>Contact us</Link>\n              </p>\n              <div className={styles['signup-new__action']}>\n                <p>\n                  <Button\n                  variant={'secondary'}\n                    color={!submitted ? \"success\" : \"ghost-green\"}\n                    label={!submitted ? \"Send Reset Link\" : \"Link Sent. Re Send?\"}\n\n                    type=\"submit\"\n                    isLoading={isSubmitting} />\n                  {\n                    errorText && errorText.length > 0 && errorText !== 'Email sent.' &&\n                    <span>{errorText}</span>\n                  }\n                </p>\n              </div>\n            </div>\n          </div>\n        </form>\n\n      </div>\n    </div>\n   \n  )\n}\n\nexport default ForgotPassword\n"]},"metadata":{},"sourceType":"module"}