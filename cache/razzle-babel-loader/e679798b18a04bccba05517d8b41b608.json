{"ast":null,"code":"import { createAction } from 'typesafe-actions';\nimport * as eventTypes from './eventTypes';\nexport const tagsRequestedEvent = createAction(eventTypes.CONTENT_TAGS_REQUESTED);\nexport const tagsReceivedEvent = createAction(eventTypes.CONTENT_TAGS_RECEIVED, resolve => response => resolve(response));\nexport const tagsErroredEvent = createAction(eventTypes.CONTENT_TAGS_ERRORED, resolve => response => resolve(response));\nexport const tagsStreamsReceivedEvent = createAction(eventTypes.CONTENT_TAGS_STREAMS_RECEIVED, resolve => response => resolve(response));\nexport const tagsStreamsErroredEvent = createAction(eventTypes.CONTENT_TAGS_ERRORED, resolve => response => resolve(response));\nexport const tagsFilterSelectedEvent = createAction(eventTypes.CONTENT_TAGS_FILTER_SELECTED, resolve => tagId => resolve(tagId));\nexport const tagsSaveTagEvent = createAction(eventTypes.CONTENT_TAGS_SAVETAG_TOGGLED, resolve => tagId => resolve(tagId));\nexport const tagsSaveStreamEvent = createAction(eventTypes.CONTENT_TAGS_SAVESTREAM_TOGGLED, resolve => eventId => resolve(eventId));\nexport const tagsFilterRemovedEvent = createAction(eventTypes.CONTENT_TAGS_FILTER_REMOVED, resolve => () => resolve());\nexport const tagsFilterSearchTermSelectedEvent = createAction(eventTypes.CONTENT_TAGS_FILTER_SEARCH_SELECTED, resolve => searchTerm => resolve(searchTerm));\nexport const tagsFilterSearchTermRemovedEvent = createAction(eventTypes.CONTENT_TAGS_FILTER_SEARCH_REMOVED, resolve => () => resolve());\nexport const savedTagsReceived = createAction(eventTypes.CONTENT_TAGS_SAVEDTAGS_RECEIVED, resolve => tagIds => resolve(tagIds));\nexport const savedStreamsReceived = createAction(eventTypes.CONTENT_TAGS_SAVEDSTREAMS_RECEIVED, resolve => savedEventIds => resolve(savedEventIds));","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/services/content/tags/events.ts"],"names":["createAction","eventTypes","tagsRequestedEvent","CONTENT_TAGS_REQUESTED","tagsReceivedEvent","CONTENT_TAGS_RECEIVED","resolve","response","tagsErroredEvent","CONTENT_TAGS_ERRORED","tagsStreamsReceivedEvent","CONTENT_TAGS_STREAMS_RECEIVED","tagsStreamsErroredEvent","tagsFilterSelectedEvent","CONTENT_TAGS_FILTER_SELECTED","tagId","tagsSaveTagEvent","CONTENT_TAGS_SAVETAG_TOGGLED","tagsSaveStreamEvent","CONTENT_TAGS_SAVESTREAM_TOGGLED","eventId","tagsFilterRemovedEvent","CONTENT_TAGS_FILTER_REMOVED","tagsFilterSearchTermSelectedEvent","CONTENT_TAGS_FILTER_SEARCH_SELECTED","searchTerm","tagsFilterSearchTermRemovedEvent","CONTENT_TAGS_FILTER_SEARCH_REMOVED","savedTagsReceived","CONTENT_TAGS_SAVEDTAGS_RECEIVED","tagIds","savedStreamsReceived","CONTENT_TAGS_SAVEDSTREAMS_RECEIVED","savedEventIds"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,OAAO,KAAKC,UAAZ,MAA4B,cAA5B;AAIA,OAAO,MAAMC,kBAAkB,GAAGF,YAAY,CAACC,UAAU,CAACE,sBAAZ,CAAvC;AAEP,OAAO,MAAMC,iBAAiB,GAAGJ,YAAY,CAACC,UAAU,CAACI,qBAAZ,EAAoCC,OAAD,IAAcC,QAAD,IAC3FD,OAAO,CAACC,QAAD,CADoC,CAAtC;AAIP,OAAO,MAAMC,gBAAgB,GAAGR,YAAY,CAACC,UAAU,CAACQ,oBAAZ,EAAmCH,OAAD,IAAcC,QAAD,IACzFD,OAAO,CAACC,QAAD,CADmC,CAArC;AAIP,OAAO,MAAMG,wBAAwB,GAAGV,YAAY,CAACC,UAAU,CAACU,6BAAZ,EAA4CL,OAAD,IAAcC,QAAD,IAC1GD,OAAO,CAACC,QAAD,CAD2C,CAA7C;AAIP,OAAO,MAAMK,uBAAuB,GAAGZ,YAAY,CAACC,UAAU,CAACQ,oBAAZ,EAAmCH,OAAD,IAAcC,QAAD,IAChGD,OAAO,CAACC,QAAD,CAD0C,CAA5C;AAIP,OAAO,MAAMM,uBAAuB,GAAGb,YAAY,CAACC,UAAU,CAACa,4BAAZ,EAA2CR,OAAD,IAAcS,KAAD,IACxGT,OAAO,CAACS,KAAD,CAD0C,CAA5C;AAIP,OAAO,MAAMC,gBAAgB,GAAGhB,YAAY,CAACC,UAAU,CAACgB,4BAAZ,EAA2CX,OAAD,IAAcS,KAAD,IACjGT,OAAO,CAACS,KAAD,CADmC,CAArC;AAIP,OAAO,MAAMG,mBAAmB,GAAGlB,YAAY,CAACC,UAAU,CAACkB,+BAAZ,EAA8Cb,OAAD,IAAcc,OAAD,IACvGd,OAAO,CAACc,OAAD,CADsC,CAAxC;AAIP,OAAO,MAAMC,sBAAsB,GAAGrB,YAAY,CAACC,UAAU,CAACqB,2BAAZ,EAA0ChB,OAAD,IAAa,MACtGA,OAAO,EADyC,CAA3C;AAIP,OAAO,MAAMiB,iCAAiC,GAAGvB,YAAY,CAACC,UAAU,CAACuB,mCAAZ,EAAkDlB,OAAD,IAAcmB,UAAD,IACzHnB,OAAO,CAACmB,UAAD,CADoD,CAAtD;AAIP,OAAO,MAAMC,gCAAgC,GAAG1B,YAAY,CAACC,UAAU,CAAC0B,kCAAZ,EAAiDrB,OAAD,IAAa,MACvHA,OAAO,EADmD,CAArD;AAIP,OAAO,MAAMsB,iBAAiB,GAAG5B,YAAY,CAACC,UAAU,CAAC4B,+BAAZ,EAA8CvB,OAAD,IAAcwB,MAAD,IACrGxB,OAAO,CAACwB,MAAD,CADoC,CAAtC;AAIP,OAAO,MAAMC,oBAAoB,GAAG/B,YAAY,CAACC,UAAU,CAAC+B,kCAAZ,EAAiD1B,OAAD,IAAc2B,aAAD,IAC3G3B,OAAO,CAAC2B,aAAD,CADuC,CAAzC","sourcesContent":["import { createAction } from 'typesafe-actions'\nimport * as eventTypes from './eventTypes'\nimport { ITagsResponse, IStreamsResponse } from './models'\nimport { ActionType } from 'typesafe-actions'\n\nexport const tagsRequestedEvent = createAction(eventTypes.CONTENT_TAGS_REQUESTED)\n\nexport const tagsReceivedEvent = createAction(eventTypes.CONTENT_TAGS_RECEIVED, (resolve) => (response: ITagsResponse) =>\n  resolve(response)\n)\n\nexport const tagsErroredEvent = createAction(eventTypes.CONTENT_TAGS_ERRORED, (resolve) => (response: ITagsResponse) =>\n  resolve(response)\n)\n\nexport const tagsStreamsReceivedEvent = createAction(eventTypes.CONTENT_TAGS_STREAMS_RECEIVED, (resolve) => (response: IStreamsResponse) =>\n  resolve(response)\n)\n\nexport const tagsStreamsErroredEvent = createAction(eventTypes.CONTENT_TAGS_ERRORED, (resolve) => (response: IStreamsResponse) =>\n  resolve(response)\n)\n\nexport const tagsFilterSelectedEvent = createAction(eventTypes.CONTENT_TAGS_FILTER_SELECTED, (resolve) => (tagId: string) =>\n  resolve(tagId)\n)\n\nexport const tagsSaveTagEvent = createAction(eventTypes.CONTENT_TAGS_SAVETAG_TOGGLED, (resolve) => (tagId: string) =>\n  resolve(tagId)\n)\n\nexport const tagsSaveStreamEvent = createAction(eventTypes.CONTENT_TAGS_SAVESTREAM_TOGGLED, (resolve) => (eventId: number) =>\n  resolve(eventId)\n)\n\nexport const tagsFilterRemovedEvent = createAction(eventTypes.CONTENT_TAGS_FILTER_REMOVED, (resolve) => () =>\n  resolve()\n)\n\nexport const tagsFilterSearchTermSelectedEvent = createAction(eventTypes.CONTENT_TAGS_FILTER_SEARCH_SELECTED, (resolve) => (searchTerm: string) =>\n  resolve(searchTerm)\n)\n\nexport const tagsFilterSearchTermRemovedEvent = createAction(eventTypes.CONTENT_TAGS_FILTER_SEARCH_REMOVED, (resolve) => () =>\n  resolve()\n)\n\nexport const savedTagsReceived = createAction(eventTypes.CONTENT_TAGS_SAVEDTAGS_RECEIVED, (resolve) => (tagIds: string[]) =>\n  resolve(tagIds)\n)\n\nexport const savedStreamsReceived = createAction(eventTypes.CONTENT_TAGS_SAVEDSTREAMS_RECEIVED, (resolve) => (savedEventIds: number[]) =>\n  resolve(savedEventIds)\n)\n\nexport type TagsEventTypes = ActionType<\n  typeof tagsRequestedEvent\n  | typeof tagsReceivedEvent\n  | typeof tagsErroredEvent\n  | typeof tagsFilterSelectedEvent\n  | typeof tagsFilterRemovedEvent\n  | typeof tagsFilterSearchTermSelectedEvent\n  | typeof tagsFilterSearchTermRemovedEvent\n  | typeof tagsStreamsReceivedEvent\n  | typeof tagsStreamsErroredEvent\n  | typeof tagsSaveTagEvent\n  | typeof tagsSaveStreamEvent\n  | typeof savedStreamsReceived\n  | typeof savedTagsReceived\n>\n"]},"metadata":{},"sourceType":"module"}