{"ast":null,"code":"import { from, of } from 'rxjs';\nimport { exhaustMap, filter, catchError } from 'rxjs/operators';\nimport { isActionOf } from 'typesafe-actions';\nimport { newsArticleRequestedEvent, newsArticleReceivedEvent, newsArticleErroredEvent } from '../events';\nimport { getArticle } from '../api/getArticle';\n\nconst newsArticleRequestedEpic = (action$, store) => action$.pipe(filter(isActionOf(newsArticleRequestedEvent)), exhaustMap(event => from(getArticle(event.payload)).pipe(exhaustMap(apiResponse => of(apiResponse.statusCode === 200 ? newsArticleReceivedEvent(apiResponse.data) : newsArticleErroredEvent(apiResponse.data))), catchError(() => of(newsArticleErroredEvent({\n  newsArticle: undefined,\n  error: 'Network error',\n  errorDescription: 'Check your network connection'\n}))))));\n\nexport default [newsArticleRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky.live-ssr/src/services/content/news/epics/newsArticleRequestedEpic.ts"],"names":["from","of","exhaustMap","filter","catchError","isActionOf","newsArticleRequestedEvent","newsArticleReceivedEvent","newsArticleErroredEvent","getArticle","newsArticleRequestedEpic","action$","store","pipe","event","payload","apiResponse","statusCode","data","newsArticle","undefined","error","errorDescription"],"mappings":"AACA,SAASA,IAAT,EAAeC,EAAf,QAAyB,MAAzB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,UAA7B,QAA+C,gBAA/C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAAyBC,yBAAzB,EAAoDC,wBAApD,EAA8EC,uBAA9E,QAA6G,WAA7G;AAEA,SAASC,UAAT,QAA2B,mBAA3B;;AAEA,MAAMC,wBAAyE,GAAG,CAACC,OAAD,EAAUC,KAAV,KAChFD,OAAO,CAACE,IAAR,CACEV,MAAM,CAACE,UAAU,CAACC,yBAAD,CAAX,CADR,EAEEJ,UAAU,CAACY,KAAK,IACdd,IAAI,CAACS,UAAU,CAACK,KAAK,CAACC,OAAP,CAAX,CAAJ,CAAgCF,IAAhC,CACEX,UAAU,CAACc,WAAW,IACpBf,EAAE,CAACe,WAAW,CAACC,UAAZ,KAA2B,GAA3B,GAAiCV,wBAAwB,CAACS,WAAW,CAACE,IAAb,CAAzD,GAA8EV,uBAAuB,CAACQ,WAAW,CAACE,IAAb,CAAtG,CADM,CADZ,EAIEd,UAAU,CAAC,MAAMH,EAAE,CAACO,uBAAuB,CAAC;AAC1CW,EAAAA,WAAW,EAAEC,SAD6B;AAE1CC,EAAAA,KAAK,EAAE,eAFmC;AAG1CC,EAAAA,gBAAgB,EAAE;AAHwB,CAAD,CAAxB,CAAT,CAJZ,CADQ,CAFZ,CADF;;AAiBA,eAAe,CAACZ,wBAAD,CAAf","sourcesContent":["import { Epic } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, filter, catchError } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { NewsEventTypes, newsArticleRequestedEvent, newsArticleReceivedEvent, newsArticleErroredEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport { getArticle } from '../api/getArticle'\n\nconst newsArticleRequestedEpic: Epic<NewsEventTypes, NewsEventTypes, RootState> = (action$, store) =>\n  action$.pipe(\n    filter(isActionOf(newsArticleRequestedEvent)),\n    exhaustMap(event =>\n      from(getArticle(event.payload)).pipe(\n        exhaustMap(apiResponse => \n          of(apiResponse.statusCode === 200 ? newsArticleReceivedEvent(apiResponse.data) : newsArticleErroredEvent(apiResponse.data))\n        ),\n        catchError(() => of(newsArticleErroredEvent({\n          newsArticle: undefined,\n          error: 'Network error',\n          errorDescription: 'Check your network connection'\n        })))\n      )\n    )\n  )\n\nexport default [newsArticleRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}