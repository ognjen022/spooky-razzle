{"ast":null,"code":"import _asyncToGenerator from \"/Users/ognjen/Desktop/spooky-live-ssr/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"/Users/ognjen/Desktop/spooky-live-ssr/ui/node_modules/@babel/runtime/regenerator\";\nimport { baseUrl } from '../../shared/baseUrl';\nimport { getHeaders } from '../../shared/getHeaders';\nexport var getConfiguration = function getConfiguration() {\n  return fetch(\"\".concat(baseUrl, \"/v1/configuration/\"), {\n    method: 'GET',\n    headers: getHeaders()\n  }).then( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n      var json, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return response.json();\n\n            case 2:\n              json = _context.sent;\n              data = json;\n              return _context.abrupt(\"return\", {\n                success: response.status === 200,\n                statusCode: response.status,\n                data: data,\n                is_success: response.status === 200\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky-live-ssr/ui/src/services/config/api/getConfiguration.ts"],"names":["baseUrl","getHeaders","getConfiguration","fetch","method","headers","then","response","json","data","success","status","statusCode","is_success"],"mappings":";;AACA,SAASA,OAAT,QAAwB,sBAAxB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AAGA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAoD;AAClF,SAAOC,KAAK,WACPH,OADO,yBACsB;AAChCI,IAAAA,MAAM,EAAE,KADwB;AAEhCC,IAAAA,OAAO,EAAEJ,UAAU;AAFa,GADtB,CAAL,CAKLK,IALK;AAAA,wEAKA,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACYA,QAAQ,CAACC,IAAT,EADZ;;AAAA;AACDA,cAAAA,IADC;AAECC,cAAAA,IAFD,GAEgCD,IAFhC;AAAA,+CAGE;AAAEE,gBAAAA,OAAO,EAAEH,QAAQ,CAACI,MAAT,KAAoB,GAA/B;AAAoCC,gBAAAA,UAAU,EAAEL,QAAQ,CAACI,MAAzD;AAAiEF,gBAAAA,IAAI,EAAJA,IAAjE;AAAuEI,gBAAAA,UAAU,EAAEN,QAAQ,CAACI,MAAT,KAAoB;AAAvG,eAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALA;;AAAA;AAAA;AAAA;AAAA,MAAP;AAUD,CAXM","sourcesContent":["import { IConfigurationResponse } from './../models';\nimport { baseUrl } from '../../shared/baseUrl'\nimport { getHeaders } from '../../shared/getHeaders'\nimport { ApiResponse } from '../../shared/ApiResponse'\n\nexport const getConfiguration = (): Promise<ApiResponse<IConfigurationResponse>> => {\n  return fetch(\n    `${baseUrl}/v1/configuration/`, {\n    method: 'GET',\n    headers: getHeaders(),\n  }\n  ).then(async (response) => {\n    let json = await response.json()\n    const data: IConfigurationResponse = json\n    return { success: response.status === 200, statusCode: response.status, data, is_success: response.status === 200 }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}