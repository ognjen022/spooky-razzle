{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { filter, mergeMap, tap } from 'rxjs/operators';\nimport { isActionOf } from 'typesafe-actions';\nimport { profileReceivedEvent } from '../events';\n\nconst profileReceivedEpic = (action$, store) => action$.pipe(filter(isActionOf(profileReceivedEvent)), tap(action => {\n  if (window.Intercom) {\n    var _action$payload$metad, _action$payload$metad2;\n\n    window.Intercom('update', {\n      name: `${(_action$payload$metad = action.payload.metadata) === null || _action$payload$metad === void 0 ? void 0 : _action$payload$metad.FirstName} ${(_action$payload$metad2 = action.payload.metadata) === null || _action$payload$metad2 === void 0 ? void 0 : _action$payload$metad2.LastName}`,\n      email: `${action.payload.email}`\n    });\n  }\n}), mergeMap(event => EMPTY));\n\nexport default [profileReceivedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky.live-ssr/src/services/userSecurity/profile/epics/profileReceivedEpic.ts"],"names":["EMPTY","filter","mergeMap","tap","isActionOf","profileReceivedEvent","profileReceivedEpic","action$","store","pipe","action","window","Intercom","name","payload","metadata","FirstName","LastName","email","event"],"mappings":"AAEA,SAASA,KAAT,QAAsB,MAAtB;AACA,SAAqBC,MAArB,EAAyCC,QAAzC,EAAmDC,GAAnD,QAA8D,gBAA9D;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAA4BC,oBAA5B,QAA6E,WAA7E;;AAIA,MAAMC,mBAA0E,GAAG,CAACC,OAAD,EAAUC,KAAV,KACjFD,OAAO,CAACE,IAAR,CACER,MAAM,CAACG,UAAU,CAACC,oBAAD,CAAX,CADR,EAEEF,GAAG,CAACO,MAAM,IAAI;AACZ,MAAKC,MAAD,CAAgBC,QAApB,EAA8B;AAAA;;AAC3BD,IAAAA,MAAD,CAAgBC,QAAhB,CAAyB,QAAzB,EAAmC;AAC/BC,MAAAA,IAAI,EAAG,GAAD,yBAAGH,MAAM,CAACI,OAAP,CAAeC,QAAlB,0DAAG,sBAAyBC,SAAU,IAAtC,0BAAyCN,MAAM,CAACI,OAAP,CAAeC,QAAxD,2DAAyC,uBAAyBE,QAAS,EADlD;AAE/BC,MAAAA,KAAK,EAAG,GAAER,MAAM,CAACI,OAAP,CAAeI,KAAM;AAFA,KAAnC;AAID;AACF,CAPE,CAFL,EAUEhB,QAAQ,CAAEiB,KAAD,IAAgBnB,KAAjB,CAVV,CADF;;AAcA,eAAe,CAACM,mBAAD,CAAf","sourcesContent":["\nimport { Epic } from 'redux-observable'\nimport { EMPTY } from 'rxjs'\nimport { exhaustMap, filter, catchError, mergeMap, tap } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { ProfileEventTypes, profileReceivedEvent, profileErroredEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport { getProfile } from '../api/getProfile'\n\nconst profileReceivedEpic: Epic<ProfileEventTypes, ProfileEventTypes, RootState> = (action$, store) =>\n  action$.pipe(\n    filter(isActionOf(profileReceivedEvent)),\n    tap(action => {\n      if ((window as any).Intercom) {\n        (window as any).Intercom('update', {\n            name: `${action.payload.metadata?.FirstName} ${action.payload.metadata?.LastName}`,\n            email: `${action.payload.email}`\n        });\n      }\n    }),\n    mergeMap((event: any) => EMPTY)\n  )\n\nexport default [profileReceivedEpic]\n"]},"metadata":{},"sourceType":"module"}