{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport { selectsavedEventIds } from '../../services/content/tags/selectors';\nimport { tagsSaveStreamEvent } from '../../services/content/tags/events';\nimport { push } from 'connected-react-router';\nimport { selectIsLoggedIn } from '../../services/userSecurity/token/selectors';\nimport { isMobile } from '../../utils/utils';\n\nconst SaveStreamButton = props => {\n  const dispatch = useDispatch();\n  const savedEventIds = useSelector(state => selectsavedEventIds(state));\n  const isLoggedIn = useSelector(state => selectIsLoggedIn(state.userSecurity.token));\n  const uniqueId = uuidv4();\n  const stream = props.stream; // const hasLivestreamEventId = stream && stream.videoStreams && stream.videoStreams.length > 0 && stream.videoStreams[0].liveStreamEventId\n\n  const eventId = stream.eventId;\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(savedEventIds.includes(stream.eventId));\n\n  const setText = () => {\n    var _props$suffix;\n\n    let prefix = 'Save';\n    let suffix = (_props$suffix = props.suffix) !== null && _props$suffix !== void 0 ? _props$suffix : 'to My Feed';\n\n    if (isMobile()) {\n      return checked ? `${prefix}d` : prefix;\n    }\n\n    return checked ? `${prefix}d ${suffix}` : `${prefix} ${suffix}`;\n  };\n\n  const onSave = () => {\n    if (isLoggedIn) {\n      dispatch(tagsSaveStreamEvent(eventId));\n    } else {\n      dispatch(push('/login-back'));\n    }\n  };\n\n  useEffect(() => {\n    setChecked(savedEventIds.includes(stream.eventId)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [savedEventIds]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: props.className\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    name: `cbx_${eventId}_${uniqueId}`,\n    id: `cbx_${eventId}_${uniqueId}`,\n    className: \"is-toggle\",\n    checked: checked,\n    onChange: onSave\n  }), __jsx(\"label\", {\n    htmlFor: `cbx_${eventId}_${uniqueId}`\n  }, setText())));\n};\n\nexport default SaveStreamButton;","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky.live-ssr/src/components/SaveButtons/SaveStreamButton.tsx"],"names":["React","useEffect","useState","useDispatch","useSelector","v4","uuidv4","selectsavedEventIds","tagsSaveStreamEvent","push","selectIsLoggedIn","isMobile","SaveStreamButton","props","dispatch","savedEventIds","state","isLoggedIn","userSecurity","token","uniqueId","stream","eventId","checked","setChecked","includes","setText","prefix","suffix","onSave","className"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAGA,SAASC,mBAAT,QAAoC,uCAApC;AACA,SAASC,mBAAT,QAAoC,oCAApC;AAEA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,gBAAT,QAAiC,6CAAjC;AACA,SAASC,QAAT,QAAyB,mBAAzB;;AAOA,MAAMC,gBAAkD,GAAIC,KAAD,IAAW;AAEpE,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,aAAa,GAAGX,WAAW,CAAsBY,KAAK,IAAIT,mBAAmB,CAACS,KAAD,CAAlD,CAAjC;AACA,QAAMC,UAAmB,GAAGb,WAAW,CAAqBY,KAAK,IAAIN,gBAAgB,CAACM,KAAK,CAACE,YAAN,CAAmBC,KAApB,CAA9C,CAAvC;AAEA,QAAMC,QAAQ,GAAGd,MAAM,EAAvB;AAEA,QAAMe,MAAM,GAAGR,KAAK,CAACQ,MAArB,CARoE,CASpE;;AACA,QAAMC,OAAO,GAAGD,MAAM,CAACC,OAAvB;AACA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBtB,QAAQ,CAACa,aAAa,CAACU,QAAd,CAAuBJ,MAAM,CAACC,OAA9B,CAAD,CAAtC;;AAEA,QAAMI,OAAO,GAAG,MAAc;AAAA;;AAE5B,QAAIC,MAAM,GAAG,MAAb;AACA,QAAIC,MAAM,oBAAGf,KAAK,CAACe,MAAT,yDAAmB,YAA7B;;AACA,QAAIjB,QAAQ,EAAZ,EAAgB;AACd,aAAOY,OAAO,GAAI,GAAEI,MAAO,GAAb,GAAkBA,MAAhC;AACD;;AAED,WAAOJ,OAAO,GAAI,GAAEI,MAAO,KAAIC,MAAO,EAAxB,GAA6B,GAAED,MAAO,IAAGC,MAAO,EAA9D;AACD,GATD;;AAWA,QAAMC,MAAM,GAAG,MAAM;AACnB,QAAIZ,UAAJ,EAAgB;AACdH,MAAAA,QAAQ,CAACN,mBAAmB,CAACc,OAAD,CAApB,CAAR;AACD,KAFD,MAEO;AACLR,MAAAA,QAAQ,CAACL,IAAI,CAAC,aAAD,CAAL,CAAR;AACD;AACF,GAND;;AAQAR,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,UAAU,CAACT,aAAa,CAACU,QAAd,CAAuBJ,MAAM,CAACC,OAA9B,CAAD,CAAV,CADc,CAEd;AACD,GAHQ,EAGN,CAACP,aAAD,CAHM,CAAT;AAKA,SAAQ,4BAEJ;AAAK,IAAA,SAAS,EAAEF,KAAK,CAACiB;AAAtB,KACE;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,IAAI,EAAG,OAAMR,OAAQ,IAAGF,QAAS,EAAxD;AAA2D,IAAA,EAAE,EAAG,OAAME,OAAQ,IAAGF,QAAS,EAA1F;AAA6F,IAAA,SAAS,EAAC,WAAvG;AAAmH,IAAA,OAAO,EAAEG,OAA5H;AAAqI,IAAA,QAAQ,EAAEM;AAA/I,IADF,EAEE;AAAO,IAAA,OAAO,EAAG,OAAMP,OAAQ,IAAGF,QAAS;AAA3C,KAA+CM,OAAO,EAAtD,CAFF,CAFI,CAAR;AAQD,CA7CD;;AA+CA,eAAed,gBAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { IStream } from '../../services/content/tags/models'\nimport { selectsavedEventIds } from '../../services/content/tags/selectors'\nimport { tagsSaveStreamEvent } from '../../services/content/tags/events'\nimport { RootState } from '../../services/RootState'\nimport { push } from 'connected-react-router'\nimport { selectIsLoggedIn } from '../../services/userSecurity/token/selectors'\nimport { isMobile } from '../../utils/utils'\n\ninterface ISaveStreamButtonProps {\n  stream: IStream\n  className: string,\n  suffix?: string | undefined\n}\nconst SaveStreamButton: React.FC<ISaveStreamButtonProps> = (props) => {\n\n  const dispatch = useDispatch()\n  const savedEventIds = useSelector<RootState, number[]>(state => selectsavedEventIds(state))\n  const isLoggedIn: boolean = useSelector<RootState, boolean>(state => selectIsLoggedIn(state.userSecurity.token))\n\n  const uniqueId = uuidv4()\n\n  const stream = props.stream\n  // const hasLivestreamEventId = stream && stream.videoStreams && stream.videoStreams.length > 0 && stream.videoStreams[0].liveStreamEventId\n  const eventId = stream.eventId\n  const [checked, setChecked] = useState(savedEventIds.includes(stream.eventId))\n\n  const setText = (): string => {\n\n    let prefix = 'Save'\n    let suffix = props.suffix ?? 'to My Feed'\n    if (isMobile()) {\n      return checked ? `${prefix}d` : prefix;\n    }\n\n    return checked ? `${prefix}d ${suffix}` : `${prefix} ${suffix}`;\n  }\n\n  const onSave = () => {\n    if (isLoggedIn) {\n      dispatch(tagsSaveStreamEvent(eventId))\n    } else {\n      dispatch(push('/login-back'))\n    }\n  }\n\n  useEffect(() => {\n    setChecked(savedEventIds.includes(stream.eventId))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [savedEventIds]);\n\n  return (<>\n    {\n      <div className={props.className}>\n        <input type=\"checkbox\" name={`cbx_${eventId}_${uniqueId}`} id={`cbx_${eventId}_${uniqueId}`} className=\"is-toggle\" checked={checked} onChange={onSave} />\n        <label htmlFor={`cbx_${eventId}_${uniqueId}`}>{setText()}</label>\n      </div>\n    }\n  </>)\n}\n\nexport default SaveStreamButton"]},"metadata":{},"sourceType":"module"}