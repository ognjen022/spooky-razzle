{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { VideoStreamStatus } from '../../services/content/tags/models';\nimport { getAccessToken } from '../../services/shared/tokenLocalStorage';\nimport { withRouter, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { showPurchaseModalToggledEvent } from '../../services/payments/purchase/events';\nimport { selectVideoStreamStatus } from '../../services/content/tags/selectors';\nimport moment from 'moment';\nimport { accountToggleLoginEvent } from '../../services/userSecurity/accountDetails/events';\n\nvar PlayButton = function PlayButton(_ref) {\n  var stream = _ref.stream,\n      className = _ref.className,\n      playStream = _ref.playStream,\n      history = _ref.history,\n      mobileRedirectUrl = _ref.mobileRedirectUrl;\n  var currentDate = new Date();\n  var streamDate = new Date(stream.startTime);\n  var validStartTime = streamDate < currentDate;\n  var dispatch = useDispatch();\n  var streamStatus = useSelector(function (state) {\n    return selectVideoStreamStatus(state, stream);\n  });\n  var router = useHistory();\n\n  var handlePlayStream = function handlePlayStream() {\n    var token = getAccessToken();\n\n    if (streamStatus === VideoStreamStatus.FreeNotLoggedIn || streamStatus === VideoStreamStatus.NotPurchasedNotLoggedIn || streamStatus === VideoStreamStatus.NotPurchased) {\n      dispatch(accountToggleLoginEvent(function () {\n        return showPurchaseModalToggledEvent({}, undefined, stream === null || stream === void 0 ? void 0 : stream.eventId);\n      })); //dispatch(showPurchaseModalToggledEvent({}, undefined, stream?.eventId))\n    } else if (streamStatus === VideoStreamStatus.Free || streamStatus === VideoStreamStatus.Purchased) {\n      if (mobileRedirectUrl) {\n        router.push(mobileRedirectUrl); //window.location.href = mobileRedirectUrl\n      } else {\n        playStream();\n      }\n    }\n  };\n\n  if (!stream || moment().isBefore(moment(stream.startTime))) {\n    return __jsx(React.Fragment, null);\n  } else return __jsx(\"div\", {\n    role: \"button\",\n    className: className,\n    onClick: handlePlayStream\n  }, __jsx(\"svg\", {\n    className: \"icon\",\n    role: \"presentation\"\n  }, __jsx(\"use\", {\n    xlinkHref: \"#icon-play\"\n  })));\n};\n\nexport default withRouter(PlayButton);","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/components/PlayButton/PlayButton.tsx"],"names":["React","VideoStreamStatus","getAccessToken","withRouter","useHistory","useDispatch","useSelector","showPurchaseModalToggledEvent","selectVideoStreamStatus","moment","accountToggleLoginEvent","PlayButton","stream","className","playStream","history","mobileRedirectUrl","currentDate","Date","streamDate","startTime","validStartTime","dispatch","streamStatus","state","router","handlePlayStream","token","FreeNotLoggedIn","NotPurchasedNotLoggedIn","NotPurchased","undefined","eventId","Free","Purchased","push","isBefore"],"mappings":";AAAA,OAAOA,KAAP,MAAqC,OAArC;AACA,SAAkBC,iBAAlB,QAA2C,oCAA3C;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA,SAASC,UAAT,EAA0CC,UAA1C,QAA4D,kBAA5D;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,6BAAT,QAA8C,yCAA9C;AAEA,SAASC,uBAAT,QAAwC,uCAAxC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SAASC,uBAAT,QAAwC,mDAAxC;;AASA,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,OAAmE;AAAA,MAAhEC,MAAgE,QAAhEA,MAAgE;AAAA,MAAxDC,SAAwD,QAAxDA,SAAwD;AAAA,MAA7CC,UAA6C,QAA7CA,UAA6C;AAAA,MAAjCC,OAAiC,QAAjCA,OAAiC;AAAA,MAAxBC,iBAAwB,QAAxBA,iBAAwB;AAC/G,MAAMC,WAAW,GAAG,IAAIC,IAAJ,EAApB;AACA,MAAMC,UAAU,GAAG,IAAID,IAAJ,CAASN,MAAM,CAACQ,SAAhB,CAAnB;AACA,MAAMC,cAAc,GAAGF,UAAU,GAAGF,WAApC;AACA,MAAMK,QAAQ,GAAGjB,WAAW,EAA5B;AACA,MAAMkB,YAAY,GAAGjB,WAAW,CAA+B,UAAAkB,KAAK;AAAA,WAAIhB,uBAAuB,CAACgB,KAAD,EAAQZ,MAAR,CAA3B;AAAA,GAApC,CAAhC;AACA,MAAMa,MAAM,GAAGrB,UAAU,EAAzB;;AACA,MAAMsB,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,QAAMC,KAAK,GAAGzB,cAAc,EAA5B;;AACA,QAAIqB,YAAY,KAAKtB,iBAAiB,CAAC2B,eAAnC,IAAsDL,YAAY,KAAKtB,iBAAiB,CAAC4B,uBAAzF,IAAoHN,YAAY,KAAKtB,iBAAiB,CAAC6B,YAA3J,EAAyK;AACvKR,MAAAA,QAAQ,CAACZ,uBAAuB,CAAC;AAAA,eAAMH,6BAA6B,CAAC,EAAD,EAAKwB,SAAL,EAAgBnB,MAAhB,aAAgBA,MAAhB,uBAAgBA,MAAM,CAAEoB,OAAxB,CAAnC;AAAA,OAAD,CAAxB,CAAR,CADuK,CAEvK;AACD,KAHD,MAGO,IAAIT,YAAY,KAAKtB,iBAAiB,CAACgC,IAAnC,IAA2CV,YAAY,KAAKtB,iBAAiB,CAACiC,SAAlF,EAA6F;AAClG,UAAIlB,iBAAJ,EAAuB;AACrBS,QAAAA,MAAM,CAACU,IAAP,CAAYnB,iBAAZ,EADqB,CAErB;AACD,OAHD,MAGO;AACLF,QAAAA,UAAU;AACX;AACF;AACF,GAbD;;AAeA,MAAI,CAACF,MAAD,IAAWH,MAAM,GAAG2B,QAAT,CAAkB3B,MAAM,CAACG,MAAM,CAACQ,SAAR,CAAxB,CAAf,EAA4D;AAC1D,WAAO,2BAAP;AACD,GAFD,MAIK,OACH;AAAK,IAAA,IAAI,EAAC,QAAV;AAAmB,IAAA,SAAS,EAAEP,SAA9B;AAAyC,IAAA,OAAO,EAAEa;AAAlD,KACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,IAAI,EAAC;AAA3B,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,IADF,CADF,CADG;AAON,CAjCD;;AAmCA,eAAevB,UAAU,CAACQ,UAAD,CAAzB","sourcesContent":["import React, { useDebugValue } from 'react';\nimport { IStream, VideoStreamStatus } from '../../services/content/tags/models'\nimport { getAccessToken } from '../../services/shared/tokenLocalStorage'\nimport { withRouter, RouteComponentProps, useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { push, routerActions } from 'connected-react-router'\nimport { showPurchaseModalToggledEvent } from '../../services/payments/purchase/events';\nimport { RootState } from '../../services/RootState';\nimport { selectVideoStreamStatus } from '../../services/content/tags/selectors';\nimport moment from 'moment'\nimport { isIos } from '../../utils/utils';\nimport { accountToggleLoginEvent } from '../../services/userSecurity/accountDetails/events';\n\ninterface PlayButtonProps extends RouteComponentProps {\n  stream: IStream\n  className: string\n  playStream: Function\n  mobileRedirectUrl: string | undefined\n}\n\nconst PlayButton: React.FC<PlayButtonProps> = ({ stream, className, playStream, history, mobileRedirectUrl }) => {\n  const currentDate = new Date();\n  const streamDate = new Date(stream.startTime);\n  const validStartTime = streamDate < currentDate;\n  const dispatch = useDispatch()\n  const streamStatus = useSelector<RootState, VideoStreamStatus>(state => selectVideoStreamStatus(state, stream))\n  const router = useHistory();\n  const handlePlayStream = () => {\n    const token = getAccessToken()\n    if (streamStatus === VideoStreamStatus.FreeNotLoggedIn || streamStatus === VideoStreamStatus.NotPurchasedNotLoggedIn || streamStatus === VideoStreamStatus.NotPurchased) {\n      dispatch(accountToggleLoginEvent(() => showPurchaseModalToggledEvent({}, undefined, stream?.eventId)));\n      //dispatch(showPurchaseModalToggledEvent({}, undefined, stream?.eventId))\n    } else if (streamStatus === VideoStreamStatus.Free || streamStatus === VideoStreamStatus.Purchased) {\n      if (mobileRedirectUrl) {\n        router.push(mobileRedirectUrl);\n        //window.location.href = mobileRedirectUrl\n      } else {\n        playStream()\n      }\n    }\n  }\n\n  if (!stream || moment().isBefore(moment(stream.startTime))) {\n    return <></>\n  }\n\n  else return (\n    <div role=\"button\" className={className} onClick={handlePlayStream}>\n      <svg className=\"icon\" role=\"presentation\">\n        <use xlinkHref=\"#icon-play\"></use>\n      </svg>\n    </div>\n  )\n}\n\nexport default withRouter(PlayButton)"]},"metadata":{},"sourceType":"module"}