{"ast":null,"code":"import { selectSeasonPassPriceFormatted } from './../../products/selectors';\nimport { tokenRefreshTokenRequestedEvent } from './../../../userSecurity/token/events';\nimport { ofType } from 'redux-observable';\nimport { from, of } from 'rxjs';\nimport { exhaustMap, catchError } from 'rxjs/operators';\nimport { purchaseTagErroredEvent, purchaseTagReceivedEvent } from '../events';\nimport { postPurchaseProduct } from '../api/postPurchaseProduct';\nimport * as eventTypes from '../eventTypes';\nimport Notifications from 'react-notification-system-redux';\nimport { tagsSaveTagEvent } from '../../../content/tags/events';\nimport { selectTag } from '../../../content/tags/selectors';\nimport { selectSelectedStripeProductId } from '../selectors';\n\nconst getSuccessNotification = () => {\n  return Notifications.success({\n    title: 'Payment succeeded',\n    message: 'Enjoy your purchase',\n    position: 'tc',\n    autoDismiss: 10,\n    action: {\n      label: 'Close',\n      callback: () => console.log('Notification closed')\n    }\n  });\n};\n\nconst getErrorNotification = error => {\n  return Notifications.error({\n    title: 'Payment failed',\n    message: `An error occurred ${error}`,\n    position: 'tc',\n    autoDismiss: 10,\n    action: {\n      label: 'Close',\n      callback: () => console.log('Notification closed')\n    }\n  });\n};\n\nconst purchaseTagRequestedEpic = (action$, state$) => action$.pipe(ofType(eventTypes.PAYMENTS_PURCHASE_TAG_REQUESTED), exhaustMap(() => from(postPurchaseProduct(selectSelectedStripeProductId(state$.value), '', {\n  _id: 1,\n  token: state$.value.payments.paymentDetails.token.id,\n  brand: state$.value.payments.paymentDetails.token.card.brand,\n  last4: state$.value.payments.paymentDetails.token.card.last4,\n  expiry_year: state$.value.payments.paymentDetails.token.card.exp_year,\n  expiry_month: state$.value.payments.paymentDetails.token.card.exp_month\n})).pipe(exhaustMap(apiResponse => {\n  if (apiResponse.is_success) {\n    const tagId = state$.value.payments.purchase.tagId;\n    const tag = selectTag(state$.value, tagId);\n    const seasonPassPriceFormatted = selectSeasonPassPriceFormatted(state$.value);\n\n    try {\n      let data = {\n        'event': 'transaction',\n        'ecommerce': {\n          'purchase': {\n            'actionField': {\n              'id': tag === null || tag === void 0 ? void 0 : tag.stripeProductId,\n              'affiliation': 'Tag',\n              'revenue': seasonPassPriceFormatted,\n              'tax': '$0.00',\n              'shipping': '$0.00',\n              'coupon': ''\n            },\n            'products': [{\n              'name': tag === null || tag === void 0 ? void 0 : tag.name,\n              'id': tag === null || tag === void 0 ? void 0 : tag.id,\n              'price': seasonPassPriceFormatted,\n              'brand': '',\n              'category': '',\n              'variant': '',\n              'quantity': 1,\n              'coupon': ''\n            }]\n          }\n        }\n      };\n      window.dataLayer.push(data);\n    } catch (err) {\n      console.log('purchaseTagRequestedEpic dataLayer push error', err);\n    }\n\n    return of(tokenRefreshTokenRequestedEvent(), purchaseTagReceivedEvent((tag === null || tag === void 0 ? void 0 : tag.path) || ''), getSuccessNotification(), tagsSaveTagEvent(state$.value.payments.purchase.tagId || '')); // todo: saved already this will unsave\n  } else {\n    return of(purchaseTagErroredEvent(apiResponse.data), getErrorNotification(apiResponse.data));\n  }\n}), catchError(() => of(purchaseTagErroredEvent({\n  id: undefined,\n  error: 'Network error',\n  errorDescription: 'Check your internet connection'\n}))))));\n\nexport default [purchaseTagRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky.live-ssr/src/services/payments/purchase/epics/purchaseTagRequestedEpic.ts"],"names":["selectSeasonPassPriceFormatted","tokenRefreshTokenRequestedEvent","ofType","from","of","exhaustMap","catchError","purchaseTagErroredEvent","purchaseTagReceivedEvent","postPurchaseProduct","eventTypes","Notifications","tagsSaveTagEvent","selectTag","selectSelectedStripeProductId","getSuccessNotification","success","title","message","position","autoDismiss","action","label","callback","console","log","getErrorNotification","error","purchaseTagRequestedEpic","action$","state$","pipe","PAYMENTS_PURCHASE_TAG_REQUESTED","value","_id","token","payments","paymentDetails","id","brand","card","last4","expiry_year","exp_year","expiry_month","exp_month","apiResponse","is_success","tagId","purchase","tag","seasonPassPriceFormatted","data","stripeProductId","name","window","dataLayer","push","err","path","undefined","errorDescription"],"mappings":"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","sourcesContent":["import { selectSeasonPassPriceFormatted } from './../../products/selectors';\nimport { tokenRefreshTokenRequestedEvent } from './../../../userSecurity/token/events';\nimport { Epic, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, catchError } from 'rxjs/operators'\nimport { purchaseTagErroredEvent, purchaseTagReceivedEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport { postPurchaseProduct } from '../api/postPurchaseProduct'\nimport * as eventTypes from '../eventTypes'\nimport Notifications from 'react-notification-system-redux'\nimport { tagsSaveTagEvent } from '../../../content/tags/events'\nimport { selectTag } from '../../../content/tags/selectors'\nimport { selectSelectedStripeProductId } from '../selectors'\n\nconst getSuccessNotification = () => {\n  return Notifications.success(\n    {\n      title: 'Payment succeeded',\n      message: 'Enjoy your purchase',\n      position: 'tc',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    }\n  )\n}\n\nconst getErrorNotification = (error: any) => {\n  return Notifications.error(\n    {\n      title: 'Payment failed',\n      message: `An error occurred ${error}`,\n      position: 'tc',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    }\n  )\n}\n\nconst purchaseTagRequestedEpic: Epic<any, any, RootState> = (action$, state$) =>\n  action$.pipe(\n    ofType(eventTypes.PAYMENTS_PURCHASE_TAG_REQUESTED),\n    exhaustMap(() =>\n      from(postPurchaseProduct(selectSelectedStripeProductId(state$.value), '', {\n        _id: 1,\n        token: state$.value.payments.paymentDetails.token.id,\n        brand: state$.value.payments.paymentDetails.token.card.brand,\n        last4: state$.value.payments.paymentDetails.token.card.last4,\n        expiry_year: state$.value.payments.paymentDetails.token.card.exp_year,\n        expiry_month: state$.value.payments.paymentDetails.token.card.exp_month\n      })).pipe(\n        exhaustMap(apiResponse => {\n          if (apiResponse.is_success) {\n            const tagId = state$.value.payments.purchase.tagId\n            const tag = selectTag(state$.value, tagId)\n\n            const seasonPassPriceFormatted = selectSeasonPassPriceFormatted(state$.value);\n            try {\n              let data = {\n                'event': 'transaction',\n                'ecommerce': {\n                  'purchase': {\n                    'actionField': {\n                      'id': tag?.stripeProductId,\n                      'affiliation': 'Tag',\n                      'revenue': seasonPassPriceFormatted,\n                      'tax': '$0.00',\n                      'shipping': '$0.00',\n                      'coupon': ''\n                    },\n                    'products': [{\n                      'name': tag?.name,\n                      'id': tag?.id,\n                      'price': seasonPassPriceFormatted,\n                      'brand': '',\n                      'category': '',\n                      'variant': '',\n                      'quantity': 1,\n                      'coupon': ''\n                    }]\n                  }\n                }\n              };\n              (window as any).dataLayer.push(data);\n            } catch (err) {\n              console.log('purchaseTagRequestedEpic dataLayer push error', err);\n            }\n\n            return of(tokenRefreshTokenRequestedEvent(), purchaseTagReceivedEvent(tag?.path || ''), getSuccessNotification(), tagsSaveTagEvent(state$.value.payments.purchase.tagId || '')) // todo: saved already this will unsave\n          } else {\n            return of(purchaseTagErroredEvent(apiResponse.data), getErrorNotification(apiResponse.data))\n          }\n        }),\n        catchError(() => of(purchaseTagErroredEvent({\n          id: undefined,\n          error: 'Network error',\n          errorDescription: 'Check your internet connection'\n        })))\n      )\n    )\n  )\n\nexport default [purchaseTagRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}