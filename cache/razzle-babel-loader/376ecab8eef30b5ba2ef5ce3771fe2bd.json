{"ast":null,"code":"import { from, of } from 'rxjs';\nimport { exhaustMap, filter, catchError } from 'rxjs/operators';\nimport { isActionOf } from 'typesafe-actions';\nimport { newsRequestedEvent, newsReceivedEvent, newsErroredEvent } from '../events';\nimport { getNews } from '../api/getNews';\n\nvar newsRequestedEpic = function newsRequestedEpic(action$, store) {\n  return action$.pipe(filter(isActionOf(newsRequestedEvent)), exhaustMap(function (event) {\n    return from(getNews()).pipe(exhaustMap(function (apiResponse) {\n      return of(apiResponse.statusCode === 200 ? newsReceivedEvent(apiResponse.data) : newsErroredEvent(apiResponse.data));\n    }), catchError(function () {\n      return of(newsErroredEvent({\n        newsMetaData: [],\n        error: 'Network error',\n        errorDescription: 'Check your network connection'\n      }));\n    }));\n  }));\n};\n\nexport default [newsRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky.live-ssr/src/services/content/news/epics/newsRequestedEpic.ts"],"names":["from","of","exhaustMap","filter","catchError","isActionOf","newsRequestedEvent","newsReceivedEvent","newsErroredEvent","getNews","newsRequestedEpic","action$","store","pipe","event","apiResponse","statusCode","data","newsMetaData","error","errorDescription"],"mappings":"AACA,SAASA,IAAT,EAAeC,EAAf,QAAyB,MAAzB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,UAA7B,QAA+C,gBAA/C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAAyBC,kBAAzB,EAA6CC,iBAA7C,EAAgEC,gBAAhE,QAAwF,WAAxF;AAEA,SAASC,OAAT,QAAwB,gBAAxB;;AAEA,IAAMC,iBAAkE,GAAG,SAArEA,iBAAqE,CAACC,OAAD,EAAUC,KAAV;AAAA,SACzED,OAAO,CAACE,IAAR,CACEV,MAAM,CAACE,UAAU,CAACC,kBAAD,CAAX,CADR,EAEEJ,UAAU,CAAC,UAAAY,KAAK;AAAA,WACdd,IAAI,CAACS,OAAO,EAAR,CAAJ,CAAgBI,IAAhB,CACEX,UAAU,CAAC,UAAAa,WAAW;AAAA,aACpBd,EAAE,CAACc,WAAW,CAACC,UAAZ,KAA2B,GAA3B,GAAiCT,iBAAiB,CAACQ,WAAW,CAACE,IAAb,CAAlD,GAAuET,gBAAgB,CAACO,WAAW,CAACE,IAAb,CAAxF,CADkB;AAAA,KAAZ,CADZ,EAIEb,UAAU,CAAC;AAAA,aAAMH,EAAE,CAACO,gBAAgB,CAAC;AACnCU,QAAAA,YAAY,EAAE,EADqB;AAEnCC,QAAAA,KAAK,EAAE,eAF4B;AAGnCC,QAAAA,gBAAgB,EAAE;AAHiB,OAAD,CAAjB,CAAR;AAAA,KAAD,CAJZ,CADc;AAAA,GAAN,CAFZ,CADyE;AAAA,CAA3E;;AAiBA,eAAe,CAACV,iBAAD,CAAf","sourcesContent":["import { Epic } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, filter, catchError } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { NewsEventTypes, newsRequestedEvent, newsReceivedEvent, newsErroredEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport { getNews } from '../api/getNews'\n\nconst newsRequestedEpic: Epic<NewsEventTypes, NewsEventTypes, RootState> = (action$, store) =>\n  action$.pipe(\n    filter(isActionOf(newsRequestedEvent)),\n    exhaustMap(event =>\n      from(getNews()).pipe(\n        exhaustMap(apiResponse => \n          of(apiResponse.statusCode === 200 ? newsReceivedEvent(apiResponse.data) : newsErroredEvent(apiResponse.data))\n        ),\n        catchError(() => of(newsErroredEvent({\n          newsMetaData: [],\n          error: 'Network error',\n          errorDescription: 'Check your network connection'\n        })))\n      )\n    )\n  )\n\nexport default [newsRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}