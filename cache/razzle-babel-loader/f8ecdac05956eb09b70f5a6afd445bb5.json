{"ast":null,"code":"import { baseUrl } from '../../../shared/baseUrl';\nimport { getHeaders } from '../../../shared/getHeaders';\nexport const postOrDeleteSavedStreams = (eventId, method) => {\n  return fetch(`${baseUrl}/v1/videostream/saved/${eventId}`, {\n    method,\n    headers: getHeaders()\n  }).then(async response => {\n    let json = await response.json();\n    const jsonData = json.data;\n    const data = {\n      tree: jsonData,\n      error: '',\n      errorDescription: ''\n    };\n    return {\n      success: json.success,\n      statusCode: json.statusCode,\n      data,\n      is_success: json.success\n    };\n  });\n};","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky-live-ssr/ui/src/services/content/tags/api/postOrDeleteSavedStreams.ts"],"names":["baseUrl","getHeaders","postOrDeleteSavedStreams","eventId","method","fetch","headers","then","response","json","jsonData","data","tree","error","errorDescription","success","statusCode","is_success"],"mappings":"AACA,SAASA,OAAT,QAAwB,yBAAxB;AACA,SAASC,UAAT,QAA2B,4BAA3B;AAGA,OAAO,MAAMC,wBAAwB,GAAG,CAACC,OAAD,EAAkBC,MAAlB,KAAgE;AACtG,SAAOC,KAAK,CACT,GAAEL,OAAQ,yBAAwBG,OAAQ,EADjC,EACoC;AAC9CC,IAAAA,MAD8C;AAE9CE,IAAAA,OAAO,EAAEL,UAAU;AAF2B,GADpC,CAAL,CAKLM,IALK,CAKA,MAAOC,QAAP,IAAoB;AACzB,QAAIC,IAAI,GAAG,MAAMD,QAAQ,CAACC,IAAT,EAAjB;AACA,UAAMC,QAAa,GAAGD,IAAI,CAACE,IAA3B;AACA,UAAMA,IAAmB,GAAG;AAC1BC,MAAAA,IAAI,EAAEF,QADoB;AAE1BG,MAAAA,KAAK,EAAE,EAFmB;AAG1BC,MAAAA,gBAAgB,EAAE;AAHQ,KAA5B;AAKA,WAAO;AAAEC,MAAAA,OAAO,EAAEN,IAAI,CAACM,OAAhB;AAAyBC,MAAAA,UAAU,EAAEP,IAAI,CAACO,UAA1C;AAAsDL,MAAAA,IAAtD;AAA4DM,MAAAA,UAAU,EAAER,IAAI,CAACM;AAA7E,KAAP;AACD,GAdM,CAAP;AAeD,CAhBM","sourcesContent":["import { ITagsResponse } from '../models'\nimport { baseUrl } from '../../../shared/baseUrl'\nimport { getHeaders } from '../../../shared/getHeaders'\nimport { ApiResponse } from '../../../shared/ApiResponse'\n\nexport const postOrDeleteSavedStreams = (eventId: number, method: string): Promise<ApiResponse<any>> => {\n  return fetch(\n    `${baseUrl}/v1/videostream/saved/${eventId}`, {\n    method,\n    headers: getHeaders(),\n  }\n  ).then(async (response) => {\n    let json = await response.json()\n    const jsonData: any = json.data\n    const data: ITagsResponse = {\n      tree: jsonData,\n      error: '',\n      errorDescription: ''\n    }\n    return { success: json.success, statusCode: json.statusCode, data, is_success: json.success }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}