{"ast":null,"code":"import { ofType } from 'redux-observable';\nimport { EMPTY } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nconst gtmDataLayerPushEpic = action$ => action$.pipe(ofType('@@router/LOCATION_CHANGE'),\n/*    tap(event => {\n      console.log('gtmDataLayerPushEpic tap');\n      (window as any).dataLayer.push(event);\n    }), */\nmergeMap(event => {\n  let data = {\n    event: 'Pageview',\n    pagePath: window.location.href,\n    pageTitle: document.title //some arbitrary name for the page/state\n\n  };\n\n  if (false && window.document && window.document.createElement) {// ;(window as any).dataLayer.push(data)\n  } // console.log('data.push', data)\n\n\n  return EMPTY;\n  /*return of(Notifications.info(\n    {\n      // uid: 'once-please', // you can specify your own uid if required\n      title: 'Route changed',\n      message: '',\n      position: 'tr',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    }\n  )) */\n}));\n\nexport default [gtmDataLayerPushEpic];\n/*\ns\n{\n  // uid: 'once-please', // you can specify your own uid if required\n  title: 'Hey, it\\'s good to see you!',\n  message: 'Now you can see how easy it is to use notifications in React!',\n  position: 'tr',\n  autoDismiss: 0,\n  action: {\n    label: 'Click me!!',\n    callback: () => alert('clicked!')\n  }\n}\n\n*/","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky.live-ssr/src/services/shared/epics/gtmDataLayerPushEpic.ts"],"names":["ofType","EMPTY","mergeMap","gtmDataLayerPushEpic","action$","pipe","event","data","pagePath","window","location","href","pageTitle","document","title","createElement"],"mappings":"AAAA,SAAeA,MAAf,QAA6B,kBAA7B;AACA,SAAaC,KAAb,QAA0B,MAA1B;AACA,SAASC,QAAT,QAAsC,gBAAtC;;AAMA,MAAMC,oBAA+C,GAAGC,OAAO,IAC7DA,OAAO,CAACC,IAAR,CACEL,MAAM,CAAC,0BAAD,CADR;AAEE;AACJ;AACA;AACA;AACIE,QAAQ,CAACI,KAAK,IAAI;AAChB,MAAIC,IAAI,GAAG;AACTD,IAAAA,KAAK,EAAE,UADE;AAETE,IAAAA,QAAQ,EAAEC,MAAM,CAACC,QAAP,CAAgBC,IAFjB;AAGTC,IAAAA,SAAS,EAAEC,QAAQ,CAACC,KAHX,CAGiB;;AAHjB,GAAX;;AAKA,MAAI,SAAiCL,MAAM,CAACI,QAAxC,IAAoDJ,MAAM,CAACI,QAAP,CAAgBE,aAAxE,EAAuF,CACrF;AACD,GARe,CAShB;;;AACA,SAAOd,KAAP;AACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACK,CAxBO,CANV,CADF;;AAkCA,eAAe,CAACE,oBAAD,CAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Epic, ofType } from 'redux-observable'\nimport { of, EMPTY } from 'rxjs'\nimport { mergeMap, filter, tap } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { RootState } from '../../RootState'\nimport Notifications from 'react-notification-system-redux'\nimport { networkErroredEvent } from '../networkErroredEvent'\n\nconst gtmDataLayerPushEpic: Epic<any, any, RootState> = action$ =>\n  action$.pipe(\n    ofType('@@router/LOCATION_CHANGE'),\n    /*    tap(event => {\n          console.log('gtmDataLayerPushEpic tap');\n          (window as any).dataLayer.push(event);\n        }), */\n    mergeMap(event => {\n      let data = {\n        event: 'Pageview',\n        pagePath: window.location.href,\n        pageTitle: document.title //some arbitrary name for the page/state\n      }\n      if (typeof window !== 'undefined' && window.document && window.document.createElement) {\n        // ;(window as any).dataLayer.push(data)\n      }\n      // console.log('data.push', data)\n      return EMPTY\n      /*return of(Notifications.info(\n        {\n          // uid: 'once-please', // you can specify your own uid if required\n          title: 'Route changed',\n          message: '',\n          position: 'tr',\n          autoDismiss: 10,\n          action: {\n            label: 'Close',\n            callback: () => console.log('Notification closed')\n          }\n        }\n      )) */\n    })\n  )\n\nexport default [gtmDataLayerPushEpic]\n\n/*\ns\n{\n  // uid: 'once-please', // you can specify your own uid if required\n  title: 'Hey, it\\'s good to see you!',\n  message: 'Now you can see how easy it is to use notifications in React!',\n  position: 'tr',\n  autoDismiss: 0,\n  action: {\n    label: 'Click me!!',\n    callback: () => alert('clicked!')\n  }\n}\n\n*/\n"]},"metadata":{},"sourceType":"module"}