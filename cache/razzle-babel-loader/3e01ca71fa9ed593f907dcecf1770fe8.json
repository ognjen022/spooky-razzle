{"ast":null,"code":"import _objectSpread from \"/Users/ognjen/Desktop/spooky-live-ssr/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { USERSECURITY_TOKEN_REFRESH_REQUESTED } from './../eventTypes';\nimport { ofType } from 'redux-observable';\nimport { from, of } from 'rxjs';\nimport { exhaustMap, catchError } from 'rxjs/operators';\nimport { tokenReceivedEvent, tokenErroredEvent } from '../events';\nimport { postUpdateToken } from '../api/postUpdateToken';\nimport { getRefreshToken } from '../../../shared/tokenLocalStorage';\n\nvar refreshTokenRequestedEpic = function refreshTokenRequestedEpic(action$) {\n  return action$.pipe(ofType(USERSECURITY_TOKEN_REFRESH_REQUESTED), exhaustMap(function (event) {\n    return from(postUpdateToken(getRefreshToken())).pipe(exhaustMap(function (apiResponse) {\n      var _event$payload;\n\n      // console.log('refreshTokenRequestedEpic apiResponse', apiResponse)\n      return of(apiResponse.statusCode === 200 ? tokenReceivedEvent(_objectSpread(_objectSpread({}, apiResponse.data), {}, {\n        redirectTo: event === null || event === void 0 ? void 0 : (_event$payload = event.payload) === null || _event$payload === void 0 ? void 0 : _event$payload.value\n      })) : tokenErroredEvent(apiResponse.data));\n    }), catchError(function () {\n      return of(tokenErroredEvent({\n        accessToken: undefined,\n        expiresIn: 0,\n        expiry: undefined,\n        idToken: undefined,\n        scope: undefined,\n        tokenType: undefined,\n        error: 'Network error',\n        errorDescription: 'Check your internet connection',\n        refreshToken: undefined,\n        redirectTo: undefined\n      }));\n    }));\n  }));\n};\n\nexport default [refreshTokenRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky-live-ssr/ui/src/services/userSecurity/token/epics/refreshTokenRequestedEpic.ts"],"names":["USERSECURITY_TOKEN_REFRESH_REQUESTED","ofType","from","of","exhaustMap","catchError","tokenReceivedEvent","tokenErroredEvent","postUpdateToken","getRefreshToken","refreshTokenRequestedEpic","action$","pipe","event","apiResponse","statusCode","data","redirectTo","payload","value","accessToken","undefined","expiresIn","expiry","idToken","scope","tokenType","error","errorDescription","refreshToken"],"mappings":";AAAA,SAASA,oCAAT,QAAqD,iBAArD;AACA,SAAeC,MAAf,QAA6B,kBAA7B;AACA,SAASC,IAAT,EAAeC,EAAf,QAAyB,MAAzB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,gBAAvC;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,WAAtD;AAEA,SAASC,eAAT,QAAgC,wBAAhC;AAEA,SAASC,eAAT,QAAgC,mCAAhC;;AAGA,IAAMC,yBAAoD,GAAG,SAAvDA,yBAAuD,CAACC,OAAD;AAAA,SAC3DA,OAAO,CAACC,IAAR,CACEX,MAAM,CAACD,oCAAD,CADR,EAEEI,UAAU,CAAC,UAACS,KAAD;AAAA,WACTX,IAAI,CAACM,eAAe,CAACC,eAAe,EAAhB,CAAhB,CAAJ,CAAyCG,IAAzC,CACER,UAAU,CAAC,UAAAU,WAAW,EAAI;AAAA;;AACxB;AACA,aAAOX,EAAE,CAACW,WAAW,CAACC,UAAZ,KAA2B,GAA3B,GAAiCT,kBAAkB,iCAAMQ,WAAW,CAACE,IAAlB;AAAwBC,QAAAA,UAAU,EAAEJ,KAAF,aAAEA,KAAF,yCAAEA,KAAK,CAAEK,OAAT,mDAAE,eAAgBC;AAApD,SAAnD,GAAkHZ,iBAAiB,CAACO,WAAW,CAACE,IAAb,CAApI,CAAT;AACD,KAHS,CADZ,EAKEX,UAAU,CAAC;AAAA,aAAMF,EAAE,CAACI,iBAAiB,CAAC;AACpCa,QAAAA,WAAW,EAAEC,SADuB;AAEpCC,QAAAA,SAAS,EAAE,CAFyB;AAGpCC,QAAAA,MAAM,EAAEF,SAH4B;AAIpCG,QAAAA,OAAO,EAAEH,SAJ2B;AAKpCI,QAAAA,KAAK,EAAEJ,SAL6B;AAMpCK,QAAAA,SAAS,EAAEL,SANyB;AAOpCM,QAAAA,KAAK,EAAE,eAP6B;AAQpCC,QAAAA,gBAAgB,EAAE,gCARkB;AASpCC,QAAAA,YAAY,EAAER,SATsB;AAUpCJ,QAAAA,UAAU,EAAEI;AAVwB,OAAD,CAAlB,CAAR;AAAA,KAAD,CALZ,CADS;AAAA,GAAD,CAFZ,CAD2D;AAAA,CAA7D;;AAyBA,eAAe,CAACX,yBAAD,CAAf","sourcesContent":["import { USERSECURITY_TOKEN_REFRESH_REQUESTED } from './../eventTypes';\nimport { Epic, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, catchError } from 'rxjs/operators'\nimport { tokenReceivedEvent, tokenErroredEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport { postUpdateToken } from '../api/postUpdateToken'\nimport * as purchaseEventTypes from '../../../payments/purchase/eventTypes'\nimport { getRefreshToken } from '../../../shared/tokenLocalStorage'\nimport { Event } from '../../../eventGroups'\n\nconst refreshTokenRequestedEpic: Epic<any, any, RootState> = (action$) =>\n  action$.pipe(\n    ofType(USERSECURITY_TOKEN_REFRESH_REQUESTED),\n    exhaustMap((event: Event<string>) =>\n      from(postUpdateToken(getRefreshToken())).pipe(\n        exhaustMap(apiResponse => {\n          // console.log('refreshTokenRequestedEpic apiResponse', apiResponse)\n          return of(apiResponse.statusCode === 200 ? tokenReceivedEvent({ ...apiResponse.data, redirectTo: event?.payload?.value }) : tokenErroredEvent(apiResponse.data))\n        }),\n        catchError(() => of(tokenErroredEvent({\n          accessToken: undefined,\n          expiresIn: 0,\n          expiry: undefined,\n          idToken: undefined,\n          scope: undefined,\n          tokenType: undefined,\n          error: 'Network error',\n          errorDescription: 'Check your internet connection',\n          refreshToken: undefined,\n          redirectTo: undefined\n        })))\n      )\n    )\n  )\n\nexport default [refreshTokenRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}