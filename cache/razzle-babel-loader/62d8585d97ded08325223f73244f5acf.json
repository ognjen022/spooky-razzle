{"ast":null,"code":"import _asyncToGenerator from \"/Users/ognjen/Desktop/with-typescript/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"/Users/ognjen/Desktop/with-typescript/node_modules/@babel/runtime/regenerator\";\nimport { baseUrl } from '../../../shared/baseUrl';\nimport { getHeaders } from '../../../shared/getHeaders';\nexport var getPaymentsPaymentDetails = function getPaymentsPaymentDetails(request) {\n  return fetch(\"\".concat(baseUrl, \"/v1/customer/subscriptions\"), {\n    method: 'POST',\n    headers: getHeaders(),\n    body: JSON.stringify({\n      name: request.name,\n      number: request.card,\n      cvc: request.ccv,\n      exp_month: request.expiryMonth,\n      exp_year: request.expiryYear,\n      address_line1: request.address1,\n      address_line2: request.address2,\n      address_city: request.city,\n      address_zip: request.postCode,\n      address_country: request.country\n    })\n  }).then( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n      var json, data, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return response.json();\n\n            case 2:\n              json = _context.sent;\n              data = json.data;\n              result = {\n                data: data || json['message'] && {\n                  error: json['message'] || ''\n                } || null,\n                statusCode: json['is_success'] ? 200 : 500,\n                success: json['is_success'],\n                is_success: json['is_success']\n              };\n              return _context.abrupt(\"return\", result);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/services/payments/paymentDetails/api/getPaymentsPaymentDetails.ts"],"names":["baseUrl","getHeaders","getPaymentsPaymentDetails","request","fetch","method","headers","body","JSON","stringify","name","number","card","cvc","ccv","exp_month","expiryMonth","exp_year","expiryYear","address_line1","address1","address_line2","address2","address_city","city","address_zip","postCode","address_country","country","then","response","json","data","result","error","statusCode","success","is_success"],"mappings":";;AACA,SAASA,OAAT,QAAwB,yBAAxB;AAEA,SAASC,UAAT,QAA2B,4BAA3B;AAEA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,OAAD,EAAkF;AACzH,SAAOC,KAAK,WAAIJ,OAAJ,iCAAyC;AACnDK,IAAAA,MAAM,EAAE,MAD2C;AAEnDC,IAAAA,OAAO,EAAEL,UAAU,EAFgC;AAGnDM,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,IAAI,EAAEP,OAAO,CAACO,IADK;AAEnBC,MAAAA,MAAM,EAAER,OAAO,CAACS,IAFG;AAGnBC,MAAAA,GAAG,EAAEV,OAAO,CAACW,GAHM;AAInBC,MAAAA,SAAS,EAAEZ,OAAO,CAACa,WAJA;AAKnBC,MAAAA,QAAQ,EAAEd,OAAO,CAACe,UALC;AAMnBC,MAAAA,aAAa,EAAEhB,OAAO,CAACiB,QANJ;AAOnBC,MAAAA,aAAa,EAAElB,OAAO,CAACmB,QAPJ;AAQnBC,MAAAA,YAAY,EAAEpB,OAAO,CAACqB,IARH;AASnBC,MAAAA,WAAW,EAAEtB,OAAO,CAACuB,QATF;AAUnBC,MAAAA,eAAe,EAAExB,OAAO,CAACyB;AAVN,KAAf;AAH6C,GAAzC,CAAL,CAeJC,IAfI;AAAA,wEAeC,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACWA,QAAQ,CAACC,IAAT,EADX;;AAAA;AACFA,cAAAA,IADE;AAEAC,cAAAA,IAFA,GAE+BD,IAAI,CAACC,IAFpC;AAGAC,cAAAA,MAHA,GAG8C;AAClDD,gBAAAA,IAAI,EAAEA,IAAI,IAAKD,IAAI,CAAC,SAAD,CAAJ,IAAmB;AAAEG,kBAAAA,KAAK,EAAEH,IAAI,CAAC,SAAD,CAAJ,IAAmB;AAA5B,iBAA5B,IAAiE,IADrB;AAElDI,gBAAAA,UAAU,EAAEJ,IAAI,CAAC,YAAD,CAAJ,GAAqB,GAArB,GAA2B,GAFW;AAGlDK,gBAAAA,OAAO,EAAEL,IAAI,CAAC,YAAD,CAHqC;AAIlDM,gBAAAA,UAAU,EAAEN,IAAI,CAAC,YAAD;AAJkC,eAH9C;AAAA,+CASCE,MATD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAfD;;AAAA;AAAA;AAAA;AAAA,MAAP;AA0BD,CA3BM","sourcesContent":["import { PaymentDetailsRequest, PaymentDetailsResponse } from '../models'\nimport { baseUrl } from '../../../shared/baseUrl'\nimport { ApiResponse } from '../../../shared/ApiResponse'\nimport { getHeaders } from '../../../shared/getHeaders'\n\nexport const getPaymentsPaymentDetails = (request: PaymentDetailsRequest): Promise<ApiResponse<PaymentDetailsResponse>> => {\n  return fetch(`${baseUrl}/v1/customer/subscriptions`, {\n    method: 'POST',\n    headers: getHeaders(),\n    body: JSON.stringify({\n      name: request.name,\n      number: request.card,\n      cvc: request.ccv,\n      exp_month: request.expiryMonth,\n      exp_year: request.expiryYear,\n      address_line1: request.address1,\n      address_line2: request.address2,\n      address_city: request.city,\n      address_zip: request.postCode,\n      address_country: request.country\n    })\n  }).then(async response => {\n    let json = await response.json()\n    const data: PaymentDetailsResponse = json.data\n    const result: ApiResponse<PaymentDetailsResponse> = {\n      data: data || (json['message'] && { error: json['message'] || '' }) || null,\n      statusCode: json['is_success'] ? 200 : 500,\n      success: json['is_success'],\n      is_success: json['is_success']\n    }\n    return result\n  })\n}\n"]},"metadata":{},"sourceType":"module"}