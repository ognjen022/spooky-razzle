{"ast":null,"code":"import { from, of, EMPTY } from 'rxjs';\nimport { mergeMap, filter, catchError } from 'rxjs/operators';\nimport { isActionOf } from 'typesafe-actions';\nimport { tagsSaveStreamEvent } from '../events';\nimport Notifications from 'react-notification-system-redux';\nimport { postOrDeleteSavedStreams } from '../api/postOrDeleteSavedStreams';\n\nconst getErrorNotification = method => {\n  return Notifications.error({\n    title: 'Error',\n    message: `An error occurred. Stream not ${method.toLocaleLowerCase().replace('delete', 'delet')}ed. Please try again.`,\n    position: 'tc',\n    autoDismiss: 10,\n    action: {\n      label: 'Close',\n      callback: () => console.log('Notification closed')\n    }\n  });\n};\n\nconst streamSaveRequestedEpic = (action$, state$) => action$.pipe(filter(isActionOf(tagsSaveStreamEvent)), mergeMap(event => {\n  const eventId = event.payload;\n  let method = 'POST';\n  if (!state$.value.content.tags.savedEventIds.includes(eventId)) method = 'DELETE';\n  return from(postOrDeleteSavedStreams(eventId, method)).pipe(mergeMap(apiResponse => {\n    if (apiResponse.is_success) {\n      return EMPTY;\n    }\n\n    return of(getErrorNotification(method));\n  }), catchError(() => of(getErrorNotification(method))));\n}));\n\nexport default [streamSaveRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/services/content/tags/epics/saveStreamRequestedEpic.ts"],"names":["from","of","EMPTY","mergeMap","filter","catchError","isActionOf","tagsSaveStreamEvent","Notifications","postOrDeleteSavedStreams","getErrorNotification","method","error","title","message","toLocaleLowerCase","replace","position","autoDismiss","action","label","callback","console","log","streamSaveRequestedEpic","action$","state$","pipe","event","eventId","payload","value","content","tags","savedEventIds","includes","apiResponse","is_success"],"mappings":"AACA,SAASA,IAAT,EAAeC,EAAf,EAAmBC,KAAnB,QAAgC,MAAhC;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,UAA3B,QAA6C,gBAA7C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,mBAAT,QAAoC,WAApC;AAEA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,SAASC,wBAAT,QAAyC,iCAAzC;;AAEA,MAAMC,oBAAoB,GAAIC,MAAD,IAAoB;AAC/C,SAAOH,aAAa,CAACI,KAAd,CACL;AACEC,IAAAA,KAAK,EAAE,OADT;AAEEC,IAAAA,OAAO,EAAG,iCAAgCH,MAAM,CAACI,iBAAP,GAA2BC,OAA3B,CAAmC,QAAnC,EAA6C,OAA7C,CAAsD,uBAFlG;AAGEC,IAAAA,QAAQ,EAAE,IAHZ;AAIEC,IAAAA,WAAW,EAAE,EAJf;AAKEC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,OADD;AAENC,MAAAA,QAAQ,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAFV;AALV,GADK,CAAP;AAYD,CAbD;;AAeA,MAAMC,uBAAkD,GAAG,CAACC,OAAD,EAAUC,MAAV,KACzDD,OAAO,CAACE,IAAR,CACEvB,MAAM,CAACE,UAAU,CAACC,mBAAD,CAAX,CADR,EAEEJ,QAAQ,CAAEyB,KAAD,IAAgB;AACvB,QAAMC,OAAe,GAAGD,KAAK,CAACE,OAA9B;AACA,MAAInB,MAAc,GAAG,MAArB;AAEA,MAAI,CAACe,MAAM,CAACK,KAAP,CAAaC,OAAb,CAAqBC,IAArB,CAA0BC,aAA1B,CAAwCC,QAAxC,CAAiDN,OAAjD,CAAL,EAAgElB,MAAM,GAAG,QAAT;AAChE,SAAOX,IAAI,CAACS,wBAAwB,CAACoB,OAAD,EAAUlB,MAAV,CAAzB,CAAJ,CAAgDgB,IAAhD,CACLxB,QAAQ,CAACiC,WAAW,IAAI;AACtB,QAAIA,WAAW,CAACC,UAAhB,EAA4B;AAC1B,aAAOnC,KAAP;AACD;;AAED,WAAOD,EAAE,CAACS,oBAAoB,CAACC,MAAD,CAArB,CAAT;AACD,GANO,CADH,EAQLN,UAAU,CAAC,MAAMJ,EAAE,CAACS,oBAAoB,CAACC,MAAD,CAArB,CAAT,CARL,CAAP;AAUD,CAfO,CAFV,CADF;;AAqBA,eAAe,CAACa,uBAAD,CAAf","sourcesContent":["import { Epic } from 'redux-observable'\nimport { from, of, EMPTY } from 'rxjs'\nimport { mergeMap, filter, catchError } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { tagsSaveStreamEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport Notifications from 'react-notification-system-redux'\nimport { postOrDeleteSavedStreams } from '../api/postOrDeleteSavedStreams'\n\nconst getErrorNotification = (method: string) => {\n  return Notifications.error(\n    {\n      title: 'Error',\n      message: `An error occurred. Stream not ${method.toLocaleLowerCase().replace('delete', 'delet')}ed. Please try again.`,\n      position: 'tc',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    }\n  )\n}\n\nconst streamSaveRequestedEpic: Epic<any, any, RootState> = (action$, state$) =>\n  action$.pipe(\n    filter(isActionOf(tagsSaveStreamEvent)),\n    mergeMap((event: any) => {\n      const eventId: number = event.payload\n      let method: string = 'POST'\n\n      if (!state$.value.content.tags.savedEventIds.includes(eventId)) method = 'DELETE'\n      return from(postOrDeleteSavedStreams(eventId, method)).pipe(\n        mergeMap(apiResponse => {\n          if (apiResponse.is_success) {\n            return EMPTY\n          }\n\n          return of(getErrorNotification(method))\n        }),\n        catchError(() => of(getErrorNotification(method)))\n      )\n    })\n  )\n\nexport default [streamSaveRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}