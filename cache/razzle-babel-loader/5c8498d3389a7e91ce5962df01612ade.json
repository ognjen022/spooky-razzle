{"ast":null,"code":"import _extends from \"/Users/ognjen/Desktop/spooky-live-ssr/ui/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/Users/ognjen/Desktop/spooky-live-ssr/ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\n\nvar Input = function Input(props) {\n  var _data$meta, _data$meta2, _data$meta3;\n\n  var data = props.data,\n      type = props.type,\n      label = props.label,\n      rest = _objectWithoutProperties(props, [\"data\", \"type\", \"label\"]);\n\n  var hasErrors = (data === null || data === void 0 ? void 0 : (_data$meta = data.meta) === null || _data$meta === void 0 ? void 0 : _data$meta.touched) && (data === null || data === void 0 ? void 0 : (_data$meta2 = data.meta) === null || _data$meta2 === void 0 ? void 0 : _data$meta2.error) ? true : false;\n  return __jsx(React.Fragment, null, __jsx(\"input\", _extends({\n    \"aria-invalid\": hasErrors,\n    type: type\n  }, data === null || data === void 0 ? void 0 : data.input, rest)), hasErrors && __jsx(\"span\", {\n    role: \"alert\"\n  }, data === null || data === void 0 ? void 0 : (_data$meta3 = data.meta) === null || _data$meta3 === void 0 ? void 0 : _data$meta3.error));\n};\n\nvar defaultProps = {\n  data: null,\n  type: 'text',\n  label: '',\n  autoComplete: 'off',\n  autoCorrect: 'off',\n  autoCapitalize: 'off',\n  spellCheck: false\n};\nInput.defaultProps = defaultProps;\nexport default Input;","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky-live-ssr/ui/src/components/Input/Input.tsx"],"names":["React","Input","props","data","type","label","rest","hasErrors","meta","touched","error","input","defaultProps","autoComplete","autoCorrect","autoCapitalize","spellCheck"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAkEA,IAAMC,KAA4B,GAAG,SAA/BA,KAA+B,CAACC,KAAD,EAAW;AAAA;;AAAA,MACtCC,IADsC,GACPD,KADO,CACtCC,IADsC;AAAA,MAChCC,IADgC,GACPF,KADO,CAChCE,IADgC;AAAA,MAC1BC,KAD0B,GACPH,KADO,CAC1BG,KAD0B;AAAA,MAChBC,IADgB,4BACPJ,KADO;;AAG9C,MAAMK,SAAS,GAAG,CAAAJ,IAAI,SAAJ,IAAAA,IAAI,WAAJ,0BAAAA,IAAI,CAAEK,IAAN,0DAAYC,OAAZ,MAAuBN,IAAvB,aAAuBA,IAAvB,sCAAuBA,IAAI,CAAEK,IAA7B,gDAAuB,YAAYE,KAAnC,IAA2C,IAA3C,GAAkD,KAApE;AAGA,SACE,4BACE;AAAO,oBAAcH,SAArB;AAAgC,IAAA,IAAI,EAAEH;AAAtC,KAAgDD,IAAhD,aAAgDA,IAAhD,uBAAgDA,IAAI,CAAEQ,KAAtD,EAAiEL,IAAjE,EADF,EAEGC,SAAS,IAAI;AAAM,IAAA,IAAI,EAAC;AAAX,KAAoBJ,IAApB,aAAoBA,IAApB,sCAAoBA,IAAI,CAAEK,IAA1B,gDAAoB,YAAYE,KAAhC,CAFhB,CADF;AAMD,CAZD;;AAcA,IAAME,YAAyB,GAAG;AAChCT,EAAAA,IAAI,EAAE,IAD0B;AAEhCC,EAAAA,IAAI,EAAE,MAF0B;AAGhCC,EAAAA,KAAK,EAAE,EAHyB;AAIhCQ,EAAAA,YAAY,EAAE,KAJkB;AAKhCC,EAAAA,WAAW,EAAE,KALmB;AAMhCC,EAAAA,cAAc,EAAE,KANgB;AAOhCC,EAAAA,UAAU,EAAE;AAPoB,CAAlC;AAUAf,KAAK,CAACW,YAAN,GAAqBA,YAArB;AAEA,eAAeX,KAAf","sourcesContent":["import React from 'react'\n\ninterface IInputProps {\n  // unique id for the control\n  id?: string\n\n  // Control type\n  // Default: text\n  type: ControlType\n\n  // Data is the value given by useField (react-final-form-hooks library)\n  // Example data object for Email would be: { Email.input } { Email.meta }\n  data?: any\n\n  // Label text (Required)\n  label?: string\n\n  // Text max length\n  maxLength?: number\n\n  // Text min length\n  minLength?: number\n\n  // Native mobile features\n  autoComplete?: string\n  autoCorrect?: string\n  autoCapitalize?: string\n  spellCheck?: boolean\n\n  // Specifies whether a control is required or not\n  required?: boolean\n\n  disabled?: boolean\n\n  autoFocus?: boolean\n\n  onInput?: any\n\n  placeholder?: string\n}\n\n// Allowed control types\ntype ControlType =\n  | 'button'\n  | 'checkbox'\n  | 'color'\n  | 'date'\n  | 'datetime-local'\n  | 'email'\n  | 'file'\n  | 'hidden'\n  | 'image'\n  | 'month'\n  | 'number'\n  | 'password'\n  | 'radio'\n  | 'range'\n  | 'reset'\n  | 'search'\n  | 'submit'\n  | 'tel'\n  | 'text'\n  | 'time'\n  | 'url'\n  | 'week'\n\nconst Input: React.FC<IInputProps> = (props) => {\n  const { data, type, label, ...rest } = props\n\n  const hasErrors = data?.meta?.touched && data?.meta?.error ? true : false\n\n\n  return (\n    <>\n      <input aria-invalid={hasErrors} type={type} {...data?.input} {...rest} />\n      {hasErrors && <span role=\"alert\">{data?.meta?.error}</span>}\n    </>\n  )\n}\n\nconst defaultProps: IInputProps = {\n  data: null,\n  type: 'text',\n  label: '',\n  autoComplete: 'off',\n  autoCorrect: 'off',\n  autoCapitalize: 'off',\n  spellCheck: false,\n}\n\nInput.defaultProps = defaultProps\n\nexport default Input\n"]},"metadata":{},"sourceType":"module"}