{"ast":null,"code":"import { videoPlayerTokenRequested, videoPlayerTokenReceived, videoPlayerTokenErrored } from './../events';\nimport { getVideoPlayerToken } from './../api/getVideoPlayerToken';\nimport { isActionOf } from 'typesafe-actions';\nimport { filter, exhaustMap, catchError } from 'rxjs/operators';\nimport { from, of } from 'rxjs';\n\nconst videoPlayerTokenRequestedEpic = (action$, state$) => action$.pipe(filter(isActionOf(videoPlayerTokenRequested)), exhaustMap(event => from(getVideoPlayerToken(event.payload)).pipe(exhaustMap(apiResponse => {\n  if (apiResponse.statusCode === 200) {\n    return of(videoPlayerTokenReceived(apiResponse.data));\n  }\n\n  return of(videoPlayerTokenErrored(apiResponse.data));\n}), catchError(() => of(videoPlayerTokenErrored({\n  id: undefined,\n  error: 'Network error',\n  errorDescription: 'Check your network connection'\n}))))));\n\nexport default [videoPlayerTokenRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/services/content/videoPlayer/epics/videoPlayerTokenRequestedEpic.ts"],"names":["videoPlayerTokenRequested","videoPlayerTokenReceived","videoPlayerTokenErrored","getVideoPlayerToken","isActionOf","filter","exhaustMap","catchError","from","of","videoPlayerTokenRequestedEpic","action$","state$","pipe","event","payload","apiResponse","statusCode","data","id","undefined","error","errorDescription"],"mappings":"AAAA,SAASA,yBAAT,EAAoCC,wBAApC,EAA8DC,uBAA9D,QAA6F,aAA7F;AACA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,UAA7B,QAA+C,gBAA/C;AAGA,SAASC,IAAT,EAAeC,EAAf,QAAyB,MAAzB;;AAEA,MAAMC,6BAAwD,GAAG,CAACC,OAAD,EAAUC,MAAV,KAC7DD,OAAO,CAACE,IAAR,CACIR,MAAM,CAACD,UAAU,CAACJ,yBAAD,CAAX,CADV,EAEIM,UAAU,CAAEQ,KAAD,IACPN,IAAI,CAACL,mBAAmB,CAACW,KAAK,CAACC,OAAP,CAApB,CAAJ,CAAyCF,IAAzC,CACIP,UAAU,CAACU,WAAW,IAAI;AACtB,MAAIA,WAAW,CAACC,UAAZ,KAA2B,GAA/B,EAAoC;AAChC,WAAOR,EAAE,CACLR,wBAAwB,CAACe,WAAW,CAACE,IAAb,CADnB,CAAT;AAGH;;AACD,SAAOT,EAAE,CAACP,uBAAuB,CAACc,WAAW,CAACE,IAAb,CAAxB,CAAT;AACH,CAPS,CADd,EASIX,UAAU,CAAC,MAAME,EAAE,CAACP,uBAAuB,CAAC;AACxCiB,EAAAA,EAAE,EAAEC,SADoC;AAExCC,EAAAA,KAAK,EAAE,eAFiC;AAGxCC,EAAAA,gBAAgB,EAAE;AAHsB,CAAD,CAAxB,CAAT,CATd,CADM,CAFd,CADJ;;AAsBA,eAAe,CAACZ,6BAAD,CAAf","sourcesContent":["import { videoPlayerTokenRequested, videoPlayerTokenReceived, videoPlayerTokenErrored } from './../events';\nimport { getVideoPlayerToken } from './../api/getVideoPlayerToken';\nimport { isActionOf } from 'typesafe-actions';\nimport { filter, exhaustMap, catchError } from 'rxjs/operators';\nimport { RootState } from '../../../RootState';\nimport { Epic } from 'redux-observable';\nimport { from, of } from 'rxjs'\n\nconst videoPlayerTokenRequestedEpic: Epic<any, any, RootState> = (action$, state$) =>\n    action$.pipe(\n        filter(isActionOf(videoPlayerTokenRequested)),\n        exhaustMap((event) =>\n            from(getVideoPlayerToken(event.payload)).pipe(\n                exhaustMap(apiResponse => {\n                    if (apiResponse.statusCode === 200) {\n                        return of(\n                            videoPlayerTokenReceived(apiResponse.data)\n                        )\n                    }\n                    return of(videoPlayerTokenErrored(apiResponse.data))\n                }),\n                catchError(() => of(videoPlayerTokenErrored({\n                    id: undefined,\n                    error: 'Network error',\n                    errorDescription: 'Check your network connection'\n                })))\n            )\n        ));\n\n\nexport default [videoPlayerTokenRequestedEpic]"]},"metadata":{},"sourceType":"module"}