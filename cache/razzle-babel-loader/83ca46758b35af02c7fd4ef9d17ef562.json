{"ast":null,"code":"import { contactUsRequestedEvent, contactUsReceivedEvent, contactUsErroredEvent } from './../events';\nimport { from, of } from 'rxjs';\nimport { exhaustMap, filter, catchError } from 'rxjs/operators';\nimport { isActionOf } from 'typesafe-actions';\nimport { postContactUs } from '../api/postContactUs';\nimport Notifications from 'react-notification-system-redux';\n\nconst getSuccessNotification = () => {\n  return Notifications.success({\n    title: 'Sent',\n    message: 'Thanks for your message. We\\'ll be in touch shortly',\n    position: 'tc',\n    autoDismiss: 10,\n    action: {\n      label: 'Close',\n      callback: () => console.log('Notification closed')\n    }\n  });\n};\n\nconst getErrorNotification = error => {\n  return Notifications.error({\n    title: 'Send failed',\n    message: `An error occurred ${error}`,\n    position: 'tc',\n    autoDismiss: 10,\n    action: {\n      label: 'Close',\n      callback: () => console.log('Notification closed')\n    }\n  });\n};\n\nconst contactUsRequestedEpic = (action$, store) => action$.pipe(filter(isActionOf(contactUsRequestedEvent)), exhaustMap(event => from(postContactUs(event.payload.firstname, event.payload.lastname, event.payload.email, event.payload.messsage)).pipe(exhaustMap(apiResponse => of(apiResponse.statusCode === 200 ? contactUsReceivedEvent(apiResponse.data) : contactUsErroredEvent(apiResponse.data), apiResponse.statusCode === 200 ? getSuccessNotification() : getErrorNotification(''))), catchError(() => of(contactUsErroredEvent({\n  contactUsData: undefined,\n  error: 'Network error',\n  errorDescription: 'Check your network connection'\n}))))));\n\nexport default [contactUsRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky.live-ssr/src/services/contact/epic/contactUsRequestedEpic.ts"],"names":["contactUsRequestedEvent","contactUsReceivedEvent","contactUsErroredEvent","from","of","exhaustMap","filter","catchError","isActionOf","postContactUs","Notifications","getSuccessNotification","success","title","message","position","autoDismiss","action","label","callback","console","log","getErrorNotification","error","contactUsRequestedEpic","action$","store","pipe","event","payload","firstname","lastname","email","messsage","apiResponse","statusCode","data","contactUsData","undefined","errorDescription"],"mappings":"AAAA,SAASA,uBAAT,EAAuDC,sBAAvD,EAA+EC,qBAA/E,QAA4G,aAA5G;AAEA,SAASC,IAAT,EAAeC,EAAf,QAAyB,MAAzB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,UAA7B,QAA+C,gBAA/C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,SAASC,aAAT,QAA8B,sBAA9B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;;AAEA,MAAMC,sBAAsB,GAAG,MAAM;AACnC,SAAOD,aAAa,CAACE,OAAd,CACL;AACEC,IAAAA,KAAK,EAAE,MADT;AAEEC,IAAAA,OAAO,EAAE,qDAFX;AAGEC,IAAAA,QAAQ,EAAE,IAHZ;AAIEC,IAAAA,WAAW,EAAE,EAJf;AAKEC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,OADD;AAENC,MAAAA,QAAQ,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAFV;AALV,GADK,CAAP;AAYD,CAbD;;AAeA,MAAMC,oBAAoB,GAAIC,KAAD,IAAgB;AAC3C,SAAOb,aAAa,CAACa,KAAd,CACL;AACEV,IAAAA,KAAK,EAAE,aADT;AAEEC,IAAAA,OAAO,EAAG,qBAAoBS,KAAM,EAFtC;AAGER,IAAAA,QAAQ,EAAE,IAHZ;AAIEC,IAAAA,WAAW,EAAE,EAJf;AAKEC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,OADD;AAENC,MAAAA,QAAQ,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAFV;AALV,GADK,CAAP;AAYD,CAbD;;AAeA,MAAMG,sBAAiD,GAAG,CAACC,OAAD,EAAUC,KAAV,KACxDD,OAAO,CAACE,IAAR,CACErB,MAAM,CAACE,UAAU,CAACR,uBAAD,CAAX,CADR,EAEEK,UAAU,CAAEuB,KAAD,IACTzB,IAAI,CAACM,aAAa,CAACmB,KAAK,CAACC,OAAN,CAAcC,SAAf,EAA0BF,KAAK,CAACC,OAAN,CAAcE,QAAxC,EAAkDH,KAAK,CAACC,OAAN,CAAcG,KAAhE,EAAuEJ,KAAK,CAACC,OAAN,CAAcI,QAArF,CAAd,CAAJ,CAAkHN,IAAlH,CACEtB,UAAU,CAAC6B,WAAW,IACpB9B,EAAE,CACA8B,WAAW,CAACC,UAAZ,KAA2B,GAA3B,GAAiClC,sBAAsB,CAACiC,WAAW,CAACE,IAAb,CAAvD,GAA4ElC,qBAAqB,CAACgC,WAAW,CAACE,IAAb,CADjG,EAEAF,WAAW,CAACC,UAAZ,KAA2B,GAA3B,GAAiCxB,sBAAsB,EAAvD,GAA4DW,oBAAoB,CAAC,EAAD,CAFhF,CADM,CADZ,EAOEf,UAAU,CAAC,MAAMH,EAAE,CAACF,qBAAqB,CAAC;AACxCmC,EAAAA,aAAa,EAAEC,SADyB;AAExCf,EAAAA,KAAK,EAAE,eAFiC;AAGxCgB,EAAAA,gBAAgB,EAAE;AAHsB,CAAD,CAAtB,CAAT,CAPZ,CADQ,CAFZ,CADF;;AAoBA,eAAe,CAACf,sBAAD,CAAf","sourcesContent":["import { contactUsRequestedEvent, ContactUsEventTypes, contactUsReceivedEvent, contactUsErroredEvent } from './../events';\nimport { Epic } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, filter, catchError } from 'rxjs/operators'\nimport { isActionOf } from 'typesafe-actions'\nimport { RootState } from '../../RootState'\nimport { postContactUs } from '../api/postContactUs'\nimport Notifications from 'react-notification-system-redux';\n\nconst getSuccessNotification = () => {\n  return Notifications.success(\n    {\n      title: 'Sent',\n      message: 'Thanks for your message. We\\'ll be in touch shortly',\n      position: 'tc',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    }\n  )\n}\n\nconst getErrorNotification = (error: any) => {\n  return Notifications.error(\n    {\n      title: 'Send failed',\n      message: `An error occurred ${error}`,\n      position: 'tc',\n      autoDismiss: 10,\n      action: {\n        label: 'Close',\n        callback: () => console.log('Notification closed')\n      }\n    }\n  )\n}\n\nconst contactUsRequestedEpic: Epic<any, any, RootState> = (action$, store) =>\n  action$.pipe(\n    filter(isActionOf(contactUsRequestedEvent)),\n    exhaustMap((event) =>\n      from(postContactUs(event.payload.firstname, event.payload.lastname, event.payload.email, event.payload.messsage)).pipe(\n        exhaustMap(apiResponse =>\n          of(\n            apiResponse.statusCode === 200 ? contactUsReceivedEvent(apiResponse.data) : contactUsErroredEvent(apiResponse.data),\n            apiResponse.statusCode === 200 ? getSuccessNotification() : getErrorNotification(''),\n          )\n        ),\n        catchError(() => of(contactUsErroredEvent({\n          contactUsData: undefined,\n          error: 'Network error',\n          errorDescription: 'Check your network connection'\n        })))\n      )\n    )\n  )\n\nexport default [contactUsRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}