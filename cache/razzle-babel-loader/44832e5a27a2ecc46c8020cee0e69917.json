{"ast":null,"code":"import { ofType } from 'redux-observable';\nimport { from, of } from 'rxjs';\nimport { exhaustMap, catchError } from 'rxjs/operators';\nimport { promoErroedEvent, promoReceivedEvent } from '../events';\nimport * as eventTypes from '../eventTypes';\nimport { getPromoCode } from '../api/getPromoCode';\nimport Notifications from 'react-notification-system-redux';\n\nconst getSuccessNotification = () => {\n  return Notifications.success({\n    title: 'Payment succeeded',\n    message: 'Enjoy your purchase',\n    position: 'tc',\n    autoDismiss: 10,\n    action: {\n      label: 'Close',\n      callback: () => console.log('Notification closed')\n    }\n  });\n};\n\nconst getErrorNotification = error => {\n  return Notifications.error({\n    title: 'Payment failed',\n    message: `An error occurred ${error}`,\n    position: 'tc',\n    autoDismiss: 10,\n    action: {\n      label: 'Close',\n      callback: () => console.log('Notification closed')\n    }\n  });\n};\n\nconst promoCodeRequestedEpic = (action$, state$) => action$.pipe(ofType(eventTypes.PAYMENTS_PURCHASE_PROMOCODE_REQUESTED), exhaustMap(event => {\n  if (event.payload.promoCode === '') {\n    return of(promoReceivedEvent({}));\n  }\n\n  return from(getPromoCode(event.payload.promoCode, event.payload.productPrice)).pipe(exhaustMap(apiResponse => {\n    if (apiResponse.is_success) {\n      return of(promoReceivedEvent(apiResponse.data));\n    } else {\n      return of(promoErroedEvent({\n        error: 'Request error',\n        errorDescription: apiResponse.data.message\n      }), getErrorNotification(apiResponse.data));\n    }\n  }), catchError(() => of(promoErroedEvent({\n    id: undefined,\n    error: 'Network error',\n    errorDescription: 'Check your internet connection'\n  }))));\n}));\n\nexport default [promoCodeRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky-live-ssr/ui/src/services/payments/purchase/epics/promoCodeRequestedEpic.ts"],"names":["ofType","from","of","exhaustMap","catchError","promoErroedEvent","promoReceivedEvent","eventTypes","getPromoCode","Notifications","getSuccessNotification","success","title","message","position","autoDismiss","action","label","callback","console","log","getErrorNotification","error","promoCodeRequestedEpic","action$","state$","pipe","PAYMENTS_PURCHASE_PROMOCODE_REQUESTED","event","payload","promoCode","productPrice","apiResponse","is_success","data","errorDescription","id","undefined"],"mappings":"AACA,SAAeA,MAAf,QAA6B,kBAA7B;AACA,SAASC,IAAT,EAAeC,EAAf,QAAyB,MAAzB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,gBAAvC;AACA,SAASC,gBAAT,EAA2BC,kBAA3B,QAAwG,WAAxG;AAEA,OAAO,KAAKC,UAAZ,MAA4B,eAA5B;AAKA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,OAAOC,aAAP,MAA0B,iCAA1B;;AAEA,MAAMC,sBAAsB,GAAG,MAAM;AACjC,SAAOD,aAAa,CAACE,OAAd,CACL;AACEC,IAAAA,KAAK,EAAE,mBADT;AAEEC,IAAAA,OAAO,EAAE,qBAFX;AAGEC,IAAAA,QAAQ,EAAE,IAHZ;AAIEC,IAAAA,WAAW,EAAE,EAJf;AAKEC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,OADD;AAENC,MAAAA,QAAQ,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAFV;AALV,GADK,CAAP;AAYD,CAbH;;AAeE,MAAMC,oBAAoB,GAAIC,KAAD,IAAgB;AAC3C,SAAOb,aAAa,CAACa,KAAd,CACL;AACEV,IAAAA,KAAK,EAAE,gBADT;AAEEC,IAAAA,OAAO,EAAG,qBAAoBS,KAAM,EAFtC;AAGER,IAAAA,QAAQ,EAAE,IAHZ;AAIEC,IAAAA,WAAW,EAAE,EAJf;AAKEC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,OADD;AAENC,MAAAA,QAAQ,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAFV;AALV,GADK,CAAP;AAYD,CAbD;;AAeF,MAAMG,sBAAiD,GAAG,CAACC,OAAD,EAAUC,MAAV,KACxDD,OAAO,CAACE,IAAR,CACE1B,MAAM,CAACO,UAAU,CAACoB,qCAAZ,CADR,EAEExB,UAAU,CAACyB,KAAK,IACd;AACE,MAAIA,KAAK,CAACC,OAAN,CAAcC,SAAd,KAA4B,EAAhC,EAAoC;AAClC,WAAO5B,EAAE,CAACI,kBAAkB,CAAC,EAAD,CAAnB,CAAT;AACD;;AACD,SAAOL,IAAI,CAACO,YAAY,CAACoB,KAAK,CAACC,OAAN,CAAcC,SAAf,EAA0BF,KAAK,CAACC,OAAN,CAAcE,YAAxC,CAAb,CAAJ,CAAwEL,IAAxE,CACLvB,UAAU,CAAC6B,WAAW,IAAI;AACxB,QAAIA,WAAW,CAACC,UAAhB,EAA4B;AAE1B,aAAO/B,EAAE,CAACI,kBAAkB,CAAC0B,WAAW,CAACE,IAAb,CAAnB,CAAT;AACD,KAHD,MAGO;AACL,aAAOhC,EAAE,CAACG,gBAAgB,CAAC;AACzBiB,QAAAA,KAAK,EAAE,eADkB;AAEzBa,QAAAA,gBAAgB,EAAEH,WAAW,CAACE,IAAZ,CAAiBrB;AAFV,OAAD,CAAjB,EAGLQ,oBAAoB,CAACW,WAAW,CAACE,IAAb,CAHf,CAAT;AAID;AACF,GAVS,CADL,EAYL9B,UAAU,CAAC,MAAMF,EAAE,CAACG,gBAAgB,CAAC;AACnC+B,IAAAA,EAAE,EAAEC,SAD+B;AAEnCf,IAAAA,KAAK,EAAE,eAF4B;AAGnCa,IAAAA,gBAAgB,EAAE;AAHiB,GAAD,CAAjB,CAAT,CAZL,CAAP;AAkBD,CAvBO,CAFZ,CADF;;AA8BA,eAAe,CAACZ,sBAAD,CAAf","sourcesContent":["import { selectGamePassPriceFormatted } from './../../products/selectors';\nimport { Epic, ofType } from 'redux-observable'\nimport { from, of } from 'rxjs'\nimport { exhaustMap, catchError } from 'rxjs/operators'\nimport { promoErroedEvent, promoReceivedEvent, purchaseTagErroredEvent, purchaseTagReceivedEvent } from '../events'\nimport { RootState } from '../../../RootState'\nimport * as eventTypes from '../eventTypes'\nimport { tagsSaveStreamEvent } from '../../../content/tags/events'\nimport { selectTag } from '../../../content/tags/selectors'\nimport * as _ from 'lodash'\nimport { tokenRefreshTokenRequestedEvent } from '../../../userSecurity/token/events'\nimport { getPromoCode } from '../api/getPromoCode';\n\nimport Notifications from 'react-notification-system-redux'\n\nconst getSuccessNotification = () => {\n    return Notifications.success(\n      {\n        title: 'Payment succeeded',\n        message: 'Enjoy your purchase',\n        position: 'tc',\n        autoDismiss: 10,\n        action: {\n          label: 'Close',\n          callback: () => console.log('Notification closed')\n        }\n      }\n    )\n  }\n  \n  const getErrorNotification = (error: any) => {\n    return Notifications.error(\n      {\n        title: 'Payment failed',\n        message: `An error occurred ${error}`,\n        position: 'tc',\n        autoDismiss: 10,\n        action: {\n          label: 'Close',\n          callback: () => console.log('Notification closed')\n        }\n      }\n    )\n  }\n\nconst promoCodeRequestedEpic: Epic<any, any, RootState> = (action$, state$) =>\n  action$.pipe(\n    ofType(eventTypes.PAYMENTS_PURCHASE_PROMOCODE_REQUESTED),\n    exhaustMap(event =>\n      {\n        if (event.payload.promoCode === '') {\n          return of(promoReceivedEvent({}))\n        }\n        return from(getPromoCode(event.payload.promoCode, event.payload.productPrice)).pipe(\n          exhaustMap(apiResponse => {\n            if (apiResponse.is_success) {\n              \n              return of(promoReceivedEvent(apiResponse.data));\n            } else {\n              return of(promoErroedEvent({\n                error: 'Request error',\n                errorDescription: apiResponse.data.message\n              }), getErrorNotification(apiResponse.data))\n            }\n          }),\n          catchError(() => of(promoErroedEvent({\n            id: undefined,\n            error: 'Network error',\n            errorDescription: 'Check your internet connection'\n          })))\n        )\n      }\n    )\n  )\n\nexport default [promoCodeRequestedEpic]\n"]},"metadata":{},"sourceType":"module"}