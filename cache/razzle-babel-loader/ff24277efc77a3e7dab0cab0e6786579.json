{"ast":null,"code":"import _asyncToGenerator from \"/Users/ognjen/Desktop/spooky-live-ssr/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/ognjen/Desktop/spooky-live-ssr/ui/src/components/ResetPasswordForm/ResetPasswordForm.tsx\",\n    _this = this;\n\nvar __jsx = React.createElement;\nimport _regeneratorRuntime from \"/Users/ognjen/Desktop/spooky-live-ssr/ui/node_modules/@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport { useForm, useField } from 'react-final-form-hooks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styles from './ResetPasswordForm.module.scss';\nimport Input from '../../components/Input/Input';\nimport Button from '../../components/Button/Button';\nimport { regexStrongPassword } from '../../utils/utils';\nimport { passwordUpdateRequestedEvent } from '../../services/userSecurity/password/events';\nimport { selectError, selectIsSubmitting } from '../../services/userSecurity/password/selectors';\n\nvar ResetPassword = function ResetPassword() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      changeButton = _useState[0],\n      setChangeButton = _useState[1];\n\n  var errorText = useSelector(function (state) {\n    return selectError(state.userSecurity.password);\n  });\n  var isSubmitting = useSelector(function (state) {\n    return selectIsSubmitting(state.userSecurity.password);\n  }); // Submit form\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(payload) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return dispatch(passwordUpdateRequestedEvent(payload.password, payload.confirmPassword));\n\n            case 2:\n              setChangeButton(true);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(); // Initial values form\n\n\n  var initialValues = {}; // Create form\n\n  var _useForm = useForm({\n    onSubmit: onSubmit,\n    validate: validate,\n    initialValues: initialValues\n  }),\n      form = _useForm.form,\n      handleSubmit = _useForm.handleSubmit,\n      dirtySinceLastSubmit = _useForm.dirtySinceLastSubmit; // Create form fields\n\n\n  var password = useField('password', form);\n  var confirmPassword = useField('confirmPassword', form);\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles['account__form'],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: styles['account__form-group'],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"New Password\"), __jsx(Input, {\n    data: password,\n    label: \"password\",\n    type: \"password\",\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }))), __jsx(\"div\", {\n    className: styles['account__form-group'],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"Confirm new Password\"), __jsx(Input, {\n    data: confirmPassword,\n    label: \"confirmPassword\",\n    type: \"password\",\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }))), __jsx(\"div\", {\n    className: styles['account__form-group-button'],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    className: \"text-right \".concat(styles['text-right']),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    type: \"submit\",\n    variant: \"secondary\",\n    color: changeButton && !isSubmitting && !errorText && !dirtySinceLastSubmit ? 'ghost' : 'success',\n    label: changeButton && !isSubmitting && !errorText && !dirtySinceLastSubmit ? 'Saved' : 'Save',\n    isLoading: isSubmitting,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }), errorText !== undefined && errorText.length > 0 && __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, errorText)))));\n};\n\nexport var validate = function validate(values) {\n  var errors = {\n    password: undefined,\n    confirmPassword: undefined\n  }; // Password validations\n\n  if (!values.password) {\n    errors.password = 'Enter your password';\n  } else if (values.password && values.password.length < 8) {\n    errors.password = 'Password must have at least 8 characters';\n  } else if (!regexStrongPassword.test(values.password)) {\n    errors.password = 'Password must inlude an upper and lower case letter, a number and a special character';\n  } else if (values.password && values.password.length > 128) {\n    errors.password = 'Password must have less than 128 characters';\n  } // Confirm Password validations\n\n\n  if (values.confirmPassword !== values.password) {\n    errors.confirmPassword = 'Passwords do not match';\n  }\n\n  return errors;\n};\nexport default ResetPassword;","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky-live-ssr/ui/src/components/ResetPasswordForm/ResetPasswordForm.tsx"],"names":["React","useState","useForm","useField","useDispatch","useSelector","styles","Input","Button","regexStrongPassword","passwordUpdateRequestedEvent","selectError","selectIsSubmitting","ResetPassword","dispatch","changeButton","setChangeButton","errorText","state","userSecurity","password","isSubmitting","onSubmit","payload","confirmPassword","initialValues","validate","form","handleSubmit","dirtySinceLastSubmit","undefined","length","values","errors","test"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useForm, useField } from 'react-final-form-hooks'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport styles from './ResetPasswordForm.module.scss'\n\nimport Input from '../../components/Input/Input'\nimport Button from '../../components/Button/Button'\n\nimport { regexStrongPassword } from '../../utils/utils'\nimport { passwordUpdateRequestedEvent } from '../../services/userSecurity/password/events'\nimport { RootState } from '../../services/RootState'\nimport { selectError, selectIsSubmitting } from '../../services/userSecurity/password/selectors'\n\nexport interface IResetPasswordFormValues {\n  password: string | undefined\n  confirmPassword: string | undefined\n}\n\nconst ResetPassword = () => {\n  let dispatch = useDispatch()\n\n  const [changeButton, setChangeButton] = useState(false)\n\n  let errorText = useSelector<RootState, string>(state => selectError(state.userSecurity.password))\n  let isSubmitting = useSelector<RootState, boolean>(state => selectIsSubmitting(state.userSecurity.password))\n\n\n  // Submit form\n  const onSubmit = async (payload: any) => {\n    await dispatch(passwordUpdateRequestedEvent(payload.password, payload.confirmPassword))\n    setChangeButton(true);\n  }\n\n  // Initial values form\n  const initialValues: Partial<IResetPasswordFormValues> = {\n\n  }\n\n  // Create form\n  const { form, handleSubmit, dirtySinceLastSubmit } = useForm({ onSubmit, validate, initialValues })\n\n  // Create form fields\n  const password = useField('password', form)\n  const confirmPassword = useField('confirmPassword', form)\n\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className={styles['account__form']}>\n        <div className={styles['account__form-group']}>\n          <p>\n            <label htmlFor=\"\">New Password</label>\n            <Input data={password} label=\"password\" type=\"password\" required />\n          </p>\n        </div>\n        <div className={styles['account__form-group']}>\n          <p>\n            <label htmlFor=\"\">Confirm new Password</label>\n            <Input data={confirmPassword} label=\"confirmPassword\" type=\"password\" required />\n          </p>\n        </div>\n        <div className={styles['account__form-group-button']}>\n          <p className={`text-right ${styles['text-right']}`}>\n            <Button\n              type=\"submit\"\n              variant={\"secondary\"}\n              color={changeButton && !isSubmitting && !errorText && !dirtySinceLastSubmit ? 'ghost' : 'success'}\n              label={changeButton && !isSubmitting && !errorText && !dirtySinceLastSubmit ? 'Saved' : 'Save'}\n              isLoading={isSubmitting}\n            />\n            {errorText !== undefined && errorText.length > 0 &&\n              <span>{errorText}</span>\n            }\n          </p>\n        </div>\n      </div>\n    </form>\n  )\n}\n\nexport const validate = (values: IResetPasswordFormValues) => {\n  const errors: IResetPasswordFormValues = {\n    password: undefined,\n    confirmPassword: undefined\n  }\n\n  // Password validations\n  if (!values.password) {\n    errors.password = 'Enter your password'\n  } else if (values.password && values.password.length < 8) {\n    errors.password = 'Password must have at least 8 characters'\n  } else if (!regexStrongPassword.test(values.password)) {\n    errors.password = 'Password must inlude an upper and lower case letter, a number and a special character'\n  } else if (values.password && values.password.length > 128) {\n    errors.password = 'Password must have less than 128 characters'\n  }\n\n  // Confirm Password validations\n  if (values.confirmPassword !== values.password) {\n    errors.confirmPassword = 'Passwords do not match'\n  }\n\n  return errors\n}\n\nexport default ResetPassword\n"]},"metadata":{},"sourceType":"module"}