{"ast":null,"code":"import _asyncToGenerator from \"/Users/ognjen/Desktop/spooky.live-ssr/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"/Users/ognjen/Desktop/spooky.live-ssr/node_modules/@babel/runtime/regenerator\";\nimport { baseUrl } from '../../../shared/baseUrl';\nimport { getHeaders } from '../../../shared/getHeaders';\nexport var getVideoPlayerToken = function getVideoPlayerToken(scope) {\n  return fetch(\"\".concat(baseUrl, \"/v1/videostream/token/\").concat(scope), {\n    method: 'GET',\n    headers: getHeaders()\n  }).then( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n      var json, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return response.json();\n\n            case 2:\n              json = _context.sent;\n              data = json.data;\n              return _context.abrupt(\"return\", {\n                success: json.success,\n                statusCode: json.statusCode,\n                data: data,\n                is_success: json.success\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};","map":{"version":3,"sources":["/Users/ognjen/Desktop/spooky.live-ssr/src/services/content/videoPlayer/api/getVideoPlayerToken.ts"],"names":["baseUrl","getHeaders","getVideoPlayerToken","scope","fetch","method","headers","then","response","json","data","success","statusCode","is_success"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,yBAAxB;AACA,SAASC,UAAT,QAA2B,4BAA3B;AAIA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAA8D;AAC/F,SAAOC,KAAK,WACPJ,OADO,mCACyBG,KADzB,GACkC;AAC5CE,IAAAA,MAAM,EAAE,KADoC;AAE5CC,IAAAA,OAAO,EAAEL,UAAU;AAFyB,GADlC,CAAL,CAKLM,IALK;AAAA,wEAKA,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACYA,QAAQ,CAACC,IAAT,EADZ;;AAAA;AACDA,cAAAA,IADC;AAECC,cAAAA,IAFD,GAE6BD,IAAI,CAACC,IAFlC;AAAA,+CAGE;AAAEC,gBAAAA,OAAO,EAAEF,IAAI,CAACE,OAAhB;AAAyBC,gBAAAA,UAAU,EAAEH,IAAI,CAACG,UAA1C;AAAsDF,gBAAAA,IAAI,EAAJA,IAAtD;AAA4DG,gBAAAA,UAAU,EAAEJ,IAAI,CAACE;AAA7E,eAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALA;;AAAA;AAAA;AAAA;AAAA,MAAP;AAUD,CAXM","sourcesContent":["import { baseUrl } from '../../../shared/baseUrl'\nimport { getHeaders } from '../../../shared/getHeaders'\nimport { ApiResponse } from '../../../shared/ApiResponse'\nimport { IVideoTokenResponse } from '../models'\n\nexport const getVideoPlayerToken = (scope: string): Promise<ApiResponse<IVideoTokenResponse>> => {\n  return fetch(\n    `${baseUrl}/v1/videostream/token/${scope}`, {\n    method: 'GET',\n    headers: getHeaders(),\n  }\n  ).then(async (response) => {\n    let json = await response.json()\n    const data: IVideoTokenResponse = json.data\n    return { success: json.success, statusCode: json.statusCode, data, is_success: json.success }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}