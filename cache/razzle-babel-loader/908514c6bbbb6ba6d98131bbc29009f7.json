{"ast":null,"code":"import { getVideoPlayerStream } from '../api/getVideoPlayerStream';\nimport { isActionOf } from 'typesafe-actions';\nimport { filter, exhaustMap, catchError } from 'rxjs/operators';\nimport { videoPlayerStreamReceived, videoPlayerStreamRequested, videoPlayerStreamErrored, videoPlayerTokenRequested } from './../events';\nimport { from, of } from 'rxjs';\n\nconst videoPlayerStreamRequestedEpic = (action$, state$) => action$.pipe(filter(isActionOf(videoPlayerStreamRequested)), exhaustMap(event => from(getVideoPlayerStream(event.payload.eventId, event.payload.videoId)).pipe(exhaustMap(apiResponse => {\n  if (apiResponse.statusCode === 200) {\n    return of(videoPlayerStreamReceived(apiResponse.data), videoPlayerTokenRequested('playback'));\n  }\n\n  return of(videoPlayerStreamErrored(apiResponse.data));\n}), catchError(() => of(videoPlayerStreamErrored({\n  id: undefined,\n  error: 'Network error',\n  errorDescription: 'Check your network connection'\n}))))));\n\nexport default [videoPlayerStreamRequestedEpic];","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/services/content/videoPlayer/epics/videoPlayerStreamRequestedEpic.ts"],"names":["getVideoPlayerStream","isActionOf","filter","exhaustMap","catchError","videoPlayerStreamReceived","videoPlayerStreamRequested","videoPlayerStreamErrored","videoPlayerTokenRequested","from","of","videoPlayerStreamRequestedEpic","action$","state$","pipe","event","payload","eventId","videoId","apiResponse","statusCode","data","id","undefined","error","errorDescription"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,6BAArC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,UAA7B,QAA+C,gBAA/C;AAEA,SAAgCC,yBAAhC,EAA2DC,0BAA3D,EAAuFC,wBAAvF,EAAiHC,yBAAjH,QAAkJ,aAAlJ;AAEA,SAASC,IAAT,EAAeC,EAAf,QAAyB,MAAzB;;AAEA,MAAMC,8BAA2E,GAAG,CAACC,OAAD,EAAUC,MAAV,KAChFD,OAAO,CAACE,IAAR,CACIZ,MAAM,CAACD,UAAU,CAACK,0BAAD,CAAX,CADV,EAEIH,UAAU,CAAEY,KAAD,IACPN,IAAI,CAACT,oBAAoB,CAACe,KAAK,CAACC,OAAN,CAAcC,OAAf,EAAwBF,KAAK,CAACC,OAAN,CAAcE,OAAtC,CAArB,CAAJ,CAAyEJ,IAAzE,CACIX,UAAU,CAACgB,WAAW,IAAI;AACtB,MAAIA,WAAW,CAACC,UAAZ,KAA2B,GAA/B,EAAoC;AAChC,WAAOV,EAAE,CACLL,yBAAyB,CAACc,WAAW,CAACE,IAAb,CADpB,EACwCb,yBAAyB,CAAC,UAAD,CADjE,CAAT;AAGH;;AACD,SAAOE,EAAE,CAACH,wBAAwB,CAACY,WAAW,CAACE,IAAb,CAAzB,CAAT;AACH,CAPS,CADd,EASIjB,UAAU,CAAC,MAAMM,EAAE,CAACH,wBAAwB,CAAC;AACzCe,EAAAA,EAAE,EAAEC,SADqC;AAEzCC,EAAAA,KAAK,EAAE,eAFkC;AAGzCC,EAAAA,gBAAgB,EAAE;AAHuB,CAAD,CAAzB,CAAT,CATd,CADM,CAFd,CADJ;;AAsBA,eAAe,CAACd,8BAAD,CAAf","sourcesContent":["import { getVideoPlayerStream } from '../api/getVideoPlayerStream';\nimport { isActionOf } from 'typesafe-actions';\nimport { filter, exhaustMap, catchError } from 'rxjs/operators';\nimport { RootState } from './../../../RootState';\nimport { VideoPlayerEventTypes, videoPlayerStreamReceived, videoPlayerStreamRequested, videoPlayerStreamErrored, videoPlayerTokenRequested } from './../events';\nimport { Epic } from 'redux-observable';\nimport { from, of } from 'rxjs'\n\nconst videoPlayerStreamRequestedEpic: Epic<VideoPlayerEventTypes, any, RootState> = (action$, state$) =>\n    action$.pipe(\n        filter(isActionOf(videoPlayerStreamRequested)),\n        exhaustMap((event) =>\n            from(getVideoPlayerStream(event.payload.eventId, event.payload.videoId)).pipe(\n                exhaustMap(apiResponse => {\n                    if (apiResponse.statusCode === 200) {\n                        return of(\n                            videoPlayerStreamReceived(apiResponse.data), videoPlayerTokenRequested('playback')\n                        )\n                    }\n                    return of(videoPlayerStreamErrored(apiResponse.data))\n                }),\n                catchError(() => of(videoPlayerStreamErrored({\n                    id: undefined,\n                    error: 'Network error',\n                    errorDescription: 'Check your network connection'\n                })))\n            )\n        ));\n\n\nexport default [videoPlayerStreamRequestedEpic]"]},"metadata":{},"sourceType":"module"}