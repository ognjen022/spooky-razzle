{"ast":null,"code":"import { applyMiddleware, compose, createStore } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n\nimport epics from '../services/rootEpic';\nimport rootReducer from '../services/rootReducer';\nimport { hash } from '../services/shared/hash';\nimport { cleanoutOldVersions } from '../services/shared/tokenLocalStorage';\ncleanoutOldVersions();\nconst persistConfig = {\n  key: `root:${hash()}`,\n  storage,\n  blacklist: ['router', 'notifications']\n};\nexport const history = createBrowserHistory();\nconst epicMiddleware = createEpicMiddleware();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // Create store\n\nfunction configureStore(initialState) {\n  // configure middlewares\n  const middlewares = [routerMiddleware(history), epicMiddleware]; // compose enhancers\n\n  const enhancer = composeEnhancers(applyMiddleware(...middlewares)); // create store\n\n  const persistedReducer = persistReducer(persistConfig, rootReducer(history));\n  return createStore(persistedReducer, initialState, enhancer);\n}\n\nconst store = configureStore();\nconst persistor = persistStore(store);\nepicMiddleware.run(epics);\nexport { store, persistor };","map":{"version":3,"sources":["/Users/ognjen/Desktop/with-typescript/src/app/store.ts"],"names":["applyMiddleware","compose","createStore","createEpicMiddleware","createBrowserHistory","routerMiddleware","persistStore","persistReducer","storage","epics","rootReducer","hash","cleanoutOldVersions","persistConfig","key","blacklist","history","epicMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","configureStore","initialState","middlewares","enhancer","persistedReducer","store","persistor","run"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAAgD;;AAGhD,OAAOC,KAAP,MAAkB,sBAAlB;AAEA,OAAOC,WAAP,MAAwB,yBAAxB;AAEA,SAASC,IAAT,QAAqB,yBAArB;AACA,SAASC,mBAAT,QAAoC,sCAApC;AAQAA,mBAAmB;AAEnB,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAG,QAAOH,IAAI,EAAG,EADA;AAEpBH,EAAAA,OAFoB;AAGpBO,EAAAA,SAAS,EAAE,CAAC,QAAD,EAAW,eAAX;AAHS,CAAtB;AAMA,OAAO,MAAMC,OAAO,GAAGZ,oBAAoB,EAApC;AACP,MAAMa,cAAc,GAAGd,oBAAoB,EAA3C;AACA,MAAMe,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+CnB,OAAxE,C,CAEA;;AACA,SAASoB,cAAT,CAAwBC,YAAxB,EAAkD;AAChD;AACA,QAAMC,WAAW,GAAG,CAAClB,gBAAgB,CAACW,OAAD,CAAjB,EAA4BC,cAA5B,CAApB,CAFgD,CAGhD;;AACA,QAAMO,QAAQ,GAAGN,gBAAgB,CAAClB,eAAe,CAAC,GAAGuB,WAAJ,CAAhB,CAAjC,CAJgD,CAKhD;;AAEA,QAAME,gBAAgB,GAAGlB,cAAc,CAACM,aAAD,EAAgBH,WAAW,CAACM,OAAD,CAA3B,CAAvC;AAEA,SAAOd,WAAW,CAACuB,gBAAD,EAAmBH,YAAnB,EAAiCE,QAAjC,CAAlB;AACD;;AAED,MAAME,KAAK,GAAGL,cAAc,EAA5B;AACA,MAAMM,SAAS,GAAGrB,YAAY,CAACoB,KAAD,CAA9B;AAEAT,cAAc,CAACW,GAAf,CAAmBnB,KAAnB;AAEA,SAASiB,KAAT,EAAgBC,SAAhB","sourcesContent":["import { applyMiddleware, compose, createStore } from 'redux'\nimport { createEpicMiddleware } from 'redux-observable'\nimport { createBrowserHistory } from 'history'\nimport { routerMiddleware } from 'connected-react-router'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\n\nimport { RootEventTypes } from '../services/RootEventTypes'\nimport epics from '../services/rootEpic'\n\nimport rootReducer from '../services/rootReducer'\nimport { RootState } from '../services/RootState'\nimport { hash } from '../services/shared/hash'\nimport { cleanoutOldVersions } from '../services/shared/tokenLocalStorage'\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: Function\n  }\n}\n\ncleanoutOldVersions()\n\nconst persistConfig = {\n  key: `root:${hash()}`,\n  storage,\n  blacklist: ['router', 'notifications']\n}\n\nexport const history = createBrowserHistory()\nconst epicMiddleware = createEpicMiddleware<RootEventTypes, RootEventTypes, RootState>()\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n// Create store\nfunction configureStore(initialState?: RootState) {\n  // configure middlewares\n  const middlewares = [routerMiddleware(history), epicMiddleware]\n  // compose enhancers\n  const enhancer = composeEnhancers(applyMiddleware(...middlewares))\n  // create store\n\n  const persistedReducer = persistReducer(persistConfig, rootReducer(history))\n\n  return createStore(persistedReducer, initialState, enhancer)\n}\n\nconst store = configureStore()\nconst persistor = persistStore(store)\n\nepicMiddleware.run(epics)\n\nexport { store, persistor }\n"]},"metadata":{},"sourceType":"module"}